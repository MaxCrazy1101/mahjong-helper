// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.0
// source: liqi.proto

package lq

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Lobby_FetchConnectionInfo_FullMethodName                 = "/lq.Lobby/fetchConnectionInfo"
	Lobby_FetchQueueInfo_FullMethodName                      = "/lq.Lobby/fetchQueueInfo"
	Lobby_CancelQueue_FullMethodName                         = "/lq.Lobby/cancelQueue"
	Lobby_OpenidCheck_FullMethodName                         = "/lq.Lobby/openidCheck"
	Lobby_Signup_FullMethodName                              = "/lq.Lobby/signup"
	Lobby_Login_FullMethodName                               = "/lq.Lobby/login"
	Lobby_FetchInfo_FullMethodName                           = "/lq.Lobby/fetchInfo"
	Lobby_LoginSuccess_FullMethodName                        = "/lq.Lobby/loginSuccess"
	Lobby_FetchServerMaintenanceInfo_FullMethodName          = "/lq.Lobby/fetchServerMaintenanceInfo"
	Lobby_EmailLogin_FullMethodName                          = "/lq.Lobby/emailLogin"
	Lobby_Oauth2Auth_FullMethodName                          = "/lq.Lobby/oauth2Auth"
	Lobby_Oauth2Check_FullMethodName                         = "/lq.Lobby/oauth2Check"
	Lobby_Oauth2Signup_FullMethodName                        = "/lq.Lobby/oauth2Signup"
	Lobby_Oauth2Login_FullMethodName                         = "/lq.Lobby/oauth2Login"
	Lobby_DmmPreLogin_FullMethodName                         = "/lq.Lobby/dmmPreLogin"
	Lobby_CreatePhoneVerifyCode_FullMethodName               = "/lq.Lobby/createPhoneVerifyCode"
	Lobby_CreateEmailVerifyCode_FullMethodName               = "/lq.Lobby/createEmailVerifyCode"
	Lobby_VerfifyCodeForSecure_FullMethodName                = "/lq.Lobby/verfifyCodeForSecure"
	Lobby_BindPhoneNumber_FullMethodName                     = "/lq.Lobby/bindPhoneNumber"
	Lobby_UnbindPhoneNumber_FullMethodName                   = "/lq.Lobby/unbindPhoneNumber"
	Lobby_FetchPhoneLoginBind_FullMethodName                 = "/lq.Lobby/fetchPhoneLoginBind"
	Lobby_CreatePhoneLoginBind_FullMethodName                = "/lq.Lobby/createPhoneLoginBind"
	Lobby_BindEmail_FullMethodName                           = "/lq.Lobby/bindEmail"
	Lobby_ModifyPassword_FullMethodName                      = "/lq.Lobby/modifyPassword"
	Lobby_BindAccount_FullMethodName                         = "/lq.Lobby/bindAccount"
	Lobby_Logout_FullMethodName                              = "/lq.Lobby/logout"
	Lobby_Heatbeat_FullMethodName                            = "/lq.Lobby/heatbeat"
	Lobby_LoginBeat_FullMethodName                           = "/lq.Lobby/loginBeat"
	Lobby_CreateNickname_FullMethodName                      = "/lq.Lobby/createNickname"
	Lobby_ModifyNickname_FullMethodName                      = "/lq.Lobby/modifyNickname"
	Lobby_ModifyBirthday_FullMethodName                      = "/lq.Lobby/modifyBirthday"
	Lobby_FetchRoom_FullMethodName                           = "/lq.Lobby/fetchRoom"
	Lobby_FetchGamingInfo_FullMethodName                     = "/lq.Lobby/fetchGamingInfo"
	Lobby_CreateRoom_FullMethodName                          = "/lq.Lobby/createRoom"
	Lobby_JoinRoom_FullMethodName                            = "/lq.Lobby/joinRoom"
	Lobby_LeaveRoom_FullMethodName                           = "/lq.Lobby/leaveRoom"
	Lobby_ReadyPlay_FullMethodName                           = "/lq.Lobby/readyPlay"
	Lobby_DressingStatus_FullMethodName                      = "/lq.Lobby/dressingStatus"
	Lobby_StartRoom_FullMethodName                           = "/lq.Lobby/startRoom"
	Lobby_RoomKickPlayer_FullMethodName                      = "/lq.Lobby/roomKickPlayer"
	Lobby_ModifyRoom_FullMethodName                          = "/lq.Lobby/modifyRoom"
	Lobby_AddRoomRobot_FullMethodName                        = "/lq.Lobby/addRoomRobot"
	Lobby_MatchGame_FullMethodName                           = "/lq.Lobby/matchGame"
	Lobby_CancelMatch_FullMethodName                         = "/lq.Lobby/cancelMatch"
	Lobby_FetchAccountInfo_FullMethodName                    = "/lq.Lobby/fetchAccountInfo"
	Lobby_ChangeAvatar_FullMethodName                        = "/lq.Lobby/changeAvatar"
	Lobby_ReceiveVersionReward_FullMethodName                = "/lq.Lobby/receiveVersionReward"
	Lobby_FetchAccountStatisticInfo_FullMethodName           = "/lq.Lobby/fetchAccountStatisticInfo"
	Lobby_FetchAccountChallengeRankInfo_FullMethodName       = "/lq.Lobby/fetchAccountChallengeRankInfo"
	Lobby_FetchAccountCharacterInfo_FullMethodName           = "/lq.Lobby/fetchAccountCharacterInfo"
	Lobby_ShopPurchase_FullMethodName                        = "/lq.Lobby/shopPurchase"
	Lobby_FetchGameRecord_FullMethodName                     = "/lq.Lobby/fetchGameRecord"
	Lobby_ReadGameRecord_FullMethodName                      = "/lq.Lobby/readGameRecord"
	Lobby_FetchGameRecordList_FullMethodName                 = "/lq.Lobby/fetchGameRecordList"
	Lobby_FetchGameRecordListV2_FullMethodName               = "/lq.Lobby/fetchGameRecordListV2"
	Lobby_FetchNextGameRecordList_FullMethodName             = "/lq.Lobby/fetchNextGameRecordList"
	Lobby_FetchCollectedGameRecordList_FullMethodName        = "/lq.Lobby/fetchCollectedGameRecordList"
	Lobby_FetchGameRecordsDetail_FullMethodName              = "/lq.Lobby/fetchGameRecordsDetail"
	Lobby_FetchGameRecordsDetailV2_FullMethodName            = "/lq.Lobby/fetchGameRecordsDetailV2"
	Lobby_AddCollectedGameRecord_FullMethodName              = "/lq.Lobby/addCollectedGameRecord"
	Lobby_RemoveCollectedGameRecord_FullMethodName           = "/lq.Lobby/removeCollectedGameRecord"
	Lobby_ChangeCollectedGameRecordRemarks_FullMethodName    = "/lq.Lobby/changeCollectedGameRecordRemarks"
	Lobby_FetchLevelLeaderboard_FullMethodName               = "/lq.Lobby/fetchLevelLeaderboard"
	Lobby_FetchChallengeLeaderboard_FullMethodName           = "/lq.Lobby/fetchChallengeLeaderboard"
	Lobby_FetchMutiChallengeLevel_FullMethodName             = "/lq.Lobby/fetchMutiChallengeLevel"
	Lobby_FetchMultiAccountBrief_FullMethodName              = "/lq.Lobby/fetchMultiAccountBrief"
	Lobby_FetchFriendList_FullMethodName                     = "/lq.Lobby/fetchFriendList"
	Lobby_FetchFriendApplyList_FullMethodName                = "/lq.Lobby/fetchFriendApplyList"
	Lobby_ApplyFriend_FullMethodName                         = "/lq.Lobby/applyFriend"
	Lobby_HandleFriendApply_FullMethodName                   = "/lq.Lobby/handleFriendApply"
	Lobby_RemoveFriend_FullMethodName                        = "/lq.Lobby/removeFriend"
	Lobby_SearchAccountById_FullMethodName                   = "/lq.Lobby/searchAccountById"
	Lobby_SearchAccountByPattern_FullMethodName              = "/lq.Lobby/searchAccountByPattern"
	Lobby_FetchAccountState_FullMethodName                   = "/lq.Lobby/fetchAccountState"
	Lobby_FetchBagInfo_FullMethodName                        = "/lq.Lobby/fetchBagInfo"
	Lobby_UseBagItem_FullMethodName                          = "/lq.Lobby/useBagItem"
	Lobby_OpenManualItem_FullMethodName                      = "/lq.Lobby/openManualItem"
	Lobby_OpenRandomRewardItem_FullMethodName                = "/lq.Lobby/openRandomRewardItem"
	Lobby_OpenAllRewardItem_FullMethodName                   = "/lq.Lobby/openAllRewardItem"
	Lobby_ComposeShard_FullMethodName                        = "/lq.Lobby/composeShard"
	Lobby_FetchAnnouncement_FullMethodName                   = "/lq.Lobby/fetchAnnouncement"
	Lobby_ReadAnnouncement_FullMethodName                    = "/lq.Lobby/readAnnouncement"
	Lobby_FetchMailInfo_FullMethodName                       = "/lq.Lobby/fetchMailInfo"
	Lobby_ReadMail_FullMethodName                            = "/lq.Lobby/readMail"
	Lobby_DeleteMail_FullMethodName                          = "/lq.Lobby/deleteMail"
	Lobby_TakeAttachmentFromMail_FullMethodName              = "/lq.Lobby/takeAttachmentFromMail"
	Lobby_ReceiveAchievementReward_FullMethodName            = "/lq.Lobby/receiveAchievementReward"
	Lobby_ReceiveAchievementGroupReward_FullMethodName       = "/lq.Lobby/receiveAchievementGroupReward"
	Lobby_FetchAchievementRate_FullMethodName                = "/lq.Lobby/fetchAchievementRate"
	Lobby_FetchAchievement_FullMethodName                    = "/lq.Lobby/fetchAchievement"
	Lobby_BuyShiLian_FullMethodName                          = "/lq.Lobby/buyShiLian"
	Lobby_MatchShiLian_FullMethodName                        = "/lq.Lobby/matchShiLian"
	Lobby_GoNextShiLian_FullMethodName                       = "/lq.Lobby/goNextShiLian"
	Lobby_UpdateClientValue_FullMethodName                   = "/lq.Lobby/updateClientValue"
	Lobby_FetchClientValue_FullMethodName                    = "/lq.Lobby/fetchClientValue"
	Lobby_ClientMessage_FullMethodName                       = "/lq.Lobby/clientMessage"
	Lobby_FetchCurrentMatchInfo_FullMethodName               = "/lq.Lobby/fetchCurrentMatchInfo"
	Lobby_UserComplain_FullMethodName                        = "/lq.Lobby/userComplain"
	Lobby_FetchReviveCoinInfo_FullMethodName                 = "/lq.Lobby/fetchReviveCoinInfo"
	Lobby_GainReviveCoin_FullMethodName                      = "/lq.Lobby/gainReviveCoin"
	Lobby_FetchDailyTask_FullMethodName                      = "/lq.Lobby/fetchDailyTask"
	Lobby_RefreshDailyTask_FullMethodName                    = "/lq.Lobby/refreshDailyTask"
	Lobby_UseGiftCode_FullMethodName                         = "/lq.Lobby/useGiftCode"
	Lobby_UseSpecialGiftCode_FullMethodName                  = "/lq.Lobby/useSpecialGiftCode"
	Lobby_FetchTitleList_FullMethodName                      = "/lq.Lobby/fetchTitleList"
	Lobby_UseTitle_FullMethodName                            = "/lq.Lobby/useTitle"
	Lobby_SendClientMessage_FullMethodName                   = "/lq.Lobby/sendClientMessage"
	Lobby_FetchGameLiveInfo_FullMethodName                   = "/lq.Lobby/fetchGameLiveInfo"
	Lobby_FetchGameLiveLeftSegment_FullMethodName            = "/lq.Lobby/fetchGameLiveLeftSegment"
	Lobby_FetchGameLiveList_FullMethodName                   = "/lq.Lobby/fetchGameLiveList"
	Lobby_FetchCommentSetting_FullMethodName                 = "/lq.Lobby/fetchCommentSetting"
	Lobby_UpdateCommentSetting_FullMethodName                = "/lq.Lobby/updateCommentSetting"
	Lobby_FetchCommentList_FullMethodName                    = "/lq.Lobby/fetchCommentList"
	Lobby_FetchCommentContent_FullMethodName                 = "/lq.Lobby/fetchCommentContent"
	Lobby_LeaveComment_FullMethodName                        = "/lq.Lobby/leaveComment"
	Lobby_DeleteComment_FullMethodName                       = "/lq.Lobby/deleteComment"
	Lobby_UpdateReadComment_FullMethodName                   = "/lq.Lobby/updateReadComment"
	Lobby_FetchRollingNotice_FullMethodName                  = "/lq.Lobby/fetchRollingNotice"
	Lobby_FetchMaintainNotice_FullMethodName                 = "/lq.Lobby/fetchMaintainNotice"
	Lobby_FetchServerTime_FullMethodName                     = "/lq.Lobby/fetchServerTime"
	Lobby_FetchPlatformProducts_FullMethodName               = "/lq.Lobby/fetchPlatformProducts"
	Lobby_FetchRandomCharacter_FullMethodName                = "/lq.Lobby/fetchRandomCharacter"
	Lobby_SetRandomCharacter_FullMethodName                  = "/lq.Lobby/setRandomCharacter"
	Lobby_CancelGooglePlayOrder_FullMethodName               = "/lq.Lobby/cancelGooglePlayOrder"
	Lobby_OpenChest_FullMethodName                           = "/lq.Lobby/openChest"
	Lobby_BuyFromChestShop_FullMethodName                    = "/lq.Lobby/buyFromChestShop"
	Lobby_FetchDailySignInInfo_FullMethodName                = "/lq.Lobby/fetchDailySignInInfo"
	Lobby_DoDailySignIn_FullMethodName                       = "/lq.Lobby/doDailySignIn"
	Lobby_DoActivitySignIn_FullMethodName                    = "/lq.Lobby/doActivitySignIn"
	Lobby_FetchCharacterInfo_FullMethodName                  = "/lq.Lobby/fetchCharacterInfo"
	Lobby_UpdateCharacterSort_FullMethodName                 = "/lq.Lobby/updateCharacterSort"
	Lobby_ChangeMainCharacter_FullMethodName                 = "/lq.Lobby/changeMainCharacter"
	Lobby_ChangeCharacterSkin_FullMethodName                 = "/lq.Lobby/changeCharacterSkin"
	Lobby_ChangeCharacterView_FullMethodName                 = "/lq.Lobby/changeCharacterView"
	Lobby_SetHiddenCharacter_FullMethodName                  = "/lq.Lobby/setHiddenCharacter"
	Lobby_SendGiftToCharacter_FullMethodName                 = "/lq.Lobby/sendGiftToCharacter"
	Lobby_SellItem_FullMethodName                            = "/lq.Lobby/sellItem"
	Lobby_FetchCommonView_FullMethodName                     = "/lq.Lobby/fetchCommonView"
	Lobby_ChangeCommonView_FullMethodName                    = "/lq.Lobby/changeCommonView"
	Lobby_SaveCommonViews_FullMethodName                     = "/lq.Lobby/saveCommonViews"
	Lobby_FetchCommonViews_FullMethodName                    = "/lq.Lobby/fetchCommonViews"
	Lobby_FetchAllCommonViews_FullMethodName                 = "/lq.Lobby/fetchAllCommonViews"
	Lobby_UseCommonView_FullMethodName                       = "/lq.Lobby/useCommonView"
	Lobby_UpgradeCharacter_FullMethodName                    = "/lq.Lobby/upgradeCharacter"
	Lobby_AddFinishedEnding_FullMethodName                   = "/lq.Lobby/addFinishedEnding"
	Lobby_ReceiveEndingReward_FullMethodName                 = "/lq.Lobby/receiveEndingReward"
	Lobby_GameMasterCommand_FullMethodName                   = "/lq.Lobby/gameMasterCommand"
	Lobby_FetchShopInfo_FullMethodName                       = "/lq.Lobby/fetchShopInfo"
	Lobby_BuyFromShop_FullMethodName                         = "/lq.Lobby/buyFromShop"
	Lobby_BuyFromZHP_FullMethodName                          = "/lq.Lobby/buyFromZHP"
	Lobby_RefreshZHPShop_FullMethodName                      = "/lq.Lobby/refreshZHPShop"
	Lobby_FetchMonthTicketInfo_FullMethodName                = "/lq.Lobby/fetchMonthTicketInfo"
	Lobby_PayMonthTicket_FullMethodName                      = "/lq.Lobby/payMonthTicket"
	Lobby_ExchangeCurrency_FullMethodName                    = "/lq.Lobby/exchangeCurrency"
	Lobby_ExchangeChestStone_FullMethodName                  = "/lq.Lobby/exchangeChestStone"
	Lobby_ExchangeDiamond_FullMethodName                     = "/lq.Lobby/exchangeDiamond"
	Lobby_FetchServerSettings_FullMethodName                 = "/lq.Lobby/fetchServerSettings"
	Lobby_FetchAccountSettings_FullMethodName                = "/lq.Lobby/fetchAccountSettings"
	Lobby_UpdateAccountSettings_FullMethodName               = "/lq.Lobby/updateAccountSettings"
	Lobby_FetchModNicknameTime_FullMethodName                = "/lq.Lobby/fetchModNicknameTime"
	Lobby_CreateWechatNativeOrder_FullMethodName             = "/lq.Lobby/createWechatNativeOrder"
	Lobby_CreateWechatAppOrder_FullMethodName                = "/lq.Lobby/createWechatAppOrder"
	Lobby_CreateAlipayOrder_FullMethodName                   = "/lq.Lobby/createAlipayOrder"
	Lobby_CreateAlipayScanOrder_FullMethodName               = "/lq.Lobby/createAlipayScanOrder"
	Lobby_CreateAlipayAppOrder_FullMethodName                = "/lq.Lobby/createAlipayAppOrder"
	Lobby_CreateJPCreditCardOrder_FullMethodName             = "/lq.Lobby/createJPCreditCardOrder"
	Lobby_CreateJPPaypalOrder_FullMethodName                 = "/lq.Lobby/createJPPaypalOrder"
	Lobby_CreateJPAuOrder_FullMethodName                     = "/lq.Lobby/createJPAuOrder"
	Lobby_CreateJPDocomoOrder_FullMethodName                 = "/lq.Lobby/createJPDocomoOrder"
	Lobby_CreateJPWebMoneyOrder_FullMethodName               = "/lq.Lobby/createJPWebMoneyOrder"
	Lobby_CreateJPSoftbankOrder_FullMethodName               = "/lq.Lobby/createJPSoftbankOrder"
	Lobby_CreateJPPayPayOrder_FullMethodName                 = "/lq.Lobby/createJPPayPayOrder"
	Lobby_FetchJPCommonCreditCardOrder_FullMethodName        = "/lq.Lobby/fetchJPCommonCreditCardOrder"
	Lobby_CreateJPGMOOrder_FullMethodName                    = "/lq.Lobby/createJPGMOOrder"
	Lobby_CreateENPaypalOrder_FullMethodName                 = "/lq.Lobby/createENPaypalOrder"
	Lobby_CreateENMasterCardOrder_FullMethodName             = "/lq.Lobby/createENMasterCardOrder"
	Lobby_CreateENVisaOrder_FullMethodName                   = "/lq.Lobby/createENVisaOrder"
	Lobby_CreateENJCBOrder_FullMethodName                    = "/lq.Lobby/createENJCBOrder"
	Lobby_CreateENAlipayOrder_FullMethodName                 = "/lq.Lobby/createENAlipayOrder"
	Lobby_CreateKRPaypalOrder_FullMethodName                 = "/lq.Lobby/createKRPaypalOrder"
	Lobby_CreateKRMasterCardOrder_FullMethodName             = "/lq.Lobby/createKRMasterCardOrder"
	Lobby_CreateKRVisaOrder_FullMethodName                   = "/lq.Lobby/createKRVisaOrder"
	Lobby_CreateKRJCBOrder_FullMethodName                    = "/lq.Lobby/createKRJCBOrder"
	Lobby_CreateKRAlipayOrder_FullMethodName                 = "/lq.Lobby/createKRAlipayOrder"
	Lobby_CreateDMMOrder_FullMethodName                      = "/lq.Lobby/createDMMOrder"
	Lobby_CreateIAPOrder_FullMethodName                      = "/lq.Lobby/createIAPOrder"
	Lobby_CreateSteamOrder_FullMethodName                    = "/lq.Lobby/createSteamOrder"
	Lobby_VerifySteamOrder_FullMethodName                    = "/lq.Lobby/verifySteamOrder"
	Lobby_CreateMyCardAndroidOrder_FullMethodName            = "/lq.Lobby/createMyCardAndroidOrder"
	Lobby_CreateMyCardWebOrder_FullMethodName                = "/lq.Lobby/createMyCardWebOrder"
	Lobby_CreatePaypalOrder_FullMethodName                   = "/lq.Lobby/createPaypalOrder"
	Lobby_CreateXsollaOrder_FullMethodName                   = "/lq.Lobby/createXsollaOrder"
	Lobby_VerifyMyCardOrder_FullMethodName                   = "/lq.Lobby/verifyMyCardOrder"
	Lobby_VerificationIAPOrder_FullMethodName                = "/lq.Lobby/verificationIAPOrder"
	Lobby_CreateYostarSDKOrder_FullMethodName                = "/lq.Lobby/createYostarSDKOrder"
	Lobby_CreateBillingOrder_FullMethodName                  = "/lq.Lobby/createBillingOrder"
	Lobby_SolveGooglePlayOrder_FullMethodName                = "/lq.Lobby/solveGooglePlayOrder"
	Lobby_SolveGooglePayOrderV3_FullMethodName               = "/lq.Lobby/solveGooglePayOrderV3"
	Lobby_DeliverAA32Order_FullMethodName                    = "/lq.Lobby/deliverAA32Order"
	Lobby_FetchMisc_FullMethodName                           = "/lq.Lobby/fetchMisc"
	Lobby_ModifySignature_FullMethodName                     = "/lq.Lobby/modifySignature"
	Lobby_FetchIDCardInfo_FullMethodName                     = "/lq.Lobby/fetchIDCardInfo"
	Lobby_UpdateIDCardInfo_FullMethodName                    = "/lq.Lobby/updateIDCardInfo"
	Lobby_FetchVipReward_FullMethodName                      = "/lq.Lobby/fetchVipReward"
	Lobby_GainVipReward_FullMethodName                       = "/lq.Lobby/gainVipReward"
	Lobby_FetchRefundOrder_FullMethodName                    = "/lq.Lobby/fetchRefundOrder"
	Lobby_FetchCustomizedContestList_FullMethodName          = "/lq.Lobby/fetchCustomizedContestList"
	Lobby_FetchCustomizedContestAuthInfo_FullMethodName      = "/lq.Lobby/fetchCustomizedContestAuthInfo"
	Lobby_EnterCustomizedContest_FullMethodName              = "/lq.Lobby/enterCustomizedContest"
	Lobby_LeaveCustomizedContest_FullMethodName              = "/lq.Lobby/leaveCustomizedContest"
	Lobby_FetchCustomizedContestOnlineInfo_FullMethodName    = "/lq.Lobby/fetchCustomizedContestOnlineInfo"
	Lobby_FetchCustomizedContestByContestId_FullMethodName   = "/lq.Lobby/fetchCustomizedContestByContestId"
	Lobby_SignupCustomizedContest_FullMethodName             = "/lq.Lobby/signupCustomizedContest"
	Lobby_StartCustomizedContest_FullMethodName              = "/lq.Lobby/startCustomizedContest"
	Lobby_StopCustomizedContest_FullMethodName               = "/lq.Lobby/stopCustomizedContest"
	Lobby_JoinCustomizedContestChatRoom_FullMethodName       = "/lq.Lobby/joinCustomizedContestChatRoom"
	Lobby_LeaveCustomizedContestChatRoom_FullMethodName      = "/lq.Lobby/leaveCustomizedContestChatRoom"
	Lobby_SayChatMessage_FullMethodName                      = "/lq.Lobby/sayChatMessage"
	Lobby_FetchCustomizedContestGameRecords_FullMethodName   = "/lq.Lobby/fetchCustomizedContestGameRecords"
	Lobby_FetchCustomizedContestGameLiveList_FullMethodName  = "/lq.Lobby/fetchCustomizedContestGameLiveList"
	Lobby_FollowCustomizedContest_FullMethodName             = "/lq.Lobby/followCustomizedContest"
	Lobby_UnfollowCustomizedContest_FullMethodName           = "/lq.Lobby/unfollowCustomizedContest"
	Lobby_FetchActivityList_FullMethodName                   = "/lq.Lobby/fetchActivityList"
	Lobby_FetchAccountActivityData_FullMethodName            = "/lq.Lobby/fetchAccountActivityData"
	Lobby_ExchangeActivityItem_FullMethodName                = "/lq.Lobby/exchangeActivityItem"
	Lobby_CompleteActivityTask_FullMethodName                = "/lq.Lobby/completeActivityTask"
	Lobby_CompleteActivityTaskBatch_FullMethodName           = "/lq.Lobby/completeActivityTaskBatch"
	Lobby_CompleteActivityFlipTask_FullMethodName            = "/lq.Lobby/completeActivityFlipTask"
	Lobby_CompletePeriodActivityTask_FullMethodName          = "/lq.Lobby/completePeriodActivityTask"
	Lobby_CompletePeriodActivityTaskBatch_FullMethodName     = "/lq.Lobby/completePeriodActivityTaskBatch"
	Lobby_CompleteRandomActivityTask_FullMethodName          = "/lq.Lobby/completeRandomActivityTask"
	Lobby_ReceiveActivityFlipTask_FullMethodName             = "/lq.Lobby/receiveActivityFlipTask"
	Lobby_CompleteSegmentTaskReward_FullMethodName           = "/lq.Lobby/completeSegmentTaskReward"
	Lobby_FetchActivityFlipInfo_FullMethodName               = "/lq.Lobby/fetchActivityFlipInfo"
	Lobby_GainAccumulatedPointActivityReward_FullMethodName  = "/lq.Lobby/gainAccumulatedPointActivityReward"
	Lobby_GainMultiPointActivityReward_FullMethodName        = "/lq.Lobby/gainMultiPointActivityReward"
	Lobby_FetchRankPointLeaderboard_FullMethodName           = "/lq.Lobby/fetchRankPointLeaderboard"
	Lobby_GainRankPointReward_FullMethodName                 = "/lq.Lobby/gainRankPointReward"
	Lobby_RichmanActivityNextMove_FullMethodName             = "/lq.Lobby/richmanActivityNextMove"
	Lobby_RichmanAcitivitySpecialMove_FullMethodName         = "/lq.Lobby/richmanAcitivitySpecialMove"
	Lobby_RichmanActivityChestInfo_FullMethodName            = "/lq.Lobby/richmanActivityChestInfo"
	Lobby_CreateGameObserveAuth_FullMethodName               = "/lq.Lobby/createGameObserveAuth"
	Lobby_RefreshGameObserveAuth_FullMethodName              = "/lq.Lobby/refreshGameObserveAuth"
	Lobby_FetchActivityBuff_FullMethodName                   = "/lq.Lobby/fetchActivityBuff"
	Lobby_UpgradeActivityBuff_FullMethodName                 = "/lq.Lobby/upgradeActivityBuff"
	Lobby_UpgradeActivityLevel_FullMethodName                = "/lq.Lobby/upgradeActivityLevel"
	Lobby_ReceiveUpgradeActivityReward_FullMethodName        = "/lq.Lobby/receiveUpgradeActivityReward"
	Lobby_UpgradeChallenge_FullMethodName                    = "/lq.Lobby/upgradeChallenge"
	Lobby_RefreshChallenge_FullMethodName                    = "/lq.Lobby/refreshChallenge"
	Lobby_FetchChallengeInfo_FullMethodName                  = "/lq.Lobby/fetchChallengeInfo"
	Lobby_ForceCompleteChallengeTask_FullMethodName          = "/lq.Lobby/forceCompleteChallengeTask"
	Lobby_FetchChallengeSeason_FullMethodName                = "/lq.Lobby/fetchChallengeSeason"
	Lobby_ReceiveChallengeRankReward_FullMethodName          = "/lq.Lobby/receiveChallengeRankReward"
	Lobby_FetchABMatchInfo_FullMethodName                    = "/lq.Lobby/fetchABMatchInfo"
	Lobby_BuyInABMatch_FullMethodName                        = "/lq.Lobby/buyInABMatch"
	Lobby_ReceiveABMatchReward_FullMethodName                = "/lq.Lobby/receiveABMatchReward"
	Lobby_QuitABMatch_FullMethodName                         = "/lq.Lobby/quitABMatch"
	Lobby_StartUnifiedMatch_FullMethodName                   = "/lq.Lobby/startUnifiedMatch"
	Lobby_CancelUnifiedMatch_FullMethodName                  = "/lq.Lobby/cancelUnifiedMatch"
	Lobby_FetchGamePointRank_FullMethodName                  = "/lq.Lobby/fetchGamePointRank"
	Lobby_FetchSelfGamePointRank_FullMethodName              = "/lq.Lobby/fetchSelfGamePointRank"
	Lobby_ReadSNS_FullMethodName                             = "/lq.Lobby/readSNS"
	Lobby_ReplySNS_FullMethodName                            = "/lq.Lobby/replySNS"
	Lobby_LikeSNS_FullMethodName                             = "/lq.Lobby/likeSNS"
	Lobby_DigMine_FullMethodName                             = "/lq.Lobby/digMine"
	Lobby_FetchLastPrivacy_FullMethodName                    = "/lq.Lobby/fetchLastPrivacy"
	Lobby_CheckPrivacy_FullMethodName                        = "/lq.Lobby/checkPrivacy"
	Lobby_ResponseCaptcha_FullMethodName                     = "/lq.Lobby/responseCaptcha"
	Lobby_FetchRPGBattleHistory_FullMethodName               = "/lq.Lobby/fetchRPGBattleHistory"
	Lobby_FetchRPGBattleHistoryV2_FullMethodName             = "/lq.Lobby/fetchRPGBattleHistoryV2"
	Lobby_ReceiveRPGRewards_FullMethodName                   = "/lq.Lobby/receiveRPGRewards"
	Lobby_ReceiveRPGReward_FullMethodName                    = "/lq.Lobby/receiveRPGReward"
	Lobby_BuyArenaTicket_FullMethodName                      = "/lq.Lobby/buyArenaTicket"
	Lobby_EnterArena_FullMethodName                          = "/lq.Lobby/enterArena"
	Lobby_ReceiveArenaReward_FullMethodName                  = "/lq.Lobby/receiveArenaReward"
	Lobby_FetchOBToken_FullMethodName                        = "/lq.Lobby/fetchOBToken"
	Lobby_ReceiveCharacterRewards_FullMethodName             = "/lq.Lobby/receiveCharacterRewards"
	Lobby_FeedActivityFeed_FullMethodName                    = "/lq.Lobby/feedActivityFeed"
	Lobby_SendActivityGiftToFriend_FullMethodName            = "/lq.Lobby/sendActivityGiftToFriend"
	Lobby_ReceiveActivityGift_FullMethodName                 = "/lq.Lobby/receiveActivityGift"
	Lobby_ReceiveAllActivityGift_FullMethodName              = "/lq.Lobby/receiveAllActivityGift"
	Lobby_FetchFriendGiftActivityData_FullMethodName         = "/lq.Lobby/fetchFriendGiftActivityData"
	Lobby_OpenPreChestItem_FullMethodName                    = "/lq.Lobby/openPreChestItem"
	Lobby_FetchVoteActivity_FullMethodName                   = "/lq.Lobby/fetchVoteActivity"
	Lobby_VoteActivity_FullMethodName                        = "/lq.Lobby/voteActivity"
	Lobby_UnlockActivitySpot_FullMethodName                  = "/lq.Lobby/unlockActivitySpot"
	Lobby_UnlockActivitySpotEnding_FullMethodName            = "/lq.Lobby/unlockActivitySpotEnding"
	Lobby_ReceiveActivitySpotReward_FullMethodName           = "/lq.Lobby/receiveActivitySpotReward"
	Lobby_DeleteAccount_FullMethodName                       = "/lq.Lobby/deleteAccount"
	Lobby_CancelDeleteAccount_FullMethodName                 = "/lq.Lobby/cancelDeleteAccount"
	Lobby_LogReport_FullMethodName                           = "/lq.Lobby/logReport"
	Lobby_BindOauth2_FullMethodName                          = "/lq.Lobby/bindOauth2"
	Lobby_FetchOauth2Info_FullMethodName                     = "/lq.Lobby/fetchOauth2Info"
	Lobby_SetLoadingImage_FullMethodName                     = "/lq.Lobby/setLoadingImage"
	Lobby_FetchShopInterval_FullMethodName                   = "/lq.Lobby/fetchShopInterval"
	Lobby_FetchActivityInterval_FullMethodName               = "/lq.Lobby/fetchActivityInterval"
	Lobby_FetchRecentFriend_FullMethodName                   = "/lq.Lobby/fetchRecentFriend"
	Lobby_OpenGacha_FullMethodName                           = "/lq.Lobby/openGacha"
	Lobby_TaskRequest_FullMethodName                         = "/lq.Lobby/taskRequest"
	Lobby_SimulationActivityTrain_FullMethodName             = "/lq.Lobby/simulationActivityTrain"
	Lobby_FetchSimulationGameRecord_FullMethodName           = "/lq.Lobby/fetchSimulationGameRecord"
	Lobby_StartSimulationActivityGame_FullMethodName         = "/lq.Lobby/startSimulationActivityGame"
	Lobby_FetchSimulationGameRank_FullMethodName             = "/lq.Lobby/fetchSimulationGameRank"
	Lobby_GenerateCombiningCraft_FullMethodName              = "/lq.Lobby/generateCombiningCraft"
	Lobby_MoveCombiningCraft_FullMethodName                  = "/lq.Lobby/moveCombiningCraft"
	Lobby_CombiningRecycleCraft_FullMethodName               = "/lq.Lobby/combiningRecycleCraft"
	Lobby_RecoverCombiningRecycle_FullMethodName             = "/lq.Lobby/recoverCombiningRecycle"
	Lobby_FinishCombiningOrder_FullMethodName                = "/lq.Lobby/finishCombiningOrder"
	Lobby_UpgradeVillageBuilding_FullMethodName              = "/lq.Lobby/upgradeVillageBuilding"
	Lobby_ReceiveVillageBuildingReward_FullMethodName        = "/lq.Lobby/receiveVillageBuildingReward"
	Lobby_StartVillageTrip_FullMethodName                    = "/lq.Lobby/startVillageTrip"
	Lobby_ReceiveVillageTripReward_FullMethodName            = "/lq.Lobby/receiveVillageTripReward"
	Lobby_CompleteVillageTask_FullMethodName                 = "/lq.Lobby/completeVillageTask"
	Lobby_GetFriendVillageData_FullMethodName                = "/lq.Lobby/getFriendVillageData"
	Lobby_SetVillageWorker_FullMethodName                    = "/lq.Lobby/setVillageWorker"
	Lobby_NextRoundVillage_FullMethodName                    = "/lq.Lobby/nextRoundVillage"
	Lobby_ResolveFestivalActivityProposal_FullMethodName     = "/lq.Lobby/resolveFestivalActivityProposal"
	Lobby_ResolveFestivalActivityEvent_FullMethodName        = "/lq.Lobby/resolveFestivalActivityEvent"
	Lobby_BuyFestivalProposal_FullMethodName                 = "/lq.Lobby/buyFestivalProposal"
	Lobby_IslandActivityMove_FullMethodName                  = "/lq.Lobby/islandActivityMove"
	Lobby_IslandActivityBuy_FullMethodName                   = "/lq.Lobby/islandActivityBuy"
	Lobby_IslandActivitySell_FullMethodName                  = "/lq.Lobby/islandActivitySell"
	Lobby_IslandActivityTidyBag_FullMethodName               = "/lq.Lobby/islandActivityTidyBag"
	Lobby_IslandActivityUnlockBagGrid_FullMethodName         = "/lq.Lobby/islandActivityUnlockBagGrid"
	Lobby_CreateCustomizedContest_FullMethodName             = "/lq.Lobby/createCustomizedContest"
	Lobby_FetchManagerCustomizedContestList_FullMethodName   = "/lq.Lobby/fetchManagerCustomizedContestList"
	Lobby_FetchManagerCustomizedContest_FullMethodName       = "/lq.Lobby/fetchManagerCustomizedContest"
	Lobby_UpdateManagerCustomizedContest_FullMethodName      = "/lq.Lobby/updateManagerCustomizedContest"
	Lobby_FetchContestPlayerRank_FullMethodName              = "/lq.Lobby/fetchContestPlayerRank"
	Lobby_FetchReadyPlayerList_FullMethodName                = "/lq.Lobby/fetchReadyPlayerList"
	Lobby_CreateGamePlan_FullMethodName                      = "/lq.Lobby/createGamePlan"
	Lobby_GenerateContestManagerLoginCode_FullMethodName     = "/lq.Lobby/generateContestManagerLoginCode"
	Lobby_AmuletActivityStartGame_FullMethodName             = "/lq.Lobby/amuletActivityStartGame"
	Lobby_AmuletActivityOperate_FullMethodName               = "/lq.Lobby/amuletActivityOperate"
	Lobby_AmuletActivityChangeHands_FullMethodName           = "/lq.Lobby/amuletActivityChangeHands"
	Lobby_AmuletActivityUpgrade_FullMethodName               = "/lq.Lobby/amuletActivityUpgrade"
	Lobby_AmuletActivityBuy_FullMethodName                   = "/lq.Lobby/amuletActivityBuy"
	Lobby_AmuletActivitySelectPack_FullMethodName            = "/lq.Lobby/amuletActivitySelectPack"
	Lobby_AmuletActivitySellEffect_FullMethodName            = "/lq.Lobby/amuletActivitySellEffect"
	Lobby_AmuletActivityEffectSort_FullMethodName            = "/lq.Lobby/amuletActivityEffectSort"
	Lobby_AmuletActivityGiveup_FullMethodName                = "/lq.Lobby/amuletActivityGiveup"
	Lobby_AmuletActivityRefreshShop_FullMethodName           = "/lq.Lobby/amuletActivityRefreshShop"
	Lobby_AmuletActivitySelectFreeEffect_FullMethodName      = "/lq.Lobby/amuletActivitySelectFreeEffect"
	Lobby_AmuletActivityUpgradeShopBuff_FullMethodName       = "/lq.Lobby/amuletActivityUpgradeShopBuff"
	Lobby_AmuletActivityEndShopping_FullMethodName           = "/lq.Lobby/amuletActivityEndShopping"
	Lobby_AmuletActivitySetSkillLevel_FullMethodName         = "/lq.Lobby/amuletActivitySetSkillLevel"
	Lobby_AmuletActivityMaintainInfo_FullMethodName          = "/lq.Lobby/amuletActivityMaintainInfo"
	Lobby_StoryActivityUnlock_FullMethodName                 = "/lq.Lobby/storyActivityUnlock"
	Lobby_StoryActivityUnlockEnding_FullMethodName           = "/lq.Lobby/storyActivityUnlockEnding"
	Lobby_StoryActivityReceiveEndingReward_FullMethodName    = "/lq.Lobby/storyActivityReceiveEndingReward"
	Lobby_StoryActivityReceiveFinishReward_FullMethodName    = "/lq.Lobby/storyActivityReceiveFinishReward"
	Lobby_StoryActivityReceiveAllFinishReward_FullMethodName = "/lq.Lobby/storyActivityReceiveAllFinishReward"
	Lobby_StoryActivityUnlockEndingAndReceive_FullMethodName = "/lq.Lobby/storyActivityUnlockEndingAndReceive"
	Lobby_FetchActivityRank_FullMethodName                   = "/lq.Lobby/fetchActivityRank"
	Lobby_SetVerifiedHidden_FullMethodName                   = "/lq.Lobby/setVerifiedHidden"
	Lobby_FetchQuestionnaireList_FullMethodName              = "/lq.Lobby/fetchQuestionnaireList"
	Lobby_FetchQuestionnaireDetail_FullMethodName            = "/lq.Lobby/fetchQuestionnaireDetail"
	Lobby_SubmitQuestionnaire_FullMethodName                 = "/lq.Lobby/submitQuestionnaire"
)

// LobbyClient is the client API for Lobby service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LobbyClient interface {
	FetchConnectionInfo(ctx context.Context, in *ReqCommon, opts ...grpc.CallOption) (*ResConnectionInfo, error)
	FetchQueueInfo(ctx context.Context, in *ReqCommon, opts ...grpc.CallOption) (*ResFetchQueueInfo, error)
	CancelQueue(ctx context.Context, in *ReqCommon, opts ...grpc.CallOption) (*ResCommon, error)
	OpenidCheck(ctx context.Context, in *ReqOpenidCheck, opts ...grpc.CallOption) (*ResOauth2Check, error)
	Signup(ctx context.Context, in *ReqSignupAccount, opts ...grpc.CallOption) (*ResSignupAccount, error)
	Login(ctx context.Context, in *ReqLogin, opts ...grpc.CallOption) (*ResLogin, error)
	FetchInfo(ctx context.Context, in *ReqCommon, opts ...grpc.CallOption) (*ResFetchInfo, error)
	LoginSuccess(ctx context.Context, in *ReqCommon, opts ...grpc.CallOption) (*ResCommon, error)
	FetchServerMaintenanceInfo(ctx context.Context, in *ReqCommon, opts ...grpc.CallOption) (*ResFetchServerMaintenanceInfo, error)
	EmailLogin(ctx context.Context, in *ReqEmailLogin, opts ...grpc.CallOption) (*ResLogin, error)
	Oauth2Auth(ctx context.Context, in *ReqOauth2Auth, opts ...grpc.CallOption) (*ResOauth2Auth, error)
	Oauth2Check(ctx context.Context, in *ReqOauth2Check, opts ...grpc.CallOption) (*ResOauth2Check, error)
	Oauth2Signup(ctx context.Context, in *ReqOauth2Signup, opts ...grpc.CallOption) (*ResOauth2Signup, error)
	Oauth2Login(ctx context.Context, in *ReqOauth2Login, opts ...grpc.CallOption) (*ResLogin, error)
	DmmPreLogin(ctx context.Context, in *ReqDMMPreLogin, opts ...grpc.CallOption) (*ResDMMPreLogin, error)
	CreatePhoneVerifyCode(ctx context.Context, in *ReqCreatePhoneVerifyCode, opts ...grpc.CallOption) (*ResCommon, error)
	CreateEmailVerifyCode(ctx context.Context, in *ReqCreateEmailVerifyCode, opts ...grpc.CallOption) (*ResCommon, error)
	VerfifyCodeForSecure(ctx context.Context, in *ReqVerifyCodeForSecure, opts ...grpc.CallOption) (*ResVerfiyCodeForSecure, error)
	BindPhoneNumber(ctx context.Context, in *ReqBindPhoneNumber, opts ...grpc.CallOption) (*ResCommon, error)
	UnbindPhoneNumber(ctx context.Context, in *ReqUnbindPhoneNumber, opts ...grpc.CallOption) (*ResCommon, error)
	FetchPhoneLoginBind(ctx context.Context, in *ReqCommon, opts ...grpc.CallOption) (*ResFetchPhoneLoginBind, error)
	CreatePhoneLoginBind(ctx context.Context, in *ReqCreatePhoneLoginBind, opts ...grpc.CallOption) (*ResCommon, error)
	BindEmail(ctx context.Context, in *ReqBindEmail, opts ...grpc.CallOption) (*ResCommon, error)
	ModifyPassword(ctx context.Context, in *ReqModifyPassword, opts ...grpc.CallOption) (*ResCommon, error)
	BindAccount(ctx context.Context, in *ReqBindAccount, opts ...grpc.CallOption) (*ResCommon, error)
	Logout(ctx context.Context, in *ReqLogout, opts ...grpc.CallOption) (*ResLogout, error)
	Heatbeat(ctx context.Context, in *ReqHeatBeat, opts ...grpc.CallOption) (*ResCommon, error)
	LoginBeat(ctx context.Context, in *ReqLoginBeat, opts ...grpc.CallOption) (*ResCommon, error)
	CreateNickname(ctx context.Context, in *ReqCreateNickname, opts ...grpc.CallOption) (*ResCommon, error)
	ModifyNickname(ctx context.Context, in *ReqModifyNickname, opts ...grpc.CallOption) (*ResCommon, error)
	ModifyBirthday(ctx context.Context, in *ReqModifyBirthday, opts ...grpc.CallOption) (*ResCommon, error)
	FetchRoom(ctx context.Context, in *ReqCommon, opts ...grpc.CallOption) (*ResSelfRoom, error)
	FetchGamingInfo(ctx context.Context, in *ReqCommon, opts ...grpc.CallOption) (*ResFetchGamingInfo, error)
	CreateRoom(ctx context.Context, in *ReqCreateRoom, opts ...grpc.CallOption) (*ResCreateRoom, error)
	JoinRoom(ctx context.Context, in *ReqJoinRoom, opts ...grpc.CallOption) (*ResJoinRoom, error)
	LeaveRoom(ctx context.Context, in *ReqCommon, opts ...grpc.CallOption) (*ResCommon, error)
	ReadyPlay(ctx context.Context, in *ReqRoomReady, opts ...grpc.CallOption) (*ResCommon, error)
	DressingStatus(ctx context.Context, in *ReqRoomDressing, opts ...grpc.CallOption) (*ResCommon, error)
	StartRoom(ctx context.Context, in *ReqRoomStart, opts ...grpc.CallOption) (*ResCommon, error)
	RoomKickPlayer(ctx context.Context, in *ReqRoomKickPlayer, opts ...grpc.CallOption) (*ResCommon, error)
	ModifyRoom(ctx context.Context, in *ReqModifyRoom, opts ...grpc.CallOption) (*ResCommon, error)
	AddRoomRobot(ctx context.Context, in *ReqAddRoomRobot, opts ...grpc.CallOption) (*ResCommon, error)
	MatchGame(ctx context.Context, in *ReqJoinMatchQueue, opts ...grpc.CallOption) (*ResCommon, error)
	CancelMatch(ctx context.Context, in *ReqCancelMatchQueue, opts ...grpc.CallOption) (*ResCommon, error)
	FetchAccountInfo(ctx context.Context, in *ReqAccountInfo, opts ...grpc.CallOption) (*ResAccountInfo, error)
	ChangeAvatar(ctx context.Context, in *ReqChangeAvatar, opts ...grpc.CallOption) (*ResCommon, error)
	ReceiveVersionReward(ctx context.Context, in *ReqCommon, opts ...grpc.CallOption) (*ResCommon, error)
	FetchAccountStatisticInfo(ctx context.Context, in *ReqAccountStatisticInfo, opts ...grpc.CallOption) (*ResAccountStatisticInfo, error)
	FetchAccountChallengeRankInfo(ctx context.Context, in *ReqAccountInfo, opts ...grpc.CallOption) (*ResAccountChallengeRankInfo, error)
	FetchAccountCharacterInfo(ctx context.Context, in *ReqCommon, opts ...grpc.CallOption) (*ResAccountCharacterInfo, error)
	ShopPurchase(ctx context.Context, in *ReqShopPurchase, opts ...grpc.CallOption) (*ResShopPurchase, error)
	FetchGameRecord(ctx context.Context, in *ReqGameRecord, opts ...grpc.CallOption) (*ResGameRecord, error)
	ReadGameRecord(ctx context.Context, in *ReqGameRecord, opts ...grpc.CallOption) (*ResCommon, error)
	FetchGameRecordList(ctx context.Context, in *ReqGameRecordList, opts ...grpc.CallOption) (*ResGameRecordList, error)
	FetchGameRecordListV2(ctx context.Context, in *ReqGameRecordListV2, opts ...grpc.CallOption) (*ResGameRecordListV2, error)
	FetchNextGameRecordList(ctx context.Context, in *ReqNextGameRecordList, opts ...grpc.CallOption) (*ResNextGameRecordList, error)
	FetchCollectedGameRecordList(ctx context.Context, in *ReqCommon, opts ...grpc.CallOption) (*ResCollectedGameRecordList, error)
	FetchGameRecordsDetail(ctx context.Context, in *ReqGameRecordsDetail, opts ...grpc.CallOption) (*ResGameRecordsDetail, error)
	FetchGameRecordsDetailV2(ctx context.Context, in *ReqGameRecordsDetailV2, opts ...grpc.CallOption) (*ResGameRecordsDetailV2, error)
	AddCollectedGameRecord(ctx context.Context, in *ReqAddCollectedGameRecord, opts ...grpc.CallOption) (*ResAddCollectedGameRecord, error)
	RemoveCollectedGameRecord(ctx context.Context, in *ReqRemoveCollectedGameRecord, opts ...grpc.CallOption) (*ResRemoveCollectedGameRecord, error)
	ChangeCollectedGameRecordRemarks(ctx context.Context, in *ReqChangeCollectedGameRecordRemarks, opts ...grpc.CallOption) (*ResChangeCollectedGameRecordRemarks, error)
	FetchLevelLeaderboard(ctx context.Context, in *ReqLevelLeaderboard, opts ...grpc.CallOption) (*ResLevelLeaderboard, error)
	FetchChallengeLeaderboard(ctx context.Context, in *ReqChallangeLeaderboard, opts ...grpc.CallOption) (*ResChallengeLeaderboard, error)
	FetchMutiChallengeLevel(ctx context.Context, in *ReqMutiChallengeLevel, opts ...grpc.CallOption) (*ResMutiChallengeLevel, error)
	FetchMultiAccountBrief(ctx context.Context, in *ReqMultiAccountId, opts ...grpc.CallOption) (*ResMultiAccountBrief, error)
	FetchFriendList(ctx context.Context, in *ReqCommon, opts ...grpc.CallOption) (*ResFriendList, error)
	FetchFriendApplyList(ctx context.Context, in *ReqCommon, opts ...grpc.CallOption) (*ResFriendApplyList, error)
	ApplyFriend(ctx context.Context, in *ReqApplyFriend, opts ...grpc.CallOption) (*ResCommon, error)
	HandleFriendApply(ctx context.Context, in *ReqHandleFriendApply, opts ...grpc.CallOption) (*ResCommon, error)
	RemoveFriend(ctx context.Context, in *ReqRemoveFriend, opts ...grpc.CallOption) (*ResCommon, error)
	SearchAccountById(ctx context.Context, in *ReqSearchAccountById, opts ...grpc.CallOption) (*ResSearchAccountById, error)
	SearchAccountByPattern(ctx context.Context, in *ReqSearchAccountByPattern, opts ...grpc.CallOption) (*ResSearchAccountByPattern, error)
	FetchAccountState(ctx context.Context, in *ReqAccountList, opts ...grpc.CallOption) (*ResAccountStates, error)
	FetchBagInfo(ctx context.Context, in *ReqCommon, opts ...grpc.CallOption) (*ResBagInfo, error)
	UseBagItem(ctx context.Context, in *ReqUseBagItem, opts ...grpc.CallOption) (*ResCommon, error)
	OpenManualItem(ctx context.Context, in *ReqOpenManualItem, opts ...grpc.CallOption) (*ResCommon, error)
	OpenRandomRewardItem(ctx context.Context, in *ReqOpenRandomRewardItem, opts ...grpc.CallOption) (*ResOpenRandomRewardItem, error)
	OpenAllRewardItem(ctx context.Context, in *ReqOpenAllRewardItem, opts ...grpc.CallOption) (*ResOpenAllRewardItem, error)
	ComposeShard(ctx context.Context, in *ReqComposeShard, opts ...grpc.CallOption) (*ResCommon, error)
	FetchAnnouncement(ctx context.Context, in *ReqFetchAnnouncement, opts ...grpc.CallOption) (*ResAnnouncement, error)
	ReadAnnouncement(ctx context.Context, in *ReqReadAnnouncement, opts ...grpc.CallOption) (*ResCommon, error)
	FetchMailInfo(ctx context.Context, in *ReqCommon, opts ...grpc.CallOption) (*ResMailInfo, error)
	ReadMail(ctx context.Context, in *ReqReadMail, opts ...grpc.CallOption) (*ResCommon, error)
	DeleteMail(ctx context.Context, in *ReqDeleteMail, opts ...grpc.CallOption) (*ResCommon, error)
	TakeAttachmentFromMail(ctx context.Context, in *ReqTakeAttachment, opts ...grpc.CallOption) (*ResCommon, error)
	ReceiveAchievementReward(ctx context.Context, in *ReqReceiveAchievementReward, opts ...grpc.CallOption) (*ResReceiveAchievementReward, error)
	ReceiveAchievementGroupReward(ctx context.Context, in *ReqReceiveAchievementGroupReward, opts ...grpc.CallOption) (*ResReceiveAchievementGroupReward, error)
	FetchAchievementRate(ctx context.Context, in *ReqCommon, opts ...grpc.CallOption) (*ResFetchAchievementRate, error)
	FetchAchievement(ctx context.Context, in *ReqCommon, opts ...grpc.CallOption) (*ResAchievement, error)
	BuyShiLian(ctx context.Context, in *ReqBuyShiLian, opts ...grpc.CallOption) (*ResCommon, error)
	MatchShiLian(ctx context.Context, in *ReqCommon, opts ...grpc.CallOption) (*ResCommon, error)
	GoNextShiLian(ctx context.Context, in *ReqCommon, opts ...grpc.CallOption) (*ResCommon, error)
	UpdateClientValue(ctx context.Context, in *ReqUpdateClientValue, opts ...grpc.CallOption) (*ResCommon, error)
	FetchClientValue(ctx context.Context, in *ReqCommon, opts ...grpc.CallOption) (*ResClientValue, error)
	ClientMessage(ctx context.Context, in *ReqClientMessage, opts ...grpc.CallOption) (*ResCommon, error)
	FetchCurrentMatchInfo(ctx context.Context, in *ReqCurrentMatchInfo, opts ...grpc.CallOption) (*ResCurrentMatchInfo, error)
	UserComplain(ctx context.Context, in *ReqUserComplain, opts ...grpc.CallOption) (*ResCommon, error)
	FetchReviveCoinInfo(ctx context.Context, in *ReqCommon, opts ...grpc.CallOption) (*ResReviveCoinInfo, error)
	GainReviveCoin(ctx context.Context, in *ReqCommon, opts ...grpc.CallOption) (*ResCommon, error)
	FetchDailyTask(ctx context.Context, in *ReqCommon, opts ...grpc.CallOption) (*ResDailyTask, error)
	RefreshDailyTask(ctx context.Context, in *ReqRefreshDailyTask, opts ...grpc.CallOption) (*ResRefreshDailyTask, error)
	UseGiftCode(ctx context.Context, in *ReqUseGiftCode, opts ...grpc.CallOption) (*ResUseGiftCode, error)
	UseSpecialGiftCode(ctx context.Context, in *ReqUseGiftCode, opts ...grpc.CallOption) (*ResUseSpecialGiftCode, error)
	FetchTitleList(ctx context.Context, in *ReqCommon, opts ...grpc.CallOption) (*ResTitleList, error)
	UseTitle(ctx context.Context, in *ReqUseTitle, opts ...grpc.CallOption) (*ResCommon, error)
	SendClientMessage(ctx context.Context, in *ReqSendClientMessage, opts ...grpc.CallOption) (*ResCommon, error)
	FetchGameLiveInfo(ctx context.Context, in *ReqGameLiveInfo, opts ...grpc.CallOption) (*ResGameLiveInfo, error)
	FetchGameLiveLeftSegment(ctx context.Context, in *ReqGameLiveLeftSegment, opts ...grpc.CallOption) (*ResGameLiveLeftSegment, error)
	FetchGameLiveList(ctx context.Context, in *ReqGameLiveList, opts ...grpc.CallOption) (*ResGameLiveList, error)
	FetchCommentSetting(ctx context.Context, in *ReqCommon, opts ...grpc.CallOption) (*ResCommentSetting, error)
	UpdateCommentSetting(ctx context.Context, in *ReqUpdateCommentSetting, opts ...grpc.CallOption) (*ResCommon, error)
	FetchCommentList(ctx context.Context, in *ReqFetchCommentList, opts ...grpc.CallOption) (*ResFetchCommentList, error)
	FetchCommentContent(ctx context.Context, in *ReqFetchCommentContent, opts ...grpc.CallOption) (*ResFetchCommentContent, error)
	LeaveComment(ctx context.Context, in *ReqLeaveComment, opts ...grpc.CallOption) (*ResCommon, error)
	DeleteComment(ctx context.Context, in *ReqDeleteComment, opts ...grpc.CallOption) (*ResCommon, error)
	UpdateReadComment(ctx context.Context, in *ReqUpdateReadComment, opts ...grpc.CallOption) (*ResCommon, error)
	FetchRollingNotice(ctx context.Context, in *ReqFetchRollingNotice, opts ...grpc.CallOption) (*ResFetchRollingNotice, error)
	FetchMaintainNotice(ctx context.Context, in *ReqCommon, opts ...grpc.CallOption) (*ResFetchMaintainNotice, error)
	FetchServerTime(ctx context.Context, in *ReqCommon, opts ...grpc.CallOption) (*ResServerTime, error)
	FetchPlatformProducts(ctx context.Context, in *ReqPlatformBillingProducts, opts ...grpc.CallOption) (*ResPlatformBillingProducts, error)
	FetchRandomCharacter(ctx context.Context, in *ReqCommon, opts ...grpc.CallOption) (*ResRandomCharacter, error)
	SetRandomCharacter(ctx context.Context, in *ReqRandomCharacter, opts ...grpc.CallOption) (*ResCommon, error)
	CancelGooglePlayOrder(ctx context.Context, in *ReqCancelGooglePlayOrder, opts ...grpc.CallOption) (*ResCommon, error)
	OpenChest(ctx context.Context, in *ReqOpenChest, opts ...grpc.CallOption) (*ResOpenChest, error)
	BuyFromChestShop(ctx context.Context, in *ReqBuyFromChestShop, opts ...grpc.CallOption) (*ResBuyFromChestShop, error)
	FetchDailySignInInfo(ctx context.Context, in *ReqCommon, opts ...grpc.CallOption) (*ResDailySignInInfo, error)
	DoDailySignIn(ctx context.Context, in *ReqCommon, opts ...grpc.CallOption) (*ResCommon, error)
	DoActivitySignIn(ctx context.Context, in *ReqDoActivitySignIn, opts ...grpc.CallOption) (*ResDoActivitySignIn, error)
	FetchCharacterInfo(ctx context.Context, in *ReqCommon, opts ...grpc.CallOption) (*ResCharacterInfo, error)
	UpdateCharacterSort(ctx context.Context, in *ReqUpdateCharacterSort, opts ...grpc.CallOption) (*ResCommon, error)
	ChangeMainCharacter(ctx context.Context, in *ReqChangeMainCharacter, opts ...grpc.CallOption) (*ResCommon, error)
	ChangeCharacterSkin(ctx context.Context, in *ReqChangeCharacterSkin, opts ...grpc.CallOption) (*ResCommon, error)
	ChangeCharacterView(ctx context.Context, in *ReqChangeCharacterView, opts ...grpc.CallOption) (*ResCommon, error)
	SetHiddenCharacter(ctx context.Context, in *ReqSetHiddenCharacter, opts ...grpc.CallOption) (*ResSetHiddenCharacter, error)
	SendGiftToCharacter(ctx context.Context, in *ReqSendGiftToCharacter, opts ...grpc.CallOption) (*ResSendGiftToCharacter, error)
	SellItem(ctx context.Context, in *ReqSellItem, opts ...grpc.CallOption) (*ResCommon, error)
	FetchCommonView(ctx context.Context, in *ReqCommon, opts ...grpc.CallOption) (*ResCommonView, error)
	ChangeCommonView(ctx context.Context, in *ReqChangeCommonView, opts ...grpc.CallOption) (*ResCommon, error)
	SaveCommonViews(ctx context.Context, in *ReqSaveCommonViews, opts ...grpc.CallOption) (*ResCommon, error)
	FetchCommonViews(ctx context.Context, in *ReqCommonViews, opts ...grpc.CallOption) (*ResCommonViews, error)
	FetchAllCommonViews(ctx context.Context, in *ReqCommon, opts ...grpc.CallOption) (*ResAllcommonViews, error)
	UseCommonView(ctx context.Context, in *ReqUseCommonView, opts ...grpc.CallOption) (*ResCommon, error)
	UpgradeCharacter(ctx context.Context, in *ReqUpgradeCharacter, opts ...grpc.CallOption) (*ResUpgradeCharacter, error)
	AddFinishedEnding(ctx context.Context, in *ReqFinishedEnding, opts ...grpc.CallOption) (*ResCommon, error)
	ReceiveEndingReward(ctx context.Context, in *ReqFinishedEnding, opts ...grpc.CallOption) (*ResCommon, error)
	GameMasterCommand(ctx context.Context, in *ReqGMCommand, opts ...grpc.CallOption) (*ResCommon, error)
	FetchShopInfo(ctx context.Context, in *ReqCommon, opts ...grpc.CallOption) (*ResShopInfo, error)
	BuyFromShop(ctx context.Context, in *ReqBuyFromShop, opts ...grpc.CallOption) (*ResBuyFromShop, error)
	BuyFromZHP(ctx context.Context, in *ReqBuyFromZHP, opts ...grpc.CallOption) (*ResCommon, error)
	RefreshZHPShop(ctx context.Context, in *ReqReshZHPShop, opts ...grpc.CallOption) (*ResRefreshZHPShop, error)
	FetchMonthTicketInfo(ctx context.Context, in *ReqCommon, opts ...grpc.CallOption) (*ResMonthTicketInfo, error)
	PayMonthTicket(ctx context.Context, in *ReqCommon, opts ...grpc.CallOption) (*ResPayMonthTicket, error)
	ExchangeCurrency(ctx context.Context, in *ReqExchangeCurrency, opts ...grpc.CallOption) (*ResCommon, error)
	ExchangeChestStone(ctx context.Context, in *ReqExchangeCurrency, opts ...grpc.CallOption) (*ResCommon, error)
	ExchangeDiamond(ctx context.Context, in *ReqExchangeCurrency, opts ...grpc.CallOption) (*ResCommon, error)
	FetchServerSettings(ctx context.Context, in *ReqCommon, opts ...grpc.CallOption) (*ResServerSettings, error)
	FetchAccountSettings(ctx context.Context, in *ReqCommon, opts ...grpc.CallOption) (*ResAccountSettings, error)
	UpdateAccountSettings(ctx context.Context, in *ReqUpdateAccountSettings, opts ...grpc.CallOption) (*ResCommon, error)
	FetchModNicknameTime(ctx context.Context, in *ReqCommon, opts ...grpc.CallOption) (*ResModNicknameTime, error)
	CreateWechatNativeOrder(ctx context.Context, in *ReqCreateWechatNativeOrder, opts ...grpc.CallOption) (*ResCreateWechatNativeOrder, error)
	CreateWechatAppOrder(ctx context.Context, in *ReqCreateWechatAppOrder, opts ...grpc.CallOption) (*ResCreateWechatAppOrder, error)
	CreateAlipayOrder(ctx context.Context, in *ReqCreateAlipayOrder, opts ...grpc.CallOption) (*ResCreateAlipayOrder, error)
	CreateAlipayScanOrder(ctx context.Context, in *ReqCreateAlipayScanOrder, opts ...grpc.CallOption) (*ResCreateAlipayScanOrder, error)
	CreateAlipayAppOrder(ctx context.Context, in *ReqCreateAlipayAppOrder, opts ...grpc.CallOption) (*ResCreateAlipayAppOrder, error)
	CreateJPCreditCardOrder(ctx context.Context, in *ReqCreateJPCreditCardOrder, opts ...grpc.CallOption) (*ResCreateJPCreditCardOrder, error)
	CreateJPPaypalOrder(ctx context.Context, in *ReqCreateJPPaypalOrder, opts ...grpc.CallOption) (*ResCreateJPPaypalOrder, error)
	CreateJPAuOrder(ctx context.Context, in *ReqCreateJPAuOrder, opts ...grpc.CallOption) (*ResCreateJPAuOrder, error)
	CreateJPDocomoOrder(ctx context.Context, in *ReqCreateJPDocomoOrder, opts ...grpc.CallOption) (*ResCreateJPDocomoOrder, error)
	CreateJPWebMoneyOrder(ctx context.Context, in *ReqCreateJPWebMoneyOrder, opts ...grpc.CallOption) (*ResCreateJPWebMoneyOrder, error)
	CreateJPSoftbankOrder(ctx context.Context, in *ReqCreateJPSoftbankOrder, opts ...grpc.CallOption) (*ResCreateJPSoftbankOrder, error)
	CreateJPPayPayOrder(ctx context.Context, in *ReqCreateJPPayPayOrder, opts ...grpc.CallOption) (*ResCreateJPPayPayOrder, error)
	FetchJPCommonCreditCardOrder(ctx context.Context, in *ReqFetchJPCommonCreditCardOrder, opts ...grpc.CallOption) (*ResFetchJPCommonCreditCardOrder, error)
	CreateJPGMOOrder(ctx context.Context, in *ReqCreateJPGMOOrder, opts ...grpc.CallOption) (*ResCreateJPGMOOrder, error)
	CreateENPaypalOrder(ctx context.Context, in *ReqCreateENPaypalOrder, opts ...grpc.CallOption) (*ResCreateENPaypalOrder, error)
	CreateENMasterCardOrder(ctx context.Context, in *ReqCreateENMasterCardOrder, opts ...grpc.CallOption) (*ResCreateENMasterCardOrder, error)
	CreateENVisaOrder(ctx context.Context, in *ReqCreateENVisaOrder, opts ...grpc.CallOption) (*ResCreateENVisaOrder, error)
	CreateENJCBOrder(ctx context.Context, in *ReqCreateENJCBOrder, opts ...grpc.CallOption) (*ResCreateENJCBOrder, error)
	CreateENAlipayOrder(ctx context.Context, in *ReqCreateENAlipayOrder, opts ...grpc.CallOption) (*ResCreateENAlipayOrder, error)
	CreateKRPaypalOrder(ctx context.Context, in *ReqCreateKRPaypalOrder, opts ...grpc.CallOption) (*ResCreateKRPaypalOrder, error)
	CreateKRMasterCardOrder(ctx context.Context, in *ReqCreateKRMasterCardOrder, opts ...grpc.CallOption) (*ResCreateKRMasterCardOrder, error)
	CreateKRVisaOrder(ctx context.Context, in *ReqCreateKRVisaOrder, opts ...grpc.CallOption) (*ResCreateKRVisaOrder, error)
	CreateKRJCBOrder(ctx context.Context, in *ReqCreateKRJCBOrder, opts ...grpc.CallOption) (*ResCreateKRJCBOrder, error)
	CreateKRAlipayOrder(ctx context.Context, in *ReqCreateKRAlipayOrder, opts ...grpc.CallOption) (*ResCreateKRAlipayOrder, error)
	CreateDMMOrder(ctx context.Context, in *ReqCreateDMMOrder, opts ...grpc.CallOption) (*ResCreateDmmOrder, error)
	CreateIAPOrder(ctx context.Context, in *ReqCreateIAPOrder, opts ...grpc.CallOption) (*ResCreateIAPOrder, error)
	CreateSteamOrder(ctx context.Context, in *ReqCreateSteamOrder, opts ...grpc.CallOption) (*ResCreateSteamOrder, error)
	VerifySteamOrder(ctx context.Context, in *ReqVerifySteamOrder, opts ...grpc.CallOption) (*ResCommon, error)
	CreateMyCardAndroidOrder(ctx context.Context, in *ReqCreateMyCardOrder, opts ...grpc.CallOption) (*ResCreateMyCardOrder, error)
	CreateMyCardWebOrder(ctx context.Context, in *ReqCreateMyCardOrder, opts ...grpc.CallOption) (*ResCreateMyCardOrder, error)
	CreatePaypalOrder(ctx context.Context, in *ReqCreatePaypalOrder, opts ...grpc.CallOption) (*ResCreatePaypalOrder, error)
	CreateXsollaOrder(ctx context.Context, in *ReqCreateXsollaOrder, opts ...grpc.CallOption) (*ResCreateXsollaOrder, error)
	VerifyMyCardOrder(ctx context.Context, in *ReqVerifyMyCardOrder, opts ...grpc.CallOption) (*ResCommon, error)
	VerificationIAPOrder(ctx context.Context, in *ReqVerificationIAPOrder, opts ...grpc.CallOption) (*ResVerificationIAPOrder, error)
	CreateYostarSDKOrder(ctx context.Context, in *ReqCreateYostarOrder, opts ...grpc.CallOption) (*ResCreateYostarOrder, error)
	CreateBillingOrder(ctx context.Context, in *ReqCreateBillingOrder, opts ...grpc.CallOption) (*ResCreateBillingOrder, error)
	SolveGooglePlayOrder(ctx context.Context, in *ReqSolveGooglePlayOrder, opts ...grpc.CallOption) (*ResCommon, error)
	SolveGooglePayOrderV3(ctx context.Context, in *ReqSolveGooglePlayOrderV3, opts ...grpc.CallOption) (*ResCommon, error)
	DeliverAA32Order(ctx context.Context, in *ReqDeliverAA32Order, opts ...grpc.CallOption) (*ResCommon, error)
	FetchMisc(ctx context.Context, in *ReqCommon, opts ...grpc.CallOption) (*ResMisc, error)
	ModifySignature(ctx context.Context, in *ReqModifySignature, opts ...grpc.CallOption) (*ResCommon, error)
	FetchIDCardInfo(ctx context.Context, in *ReqCommon, opts ...grpc.CallOption) (*ResIDCardInfo, error)
	UpdateIDCardInfo(ctx context.Context, in *ReqUpdateIDCardInfo, opts ...grpc.CallOption) (*ResCommon, error)
	FetchVipReward(ctx context.Context, in *ReqCommon, opts ...grpc.CallOption) (*ResVipReward, error)
	GainVipReward(ctx context.Context, in *ReqGainVipReward, opts ...grpc.CallOption) (*ResCommon, error)
	FetchRefundOrder(ctx context.Context, in *ReqCommon, opts ...grpc.CallOption) (*ResFetchRefundOrder, error)
	FetchCustomizedContestList(ctx context.Context, in *ReqFetchCustomizedContestList, opts ...grpc.CallOption) (*ResFetchCustomizedContestList, error)
	FetchCustomizedContestAuthInfo(ctx context.Context, in *ReqFetchCustomizedContestAuthInfo, opts ...grpc.CallOption) (*ResFetchCustomizedContestAuthInfo, error)
	EnterCustomizedContest(ctx context.Context, in *ReqEnterCustomizedContest, opts ...grpc.CallOption) (*ResEnterCustomizedContest, error)
	LeaveCustomizedContest(ctx context.Context, in *ReqCommon, opts ...grpc.CallOption) (*ResCommon, error)
	FetchCustomizedContestOnlineInfo(ctx context.Context, in *ReqFetchCustomizedContestOnlineInfo, opts ...grpc.CallOption) (*ResFetchCustomizedContestOnlineInfo, error)
	FetchCustomizedContestByContestId(ctx context.Context, in *ReqFetchCustomizedContestByContestId, opts ...grpc.CallOption) (*ResFetchCustomizedContestByContestId, error)
	SignupCustomizedContest(ctx context.Context, in *ReqSignupCustomizedContest, opts ...grpc.CallOption) (*ResSignupCustomizedContest, error)
	StartCustomizedContest(ctx context.Context, in *ReqStartCustomizedContest, opts ...grpc.CallOption) (*ResCommon, error)
	StopCustomizedContest(ctx context.Context, in *ReqStopCustomizedContest, opts ...grpc.CallOption) (*ResCommon, error)
	JoinCustomizedContestChatRoom(ctx context.Context, in *ReqJoinCustomizedContestChatRoom, opts ...grpc.CallOption) (*ResJoinCustomizedContestChatRoom, error)
	LeaveCustomizedContestChatRoom(ctx context.Context, in *ReqCommon, opts ...grpc.CallOption) (*ResCommon, error)
	SayChatMessage(ctx context.Context, in *ReqSayChatMessage, opts ...grpc.CallOption) (*ResCommon, error)
	FetchCustomizedContestGameRecords(ctx context.Context, in *ReqFetchCustomizedContestGameRecords, opts ...grpc.CallOption) (*ResFetchCustomizedContestGameRecords, error)
	FetchCustomizedContestGameLiveList(ctx context.Context, in *ReqFetchCustomizedContestGameLiveList, opts ...grpc.CallOption) (*ResFetchCustomizedContestGameLiveList, error)
	FollowCustomizedContest(ctx context.Context, in *ReqTargetCustomizedContest, opts ...grpc.CallOption) (*ResCommon, error)
	UnfollowCustomizedContest(ctx context.Context, in *ReqTargetCustomizedContest, opts ...grpc.CallOption) (*ResCommon, error)
	FetchActivityList(ctx context.Context, in *ReqCommon, opts ...grpc.CallOption) (*ResActivityList, error)
	FetchAccountActivityData(ctx context.Context, in *ReqCommon, opts ...grpc.CallOption) (*ResAccountActivityData, error)
	ExchangeActivityItem(ctx context.Context, in *ReqExchangeActivityItem, opts ...grpc.CallOption) (*ResExchangeActivityItem, error)
	CompleteActivityTask(ctx context.Context, in *ReqCompleteActivityTask, opts ...grpc.CallOption) (*ResCommon, error)
	CompleteActivityTaskBatch(ctx context.Context, in *ReqCompleteActivityTaskBatch, opts ...grpc.CallOption) (*ResCommon, error)
	CompleteActivityFlipTask(ctx context.Context, in *ReqCompleteActivityTask, opts ...grpc.CallOption) (*ResCommon, error)
	CompletePeriodActivityTask(ctx context.Context, in *ReqCompleteActivityTask, opts ...grpc.CallOption) (*ResCommon, error)
	CompletePeriodActivityTaskBatch(ctx context.Context, in *ReqCompletePeriodActivityTaskBatch, opts ...grpc.CallOption) (*ResCommon, error)
	CompleteRandomActivityTask(ctx context.Context, in *ReqCompleteActivityTask, opts ...grpc.CallOption) (*ResCommon, error)
	ReceiveActivityFlipTask(ctx context.Context, in *ReqReceiveActivityFlipTask, opts ...grpc.CallOption) (*ResReceiveActivityFlipTask, error)
	CompleteSegmentTaskReward(ctx context.Context, in *ReqCompleteSegmentTaskReward, opts ...grpc.CallOption) (*ResCompleteSegmentTaskReward, error)
	FetchActivityFlipInfo(ctx context.Context, in *ReqFetchActivityFlipInfo, opts ...grpc.CallOption) (*ResFetchActivityFlipInfo, error)
	GainAccumulatedPointActivityReward(ctx context.Context, in *ReqGainAccumulatedPointActivityReward, opts ...grpc.CallOption) (*ResCommon, error)
	GainMultiPointActivityReward(ctx context.Context, in *ReqGainMultiPointActivityReward, opts ...grpc.CallOption) (*ResCommon, error)
	FetchRankPointLeaderboard(ctx context.Context, in *ReqFetchRankPointLeaderboard, opts ...grpc.CallOption) (*ResFetchRankPointLeaderboard, error)
	GainRankPointReward(ctx context.Context, in *ReqGainRankPointReward, opts ...grpc.CallOption) (*ResCommon, error)
	RichmanActivityNextMove(ctx context.Context, in *ReqRichmanNextMove, opts ...grpc.CallOption) (*ResRichmanNextMove, error)
	RichmanAcitivitySpecialMove(ctx context.Context, in *ReqRichmanSpecialMove, opts ...grpc.CallOption) (*ResRichmanNextMove, error)
	RichmanActivityChestInfo(ctx context.Context, in *ReqRichmanChestInfo, opts ...grpc.CallOption) (*ResRichmanChestInfo, error)
	CreateGameObserveAuth(ctx context.Context, in *ReqCreateGameObserveAuth, opts ...grpc.CallOption) (*ResCreateGameObserveAuth, error)
	RefreshGameObserveAuth(ctx context.Context, in *ReqRefreshGameObserveAuth, opts ...grpc.CallOption) (*ResRefreshGameObserveAuth, error)
	FetchActivityBuff(ctx context.Context, in *ReqCommon, opts ...grpc.CallOption) (*ResActivityBuff, error)
	UpgradeActivityBuff(ctx context.Context, in *ReqUpgradeActivityBuff, opts ...grpc.CallOption) (*ResActivityBuff, error)
	UpgradeActivityLevel(ctx context.Context, in *ReqUpgradeActivityLevel, opts ...grpc.CallOption) (*ResUpgradeActivityLevel, error)
	ReceiveUpgradeActivityReward(ctx context.Context, in *ReqReceiveUpgradeActivityReward, opts ...grpc.CallOption) (*ResReceiveUpgradeActivityReward, error)
	UpgradeChallenge(ctx context.Context, in *ReqCommon, opts ...grpc.CallOption) (*ResUpgradeChallenge, error)
	RefreshChallenge(ctx context.Context, in *ReqCommon, opts ...grpc.CallOption) (*ResRefreshChallenge, error)
	FetchChallengeInfo(ctx context.Context, in *ReqCommon, opts ...grpc.CallOption) (*ResFetchChallengeInfo, error)
	ForceCompleteChallengeTask(ctx context.Context, in *ReqForceCompleteChallengeTask, opts ...grpc.CallOption) (*ResCommon, error)
	FetchChallengeSeason(ctx context.Context, in *ReqCommon, opts ...grpc.CallOption) (*ResChallengeSeasonInfo, error)
	ReceiveChallengeRankReward(ctx context.Context, in *ReqReceiveChallengeRankReward, opts ...grpc.CallOption) (*ResReceiveChallengeRankReward, error)
	FetchABMatchInfo(ctx context.Context, in *ReqCommon, opts ...grpc.CallOption) (*ResFetchABMatch, error)
	BuyInABMatch(ctx context.Context, in *ReqBuyInABMatch, opts ...grpc.CallOption) (*ResCommon, error)
	ReceiveABMatchReward(ctx context.Context, in *ReqCommon, opts ...grpc.CallOption) (*ResCommon, error)
	QuitABMatch(ctx context.Context, in *ReqCommon, opts ...grpc.CallOption) (*ResCommon, error)
	StartUnifiedMatch(ctx context.Context, in *ReqStartUnifiedMatch, opts ...grpc.CallOption) (*ResCommon, error)
	CancelUnifiedMatch(ctx context.Context, in *ReqCancelUnifiedMatch, opts ...grpc.CallOption) (*ResCommon, error)
	FetchGamePointRank(ctx context.Context, in *ReqGamePointRank, opts ...grpc.CallOption) (*ResGamePointRank, error)
	FetchSelfGamePointRank(ctx context.Context, in *ReqGamePointRank, opts ...grpc.CallOption) (*ResFetchSelfGamePointRank, error)
	ReadSNS(ctx context.Context, in *ReqReadSNS, opts ...grpc.CallOption) (*ResReadSNS, error)
	ReplySNS(ctx context.Context, in *ReqReplySNS, opts ...grpc.CallOption) (*ResReplySNS, error)
	LikeSNS(ctx context.Context, in *ReqLikeSNS, opts ...grpc.CallOption) (*ResLikeSNS, error)
	DigMine(ctx context.Context, in *ReqDigMine, opts ...grpc.CallOption) (*ResDigMine, error)
	FetchLastPrivacy(ctx context.Context, in *ReqFetchLastPrivacy, opts ...grpc.CallOption) (*ResFetchLastPrivacy, error)
	CheckPrivacy(ctx context.Context, in *ReqCheckPrivacy, opts ...grpc.CallOption) (*ResCommon, error)
	ResponseCaptcha(ctx context.Context, in *ReqResponseCaptcha, opts ...grpc.CallOption) (*ResCommon, error)
	FetchRPGBattleHistory(ctx context.Context, in *ReqFetchRPGBattleHistory, opts ...grpc.CallOption) (*ResFetchRPGBattleHistory, error)
	FetchRPGBattleHistoryV2(ctx context.Context, in *ReqFetchRPGBattleHistory, opts ...grpc.CallOption) (*ResFetchRPGBattleHistoryV2, error)
	ReceiveRPGRewards(ctx context.Context, in *ReqReceiveRPGRewards, opts ...grpc.CallOption) (*ResReceiveRPGRewards, error)
	ReceiveRPGReward(ctx context.Context, in *ReqReceiveRPGReward, opts ...grpc.CallOption) (*ResReceiveRPGRewards, error)
	BuyArenaTicket(ctx context.Context, in *ReqBuyArenaTicket, opts ...grpc.CallOption) (*ResCommon, error)
	EnterArena(ctx context.Context, in *ReqEnterArena, opts ...grpc.CallOption) (*ResCommon, error)
	ReceiveArenaReward(ctx context.Context, in *ReqArenaReward, opts ...grpc.CallOption) (*ResArenaReward, error)
	FetchOBToken(ctx context.Context, in *ReqFetchOBToken, opts ...grpc.CallOption) (*ResFetchOBToken, error)
	ReceiveCharacterRewards(ctx context.Context, in *ReqReceiveCharacterRewards, opts ...grpc.CallOption) (*ResReceiveCharacterRewards, error)
	FeedActivityFeed(ctx context.Context, in *ReqFeedActivityFeed, opts ...grpc.CallOption) (*ResFeedActivityFeed, error)
	SendActivityGiftToFriend(ctx context.Context, in *ReqSendActivityGiftToFriend, opts ...grpc.CallOption) (*ResSendActivityGiftToFriend, error)
	ReceiveActivityGift(ctx context.Context, in *ReqReceiveActivityGift, opts ...grpc.CallOption) (*ResCommon, error)
	ReceiveAllActivityGift(ctx context.Context, in *ReqReceiveAllActivityGift, opts ...grpc.CallOption) (*ResReceiveAllActivityGift, error)
	FetchFriendGiftActivityData(ctx context.Context, in *ReqFetchFriendGiftActivityData, opts ...grpc.CallOption) (*ResFetchFriendGiftActivityData, error)
	OpenPreChestItem(ctx context.Context, in *ReqOpenPreChestItem, opts ...grpc.CallOption) (*ResOpenPreChestItem, error)
	FetchVoteActivity(ctx context.Context, in *ReqFetchVoteActivity, opts ...grpc.CallOption) (*ResFetchVoteActivity, error)
	VoteActivity(ctx context.Context, in *ReqVoteActivity, opts ...grpc.CallOption) (*ResVoteActivity, error)
	UnlockActivitySpot(ctx context.Context, in *ReqUnlockActivitySpot, opts ...grpc.CallOption) (*ResCommon, error)
	UnlockActivitySpotEnding(ctx context.Context, in *ReqUnlockActivitySpotEnding, opts ...grpc.CallOption) (*ResCommon, error)
	ReceiveActivitySpotReward(ctx context.Context, in *ReqReceiveActivitySpotReward, opts ...grpc.CallOption) (*ResReceiveActivitySpotReward, error)
	DeleteAccount(ctx context.Context, in *ReqCommon, opts ...grpc.CallOption) (*ResDeleteAccount, error)
	CancelDeleteAccount(ctx context.Context, in *ReqCommon, opts ...grpc.CallOption) (*ResCommon, error)
	LogReport(ctx context.Context, in *ReqLogReport, opts ...grpc.CallOption) (*ResCommon, error)
	BindOauth2(ctx context.Context, in *ReqBindOauth2, opts ...grpc.CallOption) (*ResCommon, error)
	FetchOauth2Info(ctx context.Context, in *ReqFetchOauth2, opts ...grpc.CallOption) (*ResFetchOauth2, error)
	SetLoadingImage(ctx context.Context, in *ReqSetLoadingImage, opts ...grpc.CallOption) (*ResCommon, error)
	FetchShopInterval(ctx context.Context, in *ReqCommon, opts ...grpc.CallOption) (*ResFetchShopInterval, error)
	FetchActivityInterval(ctx context.Context, in *ReqCommon, opts ...grpc.CallOption) (*ResFetchActivityInterval, error)
	FetchRecentFriend(ctx context.Context, in *ReqCommon, opts ...grpc.CallOption) (*ResFetchrecentFriend, error)
	OpenGacha(ctx context.Context, in *ReqOpenGacha, opts ...grpc.CallOption) (*ResOpenGacha, error)
	TaskRequest(ctx context.Context, in *ReqTaskRequest, opts ...grpc.CallOption) (*ResCommon, error)
	SimulationActivityTrain(ctx context.Context, in *ReqSimulationActivityTrain, opts ...grpc.CallOption) (*ResSimulationActivityTrain, error)
	FetchSimulationGameRecord(ctx context.Context, in *ReqFetchSimulationGameRecord, opts ...grpc.CallOption) (*ResFetchSimulationGameRecord, error)
	StartSimulationActivityGame(ctx context.Context, in *ReqStartSimulationActivityGame, opts ...grpc.CallOption) (*ResStartSimulationActivityGame, error)
	FetchSimulationGameRank(ctx context.Context, in *ReqFetchSimulationGameRank, opts ...grpc.CallOption) (*ResFetchSimulationGameRank, error)
	GenerateCombiningCraft(ctx context.Context, in *ReqGenerateCombiningCraft, opts ...grpc.CallOption) (*ResGenerateCombiningCraft, error)
	MoveCombiningCraft(ctx context.Context, in *ReqMoveCombiningCraft, opts ...grpc.CallOption) (*ResMoveCombiningCraft, error)
	CombiningRecycleCraft(ctx context.Context, in *ReqCombiningRecycleCraft, opts ...grpc.CallOption) (*ResCombiningRecycleCraft, error)
	RecoverCombiningRecycle(ctx context.Context, in *ReqRecoverCombiningRecycle, opts ...grpc.CallOption) (*ResRecoverCombiningRecycle, error)
	FinishCombiningOrder(ctx context.Context, in *ReqFinishCombiningOrder, opts ...grpc.CallOption) (*ResFinishCombiningOrder, error)
	UpgradeVillageBuilding(ctx context.Context, in *ReqUpgradeVillageBuilding, opts ...grpc.CallOption) (*ResCommon, error)
	ReceiveVillageBuildingReward(ctx context.Context, in *ReqReceiveVillageBuildingReward, opts ...grpc.CallOption) (*ResReceiveVillageBuildingReward, error)
	StartVillageTrip(ctx context.Context, in *ReqStartVillageTrip, opts ...grpc.CallOption) (*ResCommon, error)
	ReceiveVillageTripReward(ctx context.Context, in *ReqReceiveVillageTripReward, opts ...grpc.CallOption) (*ResReceiveVillageTripReward, error)
	CompleteVillageTask(ctx context.Context, in *ReqCompleteVillageTask, opts ...grpc.CallOption) (*ResCompleteVillageTask, error)
	GetFriendVillageData(ctx context.Context, in *ReqGetFriendVillageData, opts ...grpc.CallOption) (*ResGetFriendVillageData, error)
	SetVillageWorker(ctx context.Context, in *ReqSetVillageWorker, opts ...grpc.CallOption) (*ResSetVillageWorker, error)
	NextRoundVillage(ctx context.Context, in *ReqNextRoundVillage, opts ...grpc.CallOption) (*ResNextRoundVillage, error)
	ResolveFestivalActivityProposal(ctx context.Context, in *ReqResolveFestivalActivityProposal, opts ...grpc.CallOption) (*ResResolveFestivalActivityProposal, error)
	ResolveFestivalActivityEvent(ctx context.Context, in *ReqResolveFestivalActivityEvent, opts ...grpc.CallOption) (*ResResolveFestivalActivityEvent, error)
	BuyFestivalProposal(ctx context.Context, in *ReqBuyFestivalProposal, opts ...grpc.CallOption) (*ResBuyFestivalProposal, error)
	IslandActivityMove(ctx context.Context, in *ReqIslandActivityMove, opts ...grpc.CallOption) (*ResCommon, error)
	IslandActivityBuy(ctx context.Context, in *ReqIslandActivityBuy, opts ...grpc.CallOption) (*ResCommon, error)
	IslandActivitySell(ctx context.Context, in *ReqIslandActivitySell, opts ...grpc.CallOption) (*ResCommon, error)
	IslandActivityTidyBag(ctx context.Context, in *ReqIslandActivityTidyBag, opts ...grpc.CallOption) (*ResCommon, error)
	IslandActivityUnlockBagGrid(ctx context.Context, in *ReqIslandActivityUnlockBagGrid, opts ...grpc.CallOption) (*ResCommon, error)
	CreateCustomizedContest(ctx context.Context, in *ReqCreateCustomizedContest, opts ...grpc.CallOption) (*ResCreateCustomizedContest, error)
	FetchManagerCustomizedContestList(ctx context.Context, in *ReqFetchmanagerCustomizedContestList, opts ...grpc.CallOption) (*ResFetchManagerCustomizedContestList, error)
	FetchManagerCustomizedContest(ctx context.Context, in *ReqFetchManagerCustomizedContest, opts ...grpc.CallOption) (*ResFetchManagerCustomizedContest, error)
	UpdateManagerCustomizedContest(ctx context.Context, in *ReqUpdateManagerCustomizedContest, opts ...grpc.CallOption) (*ResCommon, error)
	FetchContestPlayerRank(ctx context.Context, in *ReqFetchContestPlayerRank, opts ...grpc.CallOption) (*ResFetchContestPlayerRank, error)
	FetchReadyPlayerList(ctx context.Context, in *ReqFetchReadyPlayerList, opts ...grpc.CallOption) (*ResFetchReadyPlayerList, error)
	CreateGamePlan(ctx context.Context, in *ReqCreateGamePlan, opts ...grpc.CallOption) (*ResCommon, error)
	GenerateContestManagerLoginCode(ctx context.Context, in *ReqCommon, opts ...grpc.CallOption) (*ResGenerateContestManagerLoginCode, error)
	AmuletActivityStartGame(ctx context.Context, in *ReqAmuletActivityStartGame, opts ...grpc.CallOption) (*ResAmuletActivityStartGame, error)
	AmuletActivityOperate(ctx context.Context, in *ReqAmuletActivityOperate, opts ...grpc.CallOption) (*ResAmuletActivityOperate, error)
	AmuletActivityChangeHands(ctx context.Context, in *ReqAmuletActivityChangeHands, opts ...grpc.CallOption) (*ResAmuletActivityChangeHands, error)
	AmuletActivityUpgrade(ctx context.Context, in *ReqAmuletActivityUpgrade, opts ...grpc.CallOption) (*ResAmuletActivityUpgrade, error)
	AmuletActivityBuy(ctx context.Context, in *ReqAmuletActivityBuy, opts ...grpc.CallOption) (*ResAmuletActivityBuy, error)
	AmuletActivitySelectPack(ctx context.Context, in *ReqAmuletActivitySelectPack, opts ...grpc.CallOption) (*ResAmuletActivitySelectPack, error)
	AmuletActivitySellEffect(ctx context.Context, in *ReqAmuletActivitySellEffect, opts ...grpc.CallOption) (*ResAmuletActivitySellEffect, error)
	AmuletActivityEffectSort(ctx context.Context, in *ReqAmuletActivityEffectSort, opts ...grpc.CallOption) (*ResCommon, error)
	AmuletActivityGiveup(ctx context.Context, in *ReqAmuletActivityGiveup, opts ...grpc.CallOption) (*ResCommon, error)
	AmuletActivityRefreshShop(ctx context.Context, in *ReqAmuletActivityRefreshShop, opts ...grpc.CallOption) (*ResAmuletActivityRefreshShop, error)
	AmuletActivitySelectFreeEffect(ctx context.Context, in *ReqAmuletActivitySelectFreeEffect, opts ...grpc.CallOption) (*ResAmuletActivitySelectFreeEffect, error)
	AmuletActivityUpgradeShopBuff(ctx context.Context, in *ReqAmuletActivityUpgradeShopBuff, opts ...grpc.CallOption) (*ResAmuletActivityUpgradeShopBuff, error)
	AmuletActivityEndShopping(ctx context.Context, in *ReqAmuletActivityEndShopping, opts ...grpc.CallOption) (*ResAmuletActivityEndShopping, error)
	AmuletActivitySetSkillLevel(ctx context.Context, in *ReqAmuletActivitySetSkillLevel, opts ...grpc.CallOption) (*ResCommon, error)
	AmuletActivityMaintainInfo(ctx context.Context, in *ReqCommon, opts ...grpc.CallOption) (*ResAmuletActivityMaintainInfo, error)
	StoryActivityUnlock(ctx context.Context, in *ReqStoryActivityUnlock, opts ...grpc.CallOption) (*ResCommon, error)
	StoryActivityUnlockEnding(ctx context.Context, in *ReqStoryActivityUnlockEnding, opts ...grpc.CallOption) (*ResCommon, error)
	StoryActivityReceiveEndingReward(ctx context.Context, in *ReqStoryActivityReceiveEndingReward, opts ...grpc.CallOption) (*ResStoryReward, error)
	StoryActivityReceiveFinishReward(ctx context.Context, in *ReqStoryActivityReceiveFinishReward, opts ...grpc.CallOption) (*ResStoryReward, error)
	StoryActivityReceiveAllFinishReward(ctx context.Context, in *ReqStoryActivityReceiveAllFinishReward, opts ...grpc.CallOption) (*ResStoryReward, error)
	StoryActivityUnlockEndingAndReceive(ctx context.Context, in *ReqStoryActivityUnlockEndingAndReceive, opts ...grpc.CallOption) (*ResStoryActivityUnlockEndingAndReceive, error)
	FetchActivityRank(ctx context.Context, in *ReqFetchActivityRank, opts ...grpc.CallOption) (*ResFetchActivityRank, error)
	SetVerifiedHidden(ctx context.Context, in *ReqSetVerifiedHidden, opts ...grpc.CallOption) (*ResCommon, error)
	FetchQuestionnaireList(ctx context.Context, in *ReqFetchQuestionnaireList, opts ...grpc.CallOption) (*ResFetchQuestionnaireList, error)
	FetchQuestionnaireDetail(ctx context.Context, in *ReqFetchQuestionnaireDetail, opts ...grpc.CallOption) (*ResFetchQuestionnaireDetail, error)
	SubmitQuestionnaire(ctx context.Context, in *ReqSubmitQuestionnaire, opts ...grpc.CallOption) (*ResCommon, error)
}

type lobbyClient struct {
	cc grpc.ClientConnInterface
}

func NewLobbyClient(cc grpc.ClientConnInterface) LobbyClient {
	return &lobbyClient{cc}
}

func (c *lobbyClient) FetchConnectionInfo(ctx context.Context, in *ReqCommon, opts ...grpc.CallOption) (*ResConnectionInfo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResConnectionInfo)
	err := c.cc.Invoke(ctx, Lobby_FetchConnectionInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) FetchQueueInfo(ctx context.Context, in *ReqCommon, opts ...grpc.CallOption) (*ResFetchQueueInfo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResFetchQueueInfo)
	err := c.cc.Invoke(ctx, Lobby_FetchQueueInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) CancelQueue(ctx context.Context, in *ReqCommon, opts ...grpc.CallOption) (*ResCommon, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResCommon)
	err := c.cc.Invoke(ctx, Lobby_CancelQueue_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) OpenidCheck(ctx context.Context, in *ReqOpenidCheck, opts ...grpc.CallOption) (*ResOauth2Check, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResOauth2Check)
	err := c.cc.Invoke(ctx, Lobby_OpenidCheck_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) Signup(ctx context.Context, in *ReqSignupAccount, opts ...grpc.CallOption) (*ResSignupAccount, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResSignupAccount)
	err := c.cc.Invoke(ctx, Lobby_Signup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) Login(ctx context.Context, in *ReqLogin, opts ...grpc.CallOption) (*ResLogin, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResLogin)
	err := c.cc.Invoke(ctx, Lobby_Login_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) FetchInfo(ctx context.Context, in *ReqCommon, opts ...grpc.CallOption) (*ResFetchInfo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResFetchInfo)
	err := c.cc.Invoke(ctx, Lobby_FetchInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) LoginSuccess(ctx context.Context, in *ReqCommon, opts ...grpc.CallOption) (*ResCommon, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResCommon)
	err := c.cc.Invoke(ctx, Lobby_LoginSuccess_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) FetchServerMaintenanceInfo(ctx context.Context, in *ReqCommon, opts ...grpc.CallOption) (*ResFetchServerMaintenanceInfo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResFetchServerMaintenanceInfo)
	err := c.cc.Invoke(ctx, Lobby_FetchServerMaintenanceInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) EmailLogin(ctx context.Context, in *ReqEmailLogin, opts ...grpc.CallOption) (*ResLogin, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResLogin)
	err := c.cc.Invoke(ctx, Lobby_EmailLogin_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) Oauth2Auth(ctx context.Context, in *ReqOauth2Auth, opts ...grpc.CallOption) (*ResOauth2Auth, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResOauth2Auth)
	err := c.cc.Invoke(ctx, Lobby_Oauth2Auth_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) Oauth2Check(ctx context.Context, in *ReqOauth2Check, opts ...grpc.CallOption) (*ResOauth2Check, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResOauth2Check)
	err := c.cc.Invoke(ctx, Lobby_Oauth2Check_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) Oauth2Signup(ctx context.Context, in *ReqOauth2Signup, opts ...grpc.CallOption) (*ResOauth2Signup, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResOauth2Signup)
	err := c.cc.Invoke(ctx, Lobby_Oauth2Signup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) Oauth2Login(ctx context.Context, in *ReqOauth2Login, opts ...grpc.CallOption) (*ResLogin, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResLogin)
	err := c.cc.Invoke(ctx, Lobby_Oauth2Login_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) DmmPreLogin(ctx context.Context, in *ReqDMMPreLogin, opts ...grpc.CallOption) (*ResDMMPreLogin, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResDMMPreLogin)
	err := c.cc.Invoke(ctx, Lobby_DmmPreLogin_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) CreatePhoneVerifyCode(ctx context.Context, in *ReqCreatePhoneVerifyCode, opts ...grpc.CallOption) (*ResCommon, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResCommon)
	err := c.cc.Invoke(ctx, Lobby_CreatePhoneVerifyCode_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) CreateEmailVerifyCode(ctx context.Context, in *ReqCreateEmailVerifyCode, opts ...grpc.CallOption) (*ResCommon, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResCommon)
	err := c.cc.Invoke(ctx, Lobby_CreateEmailVerifyCode_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) VerfifyCodeForSecure(ctx context.Context, in *ReqVerifyCodeForSecure, opts ...grpc.CallOption) (*ResVerfiyCodeForSecure, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResVerfiyCodeForSecure)
	err := c.cc.Invoke(ctx, Lobby_VerfifyCodeForSecure_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) BindPhoneNumber(ctx context.Context, in *ReqBindPhoneNumber, opts ...grpc.CallOption) (*ResCommon, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResCommon)
	err := c.cc.Invoke(ctx, Lobby_BindPhoneNumber_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) UnbindPhoneNumber(ctx context.Context, in *ReqUnbindPhoneNumber, opts ...grpc.CallOption) (*ResCommon, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResCommon)
	err := c.cc.Invoke(ctx, Lobby_UnbindPhoneNumber_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) FetchPhoneLoginBind(ctx context.Context, in *ReqCommon, opts ...grpc.CallOption) (*ResFetchPhoneLoginBind, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResFetchPhoneLoginBind)
	err := c.cc.Invoke(ctx, Lobby_FetchPhoneLoginBind_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) CreatePhoneLoginBind(ctx context.Context, in *ReqCreatePhoneLoginBind, opts ...grpc.CallOption) (*ResCommon, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResCommon)
	err := c.cc.Invoke(ctx, Lobby_CreatePhoneLoginBind_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) BindEmail(ctx context.Context, in *ReqBindEmail, opts ...grpc.CallOption) (*ResCommon, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResCommon)
	err := c.cc.Invoke(ctx, Lobby_BindEmail_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) ModifyPassword(ctx context.Context, in *ReqModifyPassword, opts ...grpc.CallOption) (*ResCommon, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResCommon)
	err := c.cc.Invoke(ctx, Lobby_ModifyPassword_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) BindAccount(ctx context.Context, in *ReqBindAccount, opts ...grpc.CallOption) (*ResCommon, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResCommon)
	err := c.cc.Invoke(ctx, Lobby_BindAccount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) Logout(ctx context.Context, in *ReqLogout, opts ...grpc.CallOption) (*ResLogout, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResLogout)
	err := c.cc.Invoke(ctx, Lobby_Logout_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) Heatbeat(ctx context.Context, in *ReqHeatBeat, opts ...grpc.CallOption) (*ResCommon, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResCommon)
	err := c.cc.Invoke(ctx, Lobby_Heatbeat_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) LoginBeat(ctx context.Context, in *ReqLoginBeat, opts ...grpc.CallOption) (*ResCommon, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResCommon)
	err := c.cc.Invoke(ctx, Lobby_LoginBeat_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) CreateNickname(ctx context.Context, in *ReqCreateNickname, opts ...grpc.CallOption) (*ResCommon, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResCommon)
	err := c.cc.Invoke(ctx, Lobby_CreateNickname_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) ModifyNickname(ctx context.Context, in *ReqModifyNickname, opts ...grpc.CallOption) (*ResCommon, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResCommon)
	err := c.cc.Invoke(ctx, Lobby_ModifyNickname_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) ModifyBirthday(ctx context.Context, in *ReqModifyBirthday, opts ...grpc.CallOption) (*ResCommon, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResCommon)
	err := c.cc.Invoke(ctx, Lobby_ModifyBirthday_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) FetchRoom(ctx context.Context, in *ReqCommon, opts ...grpc.CallOption) (*ResSelfRoom, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResSelfRoom)
	err := c.cc.Invoke(ctx, Lobby_FetchRoom_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) FetchGamingInfo(ctx context.Context, in *ReqCommon, opts ...grpc.CallOption) (*ResFetchGamingInfo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResFetchGamingInfo)
	err := c.cc.Invoke(ctx, Lobby_FetchGamingInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) CreateRoom(ctx context.Context, in *ReqCreateRoom, opts ...grpc.CallOption) (*ResCreateRoom, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResCreateRoom)
	err := c.cc.Invoke(ctx, Lobby_CreateRoom_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) JoinRoom(ctx context.Context, in *ReqJoinRoom, opts ...grpc.CallOption) (*ResJoinRoom, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResJoinRoom)
	err := c.cc.Invoke(ctx, Lobby_JoinRoom_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) LeaveRoom(ctx context.Context, in *ReqCommon, opts ...grpc.CallOption) (*ResCommon, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResCommon)
	err := c.cc.Invoke(ctx, Lobby_LeaveRoom_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) ReadyPlay(ctx context.Context, in *ReqRoomReady, opts ...grpc.CallOption) (*ResCommon, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResCommon)
	err := c.cc.Invoke(ctx, Lobby_ReadyPlay_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) DressingStatus(ctx context.Context, in *ReqRoomDressing, opts ...grpc.CallOption) (*ResCommon, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResCommon)
	err := c.cc.Invoke(ctx, Lobby_DressingStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) StartRoom(ctx context.Context, in *ReqRoomStart, opts ...grpc.CallOption) (*ResCommon, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResCommon)
	err := c.cc.Invoke(ctx, Lobby_StartRoom_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) RoomKickPlayer(ctx context.Context, in *ReqRoomKickPlayer, opts ...grpc.CallOption) (*ResCommon, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResCommon)
	err := c.cc.Invoke(ctx, Lobby_RoomKickPlayer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) ModifyRoom(ctx context.Context, in *ReqModifyRoom, opts ...grpc.CallOption) (*ResCommon, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResCommon)
	err := c.cc.Invoke(ctx, Lobby_ModifyRoom_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) AddRoomRobot(ctx context.Context, in *ReqAddRoomRobot, opts ...grpc.CallOption) (*ResCommon, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResCommon)
	err := c.cc.Invoke(ctx, Lobby_AddRoomRobot_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) MatchGame(ctx context.Context, in *ReqJoinMatchQueue, opts ...grpc.CallOption) (*ResCommon, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResCommon)
	err := c.cc.Invoke(ctx, Lobby_MatchGame_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) CancelMatch(ctx context.Context, in *ReqCancelMatchQueue, opts ...grpc.CallOption) (*ResCommon, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResCommon)
	err := c.cc.Invoke(ctx, Lobby_CancelMatch_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) FetchAccountInfo(ctx context.Context, in *ReqAccountInfo, opts ...grpc.CallOption) (*ResAccountInfo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResAccountInfo)
	err := c.cc.Invoke(ctx, Lobby_FetchAccountInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) ChangeAvatar(ctx context.Context, in *ReqChangeAvatar, opts ...grpc.CallOption) (*ResCommon, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResCommon)
	err := c.cc.Invoke(ctx, Lobby_ChangeAvatar_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) ReceiveVersionReward(ctx context.Context, in *ReqCommon, opts ...grpc.CallOption) (*ResCommon, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResCommon)
	err := c.cc.Invoke(ctx, Lobby_ReceiveVersionReward_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) FetchAccountStatisticInfo(ctx context.Context, in *ReqAccountStatisticInfo, opts ...grpc.CallOption) (*ResAccountStatisticInfo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResAccountStatisticInfo)
	err := c.cc.Invoke(ctx, Lobby_FetchAccountStatisticInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) FetchAccountChallengeRankInfo(ctx context.Context, in *ReqAccountInfo, opts ...grpc.CallOption) (*ResAccountChallengeRankInfo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResAccountChallengeRankInfo)
	err := c.cc.Invoke(ctx, Lobby_FetchAccountChallengeRankInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) FetchAccountCharacterInfo(ctx context.Context, in *ReqCommon, opts ...grpc.CallOption) (*ResAccountCharacterInfo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResAccountCharacterInfo)
	err := c.cc.Invoke(ctx, Lobby_FetchAccountCharacterInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) ShopPurchase(ctx context.Context, in *ReqShopPurchase, opts ...grpc.CallOption) (*ResShopPurchase, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResShopPurchase)
	err := c.cc.Invoke(ctx, Lobby_ShopPurchase_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) FetchGameRecord(ctx context.Context, in *ReqGameRecord, opts ...grpc.CallOption) (*ResGameRecord, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResGameRecord)
	err := c.cc.Invoke(ctx, Lobby_FetchGameRecord_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) ReadGameRecord(ctx context.Context, in *ReqGameRecord, opts ...grpc.CallOption) (*ResCommon, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResCommon)
	err := c.cc.Invoke(ctx, Lobby_ReadGameRecord_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) FetchGameRecordList(ctx context.Context, in *ReqGameRecordList, opts ...grpc.CallOption) (*ResGameRecordList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResGameRecordList)
	err := c.cc.Invoke(ctx, Lobby_FetchGameRecordList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) FetchGameRecordListV2(ctx context.Context, in *ReqGameRecordListV2, opts ...grpc.CallOption) (*ResGameRecordListV2, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResGameRecordListV2)
	err := c.cc.Invoke(ctx, Lobby_FetchGameRecordListV2_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) FetchNextGameRecordList(ctx context.Context, in *ReqNextGameRecordList, opts ...grpc.CallOption) (*ResNextGameRecordList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResNextGameRecordList)
	err := c.cc.Invoke(ctx, Lobby_FetchNextGameRecordList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) FetchCollectedGameRecordList(ctx context.Context, in *ReqCommon, opts ...grpc.CallOption) (*ResCollectedGameRecordList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResCollectedGameRecordList)
	err := c.cc.Invoke(ctx, Lobby_FetchCollectedGameRecordList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) FetchGameRecordsDetail(ctx context.Context, in *ReqGameRecordsDetail, opts ...grpc.CallOption) (*ResGameRecordsDetail, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResGameRecordsDetail)
	err := c.cc.Invoke(ctx, Lobby_FetchGameRecordsDetail_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) FetchGameRecordsDetailV2(ctx context.Context, in *ReqGameRecordsDetailV2, opts ...grpc.CallOption) (*ResGameRecordsDetailV2, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResGameRecordsDetailV2)
	err := c.cc.Invoke(ctx, Lobby_FetchGameRecordsDetailV2_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) AddCollectedGameRecord(ctx context.Context, in *ReqAddCollectedGameRecord, opts ...grpc.CallOption) (*ResAddCollectedGameRecord, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResAddCollectedGameRecord)
	err := c.cc.Invoke(ctx, Lobby_AddCollectedGameRecord_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) RemoveCollectedGameRecord(ctx context.Context, in *ReqRemoveCollectedGameRecord, opts ...grpc.CallOption) (*ResRemoveCollectedGameRecord, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResRemoveCollectedGameRecord)
	err := c.cc.Invoke(ctx, Lobby_RemoveCollectedGameRecord_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) ChangeCollectedGameRecordRemarks(ctx context.Context, in *ReqChangeCollectedGameRecordRemarks, opts ...grpc.CallOption) (*ResChangeCollectedGameRecordRemarks, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResChangeCollectedGameRecordRemarks)
	err := c.cc.Invoke(ctx, Lobby_ChangeCollectedGameRecordRemarks_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) FetchLevelLeaderboard(ctx context.Context, in *ReqLevelLeaderboard, opts ...grpc.CallOption) (*ResLevelLeaderboard, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResLevelLeaderboard)
	err := c.cc.Invoke(ctx, Lobby_FetchLevelLeaderboard_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) FetchChallengeLeaderboard(ctx context.Context, in *ReqChallangeLeaderboard, opts ...grpc.CallOption) (*ResChallengeLeaderboard, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResChallengeLeaderboard)
	err := c.cc.Invoke(ctx, Lobby_FetchChallengeLeaderboard_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) FetchMutiChallengeLevel(ctx context.Context, in *ReqMutiChallengeLevel, opts ...grpc.CallOption) (*ResMutiChallengeLevel, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResMutiChallengeLevel)
	err := c.cc.Invoke(ctx, Lobby_FetchMutiChallengeLevel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) FetchMultiAccountBrief(ctx context.Context, in *ReqMultiAccountId, opts ...grpc.CallOption) (*ResMultiAccountBrief, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResMultiAccountBrief)
	err := c.cc.Invoke(ctx, Lobby_FetchMultiAccountBrief_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) FetchFriendList(ctx context.Context, in *ReqCommon, opts ...grpc.CallOption) (*ResFriendList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResFriendList)
	err := c.cc.Invoke(ctx, Lobby_FetchFriendList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) FetchFriendApplyList(ctx context.Context, in *ReqCommon, opts ...grpc.CallOption) (*ResFriendApplyList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResFriendApplyList)
	err := c.cc.Invoke(ctx, Lobby_FetchFriendApplyList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) ApplyFriend(ctx context.Context, in *ReqApplyFriend, opts ...grpc.CallOption) (*ResCommon, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResCommon)
	err := c.cc.Invoke(ctx, Lobby_ApplyFriend_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) HandleFriendApply(ctx context.Context, in *ReqHandleFriendApply, opts ...grpc.CallOption) (*ResCommon, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResCommon)
	err := c.cc.Invoke(ctx, Lobby_HandleFriendApply_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) RemoveFriend(ctx context.Context, in *ReqRemoveFriend, opts ...grpc.CallOption) (*ResCommon, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResCommon)
	err := c.cc.Invoke(ctx, Lobby_RemoveFriend_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) SearchAccountById(ctx context.Context, in *ReqSearchAccountById, opts ...grpc.CallOption) (*ResSearchAccountById, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResSearchAccountById)
	err := c.cc.Invoke(ctx, Lobby_SearchAccountById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) SearchAccountByPattern(ctx context.Context, in *ReqSearchAccountByPattern, opts ...grpc.CallOption) (*ResSearchAccountByPattern, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResSearchAccountByPattern)
	err := c.cc.Invoke(ctx, Lobby_SearchAccountByPattern_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) FetchAccountState(ctx context.Context, in *ReqAccountList, opts ...grpc.CallOption) (*ResAccountStates, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResAccountStates)
	err := c.cc.Invoke(ctx, Lobby_FetchAccountState_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) FetchBagInfo(ctx context.Context, in *ReqCommon, opts ...grpc.CallOption) (*ResBagInfo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResBagInfo)
	err := c.cc.Invoke(ctx, Lobby_FetchBagInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) UseBagItem(ctx context.Context, in *ReqUseBagItem, opts ...grpc.CallOption) (*ResCommon, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResCommon)
	err := c.cc.Invoke(ctx, Lobby_UseBagItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) OpenManualItem(ctx context.Context, in *ReqOpenManualItem, opts ...grpc.CallOption) (*ResCommon, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResCommon)
	err := c.cc.Invoke(ctx, Lobby_OpenManualItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) OpenRandomRewardItem(ctx context.Context, in *ReqOpenRandomRewardItem, opts ...grpc.CallOption) (*ResOpenRandomRewardItem, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResOpenRandomRewardItem)
	err := c.cc.Invoke(ctx, Lobby_OpenRandomRewardItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) OpenAllRewardItem(ctx context.Context, in *ReqOpenAllRewardItem, opts ...grpc.CallOption) (*ResOpenAllRewardItem, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResOpenAllRewardItem)
	err := c.cc.Invoke(ctx, Lobby_OpenAllRewardItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) ComposeShard(ctx context.Context, in *ReqComposeShard, opts ...grpc.CallOption) (*ResCommon, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResCommon)
	err := c.cc.Invoke(ctx, Lobby_ComposeShard_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) FetchAnnouncement(ctx context.Context, in *ReqFetchAnnouncement, opts ...grpc.CallOption) (*ResAnnouncement, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResAnnouncement)
	err := c.cc.Invoke(ctx, Lobby_FetchAnnouncement_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) ReadAnnouncement(ctx context.Context, in *ReqReadAnnouncement, opts ...grpc.CallOption) (*ResCommon, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResCommon)
	err := c.cc.Invoke(ctx, Lobby_ReadAnnouncement_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) FetchMailInfo(ctx context.Context, in *ReqCommon, opts ...grpc.CallOption) (*ResMailInfo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResMailInfo)
	err := c.cc.Invoke(ctx, Lobby_FetchMailInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) ReadMail(ctx context.Context, in *ReqReadMail, opts ...grpc.CallOption) (*ResCommon, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResCommon)
	err := c.cc.Invoke(ctx, Lobby_ReadMail_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) DeleteMail(ctx context.Context, in *ReqDeleteMail, opts ...grpc.CallOption) (*ResCommon, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResCommon)
	err := c.cc.Invoke(ctx, Lobby_DeleteMail_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) TakeAttachmentFromMail(ctx context.Context, in *ReqTakeAttachment, opts ...grpc.CallOption) (*ResCommon, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResCommon)
	err := c.cc.Invoke(ctx, Lobby_TakeAttachmentFromMail_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) ReceiveAchievementReward(ctx context.Context, in *ReqReceiveAchievementReward, opts ...grpc.CallOption) (*ResReceiveAchievementReward, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResReceiveAchievementReward)
	err := c.cc.Invoke(ctx, Lobby_ReceiveAchievementReward_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) ReceiveAchievementGroupReward(ctx context.Context, in *ReqReceiveAchievementGroupReward, opts ...grpc.CallOption) (*ResReceiveAchievementGroupReward, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResReceiveAchievementGroupReward)
	err := c.cc.Invoke(ctx, Lobby_ReceiveAchievementGroupReward_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) FetchAchievementRate(ctx context.Context, in *ReqCommon, opts ...grpc.CallOption) (*ResFetchAchievementRate, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResFetchAchievementRate)
	err := c.cc.Invoke(ctx, Lobby_FetchAchievementRate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) FetchAchievement(ctx context.Context, in *ReqCommon, opts ...grpc.CallOption) (*ResAchievement, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResAchievement)
	err := c.cc.Invoke(ctx, Lobby_FetchAchievement_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) BuyShiLian(ctx context.Context, in *ReqBuyShiLian, opts ...grpc.CallOption) (*ResCommon, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResCommon)
	err := c.cc.Invoke(ctx, Lobby_BuyShiLian_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) MatchShiLian(ctx context.Context, in *ReqCommon, opts ...grpc.CallOption) (*ResCommon, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResCommon)
	err := c.cc.Invoke(ctx, Lobby_MatchShiLian_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) GoNextShiLian(ctx context.Context, in *ReqCommon, opts ...grpc.CallOption) (*ResCommon, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResCommon)
	err := c.cc.Invoke(ctx, Lobby_GoNextShiLian_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) UpdateClientValue(ctx context.Context, in *ReqUpdateClientValue, opts ...grpc.CallOption) (*ResCommon, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResCommon)
	err := c.cc.Invoke(ctx, Lobby_UpdateClientValue_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) FetchClientValue(ctx context.Context, in *ReqCommon, opts ...grpc.CallOption) (*ResClientValue, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResClientValue)
	err := c.cc.Invoke(ctx, Lobby_FetchClientValue_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) ClientMessage(ctx context.Context, in *ReqClientMessage, opts ...grpc.CallOption) (*ResCommon, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResCommon)
	err := c.cc.Invoke(ctx, Lobby_ClientMessage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) FetchCurrentMatchInfo(ctx context.Context, in *ReqCurrentMatchInfo, opts ...grpc.CallOption) (*ResCurrentMatchInfo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResCurrentMatchInfo)
	err := c.cc.Invoke(ctx, Lobby_FetchCurrentMatchInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) UserComplain(ctx context.Context, in *ReqUserComplain, opts ...grpc.CallOption) (*ResCommon, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResCommon)
	err := c.cc.Invoke(ctx, Lobby_UserComplain_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) FetchReviveCoinInfo(ctx context.Context, in *ReqCommon, opts ...grpc.CallOption) (*ResReviveCoinInfo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResReviveCoinInfo)
	err := c.cc.Invoke(ctx, Lobby_FetchReviveCoinInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) GainReviveCoin(ctx context.Context, in *ReqCommon, opts ...grpc.CallOption) (*ResCommon, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResCommon)
	err := c.cc.Invoke(ctx, Lobby_GainReviveCoin_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) FetchDailyTask(ctx context.Context, in *ReqCommon, opts ...grpc.CallOption) (*ResDailyTask, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResDailyTask)
	err := c.cc.Invoke(ctx, Lobby_FetchDailyTask_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) RefreshDailyTask(ctx context.Context, in *ReqRefreshDailyTask, opts ...grpc.CallOption) (*ResRefreshDailyTask, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResRefreshDailyTask)
	err := c.cc.Invoke(ctx, Lobby_RefreshDailyTask_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) UseGiftCode(ctx context.Context, in *ReqUseGiftCode, opts ...grpc.CallOption) (*ResUseGiftCode, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResUseGiftCode)
	err := c.cc.Invoke(ctx, Lobby_UseGiftCode_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) UseSpecialGiftCode(ctx context.Context, in *ReqUseGiftCode, opts ...grpc.CallOption) (*ResUseSpecialGiftCode, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResUseSpecialGiftCode)
	err := c.cc.Invoke(ctx, Lobby_UseSpecialGiftCode_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) FetchTitleList(ctx context.Context, in *ReqCommon, opts ...grpc.CallOption) (*ResTitleList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResTitleList)
	err := c.cc.Invoke(ctx, Lobby_FetchTitleList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) UseTitle(ctx context.Context, in *ReqUseTitle, opts ...grpc.CallOption) (*ResCommon, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResCommon)
	err := c.cc.Invoke(ctx, Lobby_UseTitle_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) SendClientMessage(ctx context.Context, in *ReqSendClientMessage, opts ...grpc.CallOption) (*ResCommon, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResCommon)
	err := c.cc.Invoke(ctx, Lobby_SendClientMessage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) FetchGameLiveInfo(ctx context.Context, in *ReqGameLiveInfo, opts ...grpc.CallOption) (*ResGameLiveInfo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResGameLiveInfo)
	err := c.cc.Invoke(ctx, Lobby_FetchGameLiveInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) FetchGameLiveLeftSegment(ctx context.Context, in *ReqGameLiveLeftSegment, opts ...grpc.CallOption) (*ResGameLiveLeftSegment, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResGameLiveLeftSegment)
	err := c.cc.Invoke(ctx, Lobby_FetchGameLiveLeftSegment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) FetchGameLiveList(ctx context.Context, in *ReqGameLiveList, opts ...grpc.CallOption) (*ResGameLiveList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResGameLiveList)
	err := c.cc.Invoke(ctx, Lobby_FetchGameLiveList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) FetchCommentSetting(ctx context.Context, in *ReqCommon, opts ...grpc.CallOption) (*ResCommentSetting, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResCommentSetting)
	err := c.cc.Invoke(ctx, Lobby_FetchCommentSetting_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) UpdateCommentSetting(ctx context.Context, in *ReqUpdateCommentSetting, opts ...grpc.CallOption) (*ResCommon, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResCommon)
	err := c.cc.Invoke(ctx, Lobby_UpdateCommentSetting_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) FetchCommentList(ctx context.Context, in *ReqFetchCommentList, opts ...grpc.CallOption) (*ResFetchCommentList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResFetchCommentList)
	err := c.cc.Invoke(ctx, Lobby_FetchCommentList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) FetchCommentContent(ctx context.Context, in *ReqFetchCommentContent, opts ...grpc.CallOption) (*ResFetchCommentContent, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResFetchCommentContent)
	err := c.cc.Invoke(ctx, Lobby_FetchCommentContent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) LeaveComment(ctx context.Context, in *ReqLeaveComment, opts ...grpc.CallOption) (*ResCommon, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResCommon)
	err := c.cc.Invoke(ctx, Lobby_LeaveComment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) DeleteComment(ctx context.Context, in *ReqDeleteComment, opts ...grpc.CallOption) (*ResCommon, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResCommon)
	err := c.cc.Invoke(ctx, Lobby_DeleteComment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) UpdateReadComment(ctx context.Context, in *ReqUpdateReadComment, opts ...grpc.CallOption) (*ResCommon, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResCommon)
	err := c.cc.Invoke(ctx, Lobby_UpdateReadComment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) FetchRollingNotice(ctx context.Context, in *ReqFetchRollingNotice, opts ...grpc.CallOption) (*ResFetchRollingNotice, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResFetchRollingNotice)
	err := c.cc.Invoke(ctx, Lobby_FetchRollingNotice_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) FetchMaintainNotice(ctx context.Context, in *ReqCommon, opts ...grpc.CallOption) (*ResFetchMaintainNotice, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResFetchMaintainNotice)
	err := c.cc.Invoke(ctx, Lobby_FetchMaintainNotice_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) FetchServerTime(ctx context.Context, in *ReqCommon, opts ...grpc.CallOption) (*ResServerTime, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResServerTime)
	err := c.cc.Invoke(ctx, Lobby_FetchServerTime_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) FetchPlatformProducts(ctx context.Context, in *ReqPlatformBillingProducts, opts ...grpc.CallOption) (*ResPlatformBillingProducts, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResPlatformBillingProducts)
	err := c.cc.Invoke(ctx, Lobby_FetchPlatformProducts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) FetchRandomCharacter(ctx context.Context, in *ReqCommon, opts ...grpc.CallOption) (*ResRandomCharacter, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResRandomCharacter)
	err := c.cc.Invoke(ctx, Lobby_FetchRandomCharacter_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) SetRandomCharacter(ctx context.Context, in *ReqRandomCharacter, opts ...grpc.CallOption) (*ResCommon, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResCommon)
	err := c.cc.Invoke(ctx, Lobby_SetRandomCharacter_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) CancelGooglePlayOrder(ctx context.Context, in *ReqCancelGooglePlayOrder, opts ...grpc.CallOption) (*ResCommon, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResCommon)
	err := c.cc.Invoke(ctx, Lobby_CancelGooglePlayOrder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) OpenChest(ctx context.Context, in *ReqOpenChest, opts ...grpc.CallOption) (*ResOpenChest, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResOpenChest)
	err := c.cc.Invoke(ctx, Lobby_OpenChest_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) BuyFromChestShop(ctx context.Context, in *ReqBuyFromChestShop, opts ...grpc.CallOption) (*ResBuyFromChestShop, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResBuyFromChestShop)
	err := c.cc.Invoke(ctx, Lobby_BuyFromChestShop_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) FetchDailySignInInfo(ctx context.Context, in *ReqCommon, opts ...grpc.CallOption) (*ResDailySignInInfo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResDailySignInInfo)
	err := c.cc.Invoke(ctx, Lobby_FetchDailySignInInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) DoDailySignIn(ctx context.Context, in *ReqCommon, opts ...grpc.CallOption) (*ResCommon, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResCommon)
	err := c.cc.Invoke(ctx, Lobby_DoDailySignIn_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) DoActivitySignIn(ctx context.Context, in *ReqDoActivitySignIn, opts ...grpc.CallOption) (*ResDoActivitySignIn, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResDoActivitySignIn)
	err := c.cc.Invoke(ctx, Lobby_DoActivitySignIn_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) FetchCharacterInfo(ctx context.Context, in *ReqCommon, opts ...grpc.CallOption) (*ResCharacterInfo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResCharacterInfo)
	err := c.cc.Invoke(ctx, Lobby_FetchCharacterInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) UpdateCharacterSort(ctx context.Context, in *ReqUpdateCharacterSort, opts ...grpc.CallOption) (*ResCommon, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResCommon)
	err := c.cc.Invoke(ctx, Lobby_UpdateCharacterSort_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) ChangeMainCharacter(ctx context.Context, in *ReqChangeMainCharacter, opts ...grpc.CallOption) (*ResCommon, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResCommon)
	err := c.cc.Invoke(ctx, Lobby_ChangeMainCharacter_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) ChangeCharacterSkin(ctx context.Context, in *ReqChangeCharacterSkin, opts ...grpc.CallOption) (*ResCommon, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResCommon)
	err := c.cc.Invoke(ctx, Lobby_ChangeCharacterSkin_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) ChangeCharacterView(ctx context.Context, in *ReqChangeCharacterView, opts ...grpc.CallOption) (*ResCommon, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResCommon)
	err := c.cc.Invoke(ctx, Lobby_ChangeCharacterView_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) SetHiddenCharacter(ctx context.Context, in *ReqSetHiddenCharacter, opts ...grpc.CallOption) (*ResSetHiddenCharacter, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResSetHiddenCharacter)
	err := c.cc.Invoke(ctx, Lobby_SetHiddenCharacter_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) SendGiftToCharacter(ctx context.Context, in *ReqSendGiftToCharacter, opts ...grpc.CallOption) (*ResSendGiftToCharacter, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResSendGiftToCharacter)
	err := c.cc.Invoke(ctx, Lobby_SendGiftToCharacter_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) SellItem(ctx context.Context, in *ReqSellItem, opts ...grpc.CallOption) (*ResCommon, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResCommon)
	err := c.cc.Invoke(ctx, Lobby_SellItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) FetchCommonView(ctx context.Context, in *ReqCommon, opts ...grpc.CallOption) (*ResCommonView, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResCommonView)
	err := c.cc.Invoke(ctx, Lobby_FetchCommonView_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) ChangeCommonView(ctx context.Context, in *ReqChangeCommonView, opts ...grpc.CallOption) (*ResCommon, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResCommon)
	err := c.cc.Invoke(ctx, Lobby_ChangeCommonView_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) SaveCommonViews(ctx context.Context, in *ReqSaveCommonViews, opts ...grpc.CallOption) (*ResCommon, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResCommon)
	err := c.cc.Invoke(ctx, Lobby_SaveCommonViews_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) FetchCommonViews(ctx context.Context, in *ReqCommonViews, opts ...grpc.CallOption) (*ResCommonViews, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResCommonViews)
	err := c.cc.Invoke(ctx, Lobby_FetchCommonViews_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) FetchAllCommonViews(ctx context.Context, in *ReqCommon, opts ...grpc.CallOption) (*ResAllcommonViews, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResAllcommonViews)
	err := c.cc.Invoke(ctx, Lobby_FetchAllCommonViews_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) UseCommonView(ctx context.Context, in *ReqUseCommonView, opts ...grpc.CallOption) (*ResCommon, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResCommon)
	err := c.cc.Invoke(ctx, Lobby_UseCommonView_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) UpgradeCharacter(ctx context.Context, in *ReqUpgradeCharacter, opts ...grpc.CallOption) (*ResUpgradeCharacter, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResUpgradeCharacter)
	err := c.cc.Invoke(ctx, Lobby_UpgradeCharacter_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) AddFinishedEnding(ctx context.Context, in *ReqFinishedEnding, opts ...grpc.CallOption) (*ResCommon, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResCommon)
	err := c.cc.Invoke(ctx, Lobby_AddFinishedEnding_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) ReceiveEndingReward(ctx context.Context, in *ReqFinishedEnding, opts ...grpc.CallOption) (*ResCommon, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResCommon)
	err := c.cc.Invoke(ctx, Lobby_ReceiveEndingReward_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) GameMasterCommand(ctx context.Context, in *ReqGMCommand, opts ...grpc.CallOption) (*ResCommon, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResCommon)
	err := c.cc.Invoke(ctx, Lobby_GameMasterCommand_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) FetchShopInfo(ctx context.Context, in *ReqCommon, opts ...grpc.CallOption) (*ResShopInfo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResShopInfo)
	err := c.cc.Invoke(ctx, Lobby_FetchShopInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) BuyFromShop(ctx context.Context, in *ReqBuyFromShop, opts ...grpc.CallOption) (*ResBuyFromShop, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResBuyFromShop)
	err := c.cc.Invoke(ctx, Lobby_BuyFromShop_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) BuyFromZHP(ctx context.Context, in *ReqBuyFromZHP, opts ...grpc.CallOption) (*ResCommon, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResCommon)
	err := c.cc.Invoke(ctx, Lobby_BuyFromZHP_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) RefreshZHPShop(ctx context.Context, in *ReqReshZHPShop, opts ...grpc.CallOption) (*ResRefreshZHPShop, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResRefreshZHPShop)
	err := c.cc.Invoke(ctx, Lobby_RefreshZHPShop_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) FetchMonthTicketInfo(ctx context.Context, in *ReqCommon, opts ...grpc.CallOption) (*ResMonthTicketInfo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResMonthTicketInfo)
	err := c.cc.Invoke(ctx, Lobby_FetchMonthTicketInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) PayMonthTicket(ctx context.Context, in *ReqCommon, opts ...grpc.CallOption) (*ResPayMonthTicket, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResPayMonthTicket)
	err := c.cc.Invoke(ctx, Lobby_PayMonthTicket_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) ExchangeCurrency(ctx context.Context, in *ReqExchangeCurrency, opts ...grpc.CallOption) (*ResCommon, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResCommon)
	err := c.cc.Invoke(ctx, Lobby_ExchangeCurrency_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) ExchangeChestStone(ctx context.Context, in *ReqExchangeCurrency, opts ...grpc.CallOption) (*ResCommon, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResCommon)
	err := c.cc.Invoke(ctx, Lobby_ExchangeChestStone_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) ExchangeDiamond(ctx context.Context, in *ReqExchangeCurrency, opts ...grpc.CallOption) (*ResCommon, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResCommon)
	err := c.cc.Invoke(ctx, Lobby_ExchangeDiamond_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) FetchServerSettings(ctx context.Context, in *ReqCommon, opts ...grpc.CallOption) (*ResServerSettings, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResServerSettings)
	err := c.cc.Invoke(ctx, Lobby_FetchServerSettings_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) FetchAccountSettings(ctx context.Context, in *ReqCommon, opts ...grpc.CallOption) (*ResAccountSettings, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResAccountSettings)
	err := c.cc.Invoke(ctx, Lobby_FetchAccountSettings_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) UpdateAccountSettings(ctx context.Context, in *ReqUpdateAccountSettings, opts ...grpc.CallOption) (*ResCommon, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResCommon)
	err := c.cc.Invoke(ctx, Lobby_UpdateAccountSettings_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) FetchModNicknameTime(ctx context.Context, in *ReqCommon, opts ...grpc.CallOption) (*ResModNicknameTime, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResModNicknameTime)
	err := c.cc.Invoke(ctx, Lobby_FetchModNicknameTime_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) CreateWechatNativeOrder(ctx context.Context, in *ReqCreateWechatNativeOrder, opts ...grpc.CallOption) (*ResCreateWechatNativeOrder, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResCreateWechatNativeOrder)
	err := c.cc.Invoke(ctx, Lobby_CreateWechatNativeOrder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) CreateWechatAppOrder(ctx context.Context, in *ReqCreateWechatAppOrder, opts ...grpc.CallOption) (*ResCreateWechatAppOrder, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResCreateWechatAppOrder)
	err := c.cc.Invoke(ctx, Lobby_CreateWechatAppOrder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) CreateAlipayOrder(ctx context.Context, in *ReqCreateAlipayOrder, opts ...grpc.CallOption) (*ResCreateAlipayOrder, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResCreateAlipayOrder)
	err := c.cc.Invoke(ctx, Lobby_CreateAlipayOrder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) CreateAlipayScanOrder(ctx context.Context, in *ReqCreateAlipayScanOrder, opts ...grpc.CallOption) (*ResCreateAlipayScanOrder, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResCreateAlipayScanOrder)
	err := c.cc.Invoke(ctx, Lobby_CreateAlipayScanOrder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) CreateAlipayAppOrder(ctx context.Context, in *ReqCreateAlipayAppOrder, opts ...grpc.CallOption) (*ResCreateAlipayAppOrder, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResCreateAlipayAppOrder)
	err := c.cc.Invoke(ctx, Lobby_CreateAlipayAppOrder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) CreateJPCreditCardOrder(ctx context.Context, in *ReqCreateJPCreditCardOrder, opts ...grpc.CallOption) (*ResCreateJPCreditCardOrder, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResCreateJPCreditCardOrder)
	err := c.cc.Invoke(ctx, Lobby_CreateJPCreditCardOrder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) CreateJPPaypalOrder(ctx context.Context, in *ReqCreateJPPaypalOrder, opts ...grpc.CallOption) (*ResCreateJPPaypalOrder, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResCreateJPPaypalOrder)
	err := c.cc.Invoke(ctx, Lobby_CreateJPPaypalOrder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) CreateJPAuOrder(ctx context.Context, in *ReqCreateJPAuOrder, opts ...grpc.CallOption) (*ResCreateJPAuOrder, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResCreateJPAuOrder)
	err := c.cc.Invoke(ctx, Lobby_CreateJPAuOrder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) CreateJPDocomoOrder(ctx context.Context, in *ReqCreateJPDocomoOrder, opts ...grpc.CallOption) (*ResCreateJPDocomoOrder, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResCreateJPDocomoOrder)
	err := c.cc.Invoke(ctx, Lobby_CreateJPDocomoOrder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) CreateJPWebMoneyOrder(ctx context.Context, in *ReqCreateJPWebMoneyOrder, opts ...grpc.CallOption) (*ResCreateJPWebMoneyOrder, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResCreateJPWebMoneyOrder)
	err := c.cc.Invoke(ctx, Lobby_CreateJPWebMoneyOrder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) CreateJPSoftbankOrder(ctx context.Context, in *ReqCreateJPSoftbankOrder, opts ...grpc.CallOption) (*ResCreateJPSoftbankOrder, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResCreateJPSoftbankOrder)
	err := c.cc.Invoke(ctx, Lobby_CreateJPSoftbankOrder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) CreateJPPayPayOrder(ctx context.Context, in *ReqCreateJPPayPayOrder, opts ...grpc.CallOption) (*ResCreateJPPayPayOrder, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResCreateJPPayPayOrder)
	err := c.cc.Invoke(ctx, Lobby_CreateJPPayPayOrder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) FetchJPCommonCreditCardOrder(ctx context.Context, in *ReqFetchJPCommonCreditCardOrder, opts ...grpc.CallOption) (*ResFetchJPCommonCreditCardOrder, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResFetchJPCommonCreditCardOrder)
	err := c.cc.Invoke(ctx, Lobby_FetchJPCommonCreditCardOrder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) CreateJPGMOOrder(ctx context.Context, in *ReqCreateJPGMOOrder, opts ...grpc.CallOption) (*ResCreateJPGMOOrder, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResCreateJPGMOOrder)
	err := c.cc.Invoke(ctx, Lobby_CreateJPGMOOrder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) CreateENPaypalOrder(ctx context.Context, in *ReqCreateENPaypalOrder, opts ...grpc.CallOption) (*ResCreateENPaypalOrder, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResCreateENPaypalOrder)
	err := c.cc.Invoke(ctx, Lobby_CreateENPaypalOrder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) CreateENMasterCardOrder(ctx context.Context, in *ReqCreateENMasterCardOrder, opts ...grpc.CallOption) (*ResCreateENMasterCardOrder, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResCreateENMasterCardOrder)
	err := c.cc.Invoke(ctx, Lobby_CreateENMasterCardOrder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) CreateENVisaOrder(ctx context.Context, in *ReqCreateENVisaOrder, opts ...grpc.CallOption) (*ResCreateENVisaOrder, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResCreateENVisaOrder)
	err := c.cc.Invoke(ctx, Lobby_CreateENVisaOrder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) CreateENJCBOrder(ctx context.Context, in *ReqCreateENJCBOrder, opts ...grpc.CallOption) (*ResCreateENJCBOrder, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResCreateENJCBOrder)
	err := c.cc.Invoke(ctx, Lobby_CreateENJCBOrder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) CreateENAlipayOrder(ctx context.Context, in *ReqCreateENAlipayOrder, opts ...grpc.CallOption) (*ResCreateENAlipayOrder, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResCreateENAlipayOrder)
	err := c.cc.Invoke(ctx, Lobby_CreateENAlipayOrder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) CreateKRPaypalOrder(ctx context.Context, in *ReqCreateKRPaypalOrder, opts ...grpc.CallOption) (*ResCreateKRPaypalOrder, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResCreateKRPaypalOrder)
	err := c.cc.Invoke(ctx, Lobby_CreateKRPaypalOrder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) CreateKRMasterCardOrder(ctx context.Context, in *ReqCreateKRMasterCardOrder, opts ...grpc.CallOption) (*ResCreateKRMasterCardOrder, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResCreateKRMasterCardOrder)
	err := c.cc.Invoke(ctx, Lobby_CreateKRMasterCardOrder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) CreateKRVisaOrder(ctx context.Context, in *ReqCreateKRVisaOrder, opts ...grpc.CallOption) (*ResCreateKRVisaOrder, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResCreateKRVisaOrder)
	err := c.cc.Invoke(ctx, Lobby_CreateKRVisaOrder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) CreateKRJCBOrder(ctx context.Context, in *ReqCreateKRJCBOrder, opts ...grpc.CallOption) (*ResCreateKRJCBOrder, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResCreateKRJCBOrder)
	err := c.cc.Invoke(ctx, Lobby_CreateKRJCBOrder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) CreateKRAlipayOrder(ctx context.Context, in *ReqCreateKRAlipayOrder, opts ...grpc.CallOption) (*ResCreateKRAlipayOrder, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResCreateKRAlipayOrder)
	err := c.cc.Invoke(ctx, Lobby_CreateKRAlipayOrder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) CreateDMMOrder(ctx context.Context, in *ReqCreateDMMOrder, opts ...grpc.CallOption) (*ResCreateDmmOrder, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResCreateDmmOrder)
	err := c.cc.Invoke(ctx, Lobby_CreateDMMOrder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) CreateIAPOrder(ctx context.Context, in *ReqCreateIAPOrder, opts ...grpc.CallOption) (*ResCreateIAPOrder, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResCreateIAPOrder)
	err := c.cc.Invoke(ctx, Lobby_CreateIAPOrder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) CreateSteamOrder(ctx context.Context, in *ReqCreateSteamOrder, opts ...grpc.CallOption) (*ResCreateSteamOrder, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResCreateSteamOrder)
	err := c.cc.Invoke(ctx, Lobby_CreateSteamOrder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) VerifySteamOrder(ctx context.Context, in *ReqVerifySteamOrder, opts ...grpc.CallOption) (*ResCommon, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResCommon)
	err := c.cc.Invoke(ctx, Lobby_VerifySteamOrder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) CreateMyCardAndroidOrder(ctx context.Context, in *ReqCreateMyCardOrder, opts ...grpc.CallOption) (*ResCreateMyCardOrder, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResCreateMyCardOrder)
	err := c.cc.Invoke(ctx, Lobby_CreateMyCardAndroidOrder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) CreateMyCardWebOrder(ctx context.Context, in *ReqCreateMyCardOrder, opts ...grpc.CallOption) (*ResCreateMyCardOrder, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResCreateMyCardOrder)
	err := c.cc.Invoke(ctx, Lobby_CreateMyCardWebOrder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) CreatePaypalOrder(ctx context.Context, in *ReqCreatePaypalOrder, opts ...grpc.CallOption) (*ResCreatePaypalOrder, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResCreatePaypalOrder)
	err := c.cc.Invoke(ctx, Lobby_CreatePaypalOrder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) CreateXsollaOrder(ctx context.Context, in *ReqCreateXsollaOrder, opts ...grpc.CallOption) (*ResCreateXsollaOrder, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResCreateXsollaOrder)
	err := c.cc.Invoke(ctx, Lobby_CreateXsollaOrder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) VerifyMyCardOrder(ctx context.Context, in *ReqVerifyMyCardOrder, opts ...grpc.CallOption) (*ResCommon, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResCommon)
	err := c.cc.Invoke(ctx, Lobby_VerifyMyCardOrder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) VerificationIAPOrder(ctx context.Context, in *ReqVerificationIAPOrder, opts ...grpc.CallOption) (*ResVerificationIAPOrder, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResVerificationIAPOrder)
	err := c.cc.Invoke(ctx, Lobby_VerificationIAPOrder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) CreateYostarSDKOrder(ctx context.Context, in *ReqCreateYostarOrder, opts ...grpc.CallOption) (*ResCreateYostarOrder, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResCreateYostarOrder)
	err := c.cc.Invoke(ctx, Lobby_CreateYostarSDKOrder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) CreateBillingOrder(ctx context.Context, in *ReqCreateBillingOrder, opts ...grpc.CallOption) (*ResCreateBillingOrder, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResCreateBillingOrder)
	err := c.cc.Invoke(ctx, Lobby_CreateBillingOrder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) SolveGooglePlayOrder(ctx context.Context, in *ReqSolveGooglePlayOrder, opts ...grpc.CallOption) (*ResCommon, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResCommon)
	err := c.cc.Invoke(ctx, Lobby_SolveGooglePlayOrder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) SolveGooglePayOrderV3(ctx context.Context, in *ReqSolveGooglePlayOrderV3, opts ...grpc.CallOption) (*ResCommon, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResCommon)
	err := c.cc.Invoke(ctx, Lobby_SolveGooglePayOrderV3_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) DeliverAA32Order(ctx context.Context, in *ReqDeliverAA32Order, opts ...grpc.CallOption) (*ResCommon, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResCommon)
	err := c.cc.Invoke(ctx, Lobby_DeliverAA32Order_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) FetchMisc(ctx context.Context, in *ReqCommon, opts ...grpc.CallOption) (*ResMisc, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResMisc)
	err := c.cc.Invoke(ctx, Lobby_FetchMisc_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) ModifySignature(ctx context.Context, in *ReqModifySignature, opts ...grpc.CallOption) (*ResCommon, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResCommon)
	err := c.cc.Invoke(ctx, Lobby_ModifySignature_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) FetchIDCardInfo(ctx context.Context, in *ReqCommon, opts ...grpc.CallOption) (*ResIDCardInfo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResIDCardInfo)
	err := c.cc.Invoke(ctx, Lobby_FetchIDCardInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) UpdateIDCardInfo(ctx context.Context, in *ReqUpdateIDCardInfo, opts ...grpc.CallOption) (*ResCommon, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResCommon)
	err := c.cc.Invoke(ctx, Lobby_UpdateIDCardInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) FetchVipReward(ctx context.Context, in *ReqCommon, opts ...grpc.CallOption) (*ResVipReward, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResVipReward)
	err := c.cc.Invoke(ctx, Lobby_FetchVipReward_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) GainVipReward(ctx context.Context, in *ReqGainVipReward, opts ...grpc.CallOption) (*ResCommon, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResCommon)
	err := c.cc.Invoke(ctx, Lobby_GainVipReward_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) FetchRefundOrder(ctx context.Context, in *ReqCommon, opts ...grpc.CallOption) (*ResFetchRefundOrder, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResFetchRefundOrder)
	err := c.cc.Invoke(ctx, Lobby_FetchRefundOrder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) FetchCustomizedContestList(ctx context.Context, in *ReqFetchCustomizedContestList, opts ...grpc.CallOption) (*ResFetchCustomizedContestList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResFetchCustomizedContestList)
	err := c.cc.Invoke(ctx, Lobby_FetchCustomizedContestList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) FetchCustomizedContestAuthInfo(ctx context.Context, in *ReqFetchCustomizedContestAuthInfo, opts ...grpc.CallOption) (*ResFetchCustomizedContestAuthInfo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResFetchCustomizedContestAuthInfo)
	err := c.cc.Invoke(ctx, Lobby_FetchCustomizedContestAuthInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) EnterCustomizedContest(ctx context.Context, in *ReqEnterCustomizedContest, opts ...grpc.CallOption) (*ResEnterCustomizedContest, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResEnterCustomizedContest)
	err := c.cc.Invoke(ctx, Lobby_EnterCustomizedContest_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) LeaveCustomizedContest(ctx context.Context, in *ReqCommon, opts ...grpc.CallOption) (*ResCommon, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResCommon)
	err := c.cc.Invoke(ctx, Lobby_LeaveCustomizedContest_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) FetchCustomizedContestOnlineInfo(ctx context.Context, in *ReqFetchCustomizedContestOnlineInfo, opts ...grpc.CallOption) (*ResFetchCustomizedContestOnlineInfo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResFetchCustomizedContestOnlineInfo)
	err := c.cc.Invoke(ctx, Lobby_FetchCustomizedContestOnlineInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) FetchCustomizedContestByContestId(ctx context.Context, in *ReqFetchCustomizedContestByContestId, opts ...grpc.CallOption) (*ResFetchCustomizedContestByContestId, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResFetchCustomizedContestByContestId)
	err := c.cc.Invoke(ctx, Lobby_FetchCustomizedContestByContestId_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) SignupCustomizedContest(ctx context.Context, in *ReqSignupCustomizedContest, opts ...grpc.CallOption) (*ResSignupCustomizedContest, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResSignupCustomizedContest)
	err := c.cc.Invoke(ctx, Lobby_SignupCustomizedContest_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) StartCustomizedContest(ctx context.Context, in *ReqStartCustomizedContest, opts ...grpc.CallOption) (*ResCommon, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResCommon)
	err := c.cc.Invoke(ctx, Lobby_StartCustomizedContest_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) StopCustomizedContest(ctx context.Context, in *ReqStopCustomizedContest, opts ...grpc.CallOption) (*ResCommon, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResCommon)
	err := c.cc.Invoke(ctx, Lobby_StopCustomizedContest_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) JoinCustomizedContestChatRoom(ctx context.Context, in *ReqJoinCustomizedContestChatRoom, opts ...grpc.CallOption) (*ResJoinCustomizedContestChatRoom, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResJoinCustomizedContestChatRoom)
	err := c.cc.Invoke(ctx, Lobby_JoinCustomizedContestChatRoom_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) LeaveCustomizedContestChatRoom(ctx context.Context, in *ReqCommon, opts ...grpc.CallOption) (*ResCommon, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResCommon)
	err := c.cc.Invoke(ctx, Lobby_LeaveCustomizedContestChatRoom_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) SayChatMessage(ctx context.Context, in *ReqSayChatMessage, opts ...grpc.CallOption) (*ResCommon, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResCommon)
	err := c.cc.Invoke(ctx, Lobby_SayChatMessage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) FetchCustomizedContestGameRecords(ctx context.Context, in *ReqFetchCustomizedContestGameRecords, opts ...grpc.CallOption) (*ResFetchCustomizedContestGameRecords, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResFetchCustomizedContestGameRecords)
	err := c.cc.Invoke(ctx, Lobby_FetchCustomizedContestGameRecords_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) FetchCustomizedContestGameLiveList(ctx context.Context, in *ReqFetchCustomizedContestGameLiveList, opts ...grpc.CallOption) (*ResFetchCustomizedContestGameLiveList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResFetchCustomizedContestGameLiveList)
	err := c.cc.Invoke(ctx, Lobby_FetchCustomizedContestGameLiveList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) FollowCustomizedContest(ctx context.Context, in *ReqTargetCustomizedContest, opts ...grpc.CallOption) (*ResCommon, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResCommon)
	err := c.cc.Invoke(ctx, Lobby_FollowCustomizedContest_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) UnfollowCustomizedContest(ctx context.Context, in *ReqTargetCustomizedContest, opts ...grpc.CallOption) (*ResCommon, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResCommon)
	err := c.cc.Invoke(ctx, Lobby_UnfollowCustomizedContest_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) FetchActivityList(ctx context.Context, in *ReqCommon, opts ...grpc.CallOption) (*ResActivityList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResActivityList)
	err := c.cc.Invoke(ctx, Lobby_FetchActivityList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) FetchAccountActivityData(ctx context.Context, in *ReqCommon, opts ...grpc.CallOption) (*ResAccountActivityData, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResAccountActivityData)
	err := c.cc.Invoke(ctx, Lobby_FetchAccountActivityData_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) ExchangeActivityItem(ctx context.Context, in *ReqExchangeActivityItem, opts ...grpc.CallOption) (*ResExchangeActivityItem, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResExchangeActivityItem)
	err := c.cc.Invoke(ctx, Lobby_ExchangeActivityItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) CompleteActivityTask(ctx context.Context, in *ReqCompleteActivityTask, opts ...grpc.CallOption) (*ResCommon, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResCommon)
	err := c.cc.Invoke(ctx, Lobby_CompleteActivityTask_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) CompleteActivityTaskBatch(ctx context.Context, in *ReqCompleteActivityTaskBatch, opts ...grpc.CallOption) (*ResCommon, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResCommon)
	err := c.cc.Invoke(ctx, Lobby_CompleteActivityTaskBatch_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) CompleteActivityFlipTask(ctx context.Context, in *ReqCompleteActivityTask, opts ...grpc.CallOption) (*ResCommon, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResCommon)
	err := c.cc.Invoke(ctx, Lobby_CompleteActivityFlipTask_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) CompletePeriodActivityTask(ctx context.Context, in *ReqCompleteActivityTask, opts ...grpc.CallOption) (*ResCommon, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResCommon)
	err := c.cc.Invoke(ctx, Lobby_CompletePeriodActivityTask_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) CompletePeriodActivityTaskBatch(ctx context.Context, in *ReqCompletePeriodActivityTaskBatch, opts ...grpc.CallOption) (*ResCommon, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResCommon)
	err := c.cc.Invoke(ctx, Lobby_CompletePeriodActivityTaskBatch_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) CompleteRandomActivityTask(ctx context.Context, in *ReqCompleteActivityTask, opts ...grpc.CallOption) (*ResCommon, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResCommon)
	err := c.cc.Invoke(ctx, Lobby_CompleteRandomActivityTask_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) ReceiveActivityFlipTask(ctx context.Context, in *ReqReceiveActivityFlipTask, opts ...grpc.CallOption) (*ResReceiveActivityFlipTask, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResReceiveActivityFlipTask)
	err := c.cc.Invoke(ctx, Lobby_ReceiveActivityFlipTask_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) CompleteSegmentTaskReward(ctx context.Context, in *ReqCompleteSegmentTaskReward, opts ...grpc.CallOption) (*ResCompleteSegmentTaskReward, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResCompleteSegmentTaskReward)
	err := c.cc.Invoke(ctx, Lobby_CompleteSegmentTaskReward_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) FetchActivityFlipInfo(ctx context.Context, in *ReqFetchActivityFlipInfo, opts ...grpc.CallOption) (*ResFetchActivityFlipInfo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResFetchActivityFlipInfo)
	err := c.cc.Invoke(ctx, Lobby_FetchActivityFlipInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) GainAccumulatedPointActivityReward(ctx context.Context, in *ReqGainAccumulatedPointActivityReward, opts ...grpc.CallOption) (*ResCommon, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResCommon)
	err := c.cc.Invoke(ctx, Lobby_GainAccumulatedPointActivityReward_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) GainMultiPointActivityReward(ctx context.Context, in *ReqGainMultiPointActivityReward, opts ...grpc.CallOption) (*ResCommon, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResCommon)
	err := c.cc.Invoke(ctx, Lobby_GainMultiPointActivityReward_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) FetchRankPointLeaderboard(ctx context.Context, in *ReqFetchRankPointLeaderboard, opts ...grpc.CallOption) (*ResFetchRankPointLeaderboard, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResFetchRankPointLeaderboard)
	err := c.cc.Invoke(ctx, Lobby_FetchRankPointLeaderboard_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) GainRankPointReward(ctx context.Context, in *ReqGainRankPointReward, opts ...grpc.CallOption) (*ResCommon, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResCommon)
	err := c.cc.Invoke(ctx, Lobby_GainRankPointReward_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) RichmanActivityNextMove(ctx context.Context, in *ReqRichmanNextMove, opts ...grpc.CallOption) (*ResRichmanNextMove, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResRichmanNextMove)
	err := c.cc.Invoke(ctx, Lobby_RichmanActivityNextMove_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) RichmanAcitivitySpecialMove(ctx context.Context, in *ReqRichmanSpecialMove, opts ...grpc.CallOption) (*ResRichmanNextMove, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResRichmanNextMove)
	err := c.cc.Invoke(ctx, Lobby_RichmanAcitivitySpecialMove_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) RichmanActivityChestInfo(ctx context.Context, in *ReqRichmanChestInfo, opts ...grpc.CallOption) (*ResRichmanChestInfo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResRichmanChestInfo)
	err := c.cc.Invoke(ctx, Lobby_RichmanActivityChestInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) CreateGameObserveAuth(ctx context.Context, in *ReqCreateGameObserveAuth, opts ...grpc.CallOption) (*ResCreateGameObserveAuth, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResCreateGameObserveAuth)
	err := c.cc.Invoke(ctx, Lobby_CreateGameObserveAuth_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) RefreshGameObserveAuth(ctx context.Context, in *ReqRefreshGameObserveAuth, opts ...grpc.CallOption) (*ResRefreshGameObserveAuth, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResRefreshGameObserveAuth)
	err := c.cc.Invoke(ctx, Lobby_RefreshGameObserveAuth_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) FetchActivityBuff(ctx context.Context, in *ReqCommon, opts ...grpc.CallOption) (*ResActivityBuff, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResActivityBuff)
	err := c.cc.Invoke(ctx, Lobby_FetchActivityBuff_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) UpgradeActivityBuff(ctx context.Context, in *ReqUpgradeActivityBuff, opts ...grpc.CallOption) (*ResActivityBuff, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResActivityBuff)
	err := c.cc.Invoke(ctx, Lobby_UpgradeActivityBuff_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) UpgradeActivityLevel(ctx context.Context, in *ReqUpgradeActivityLevel, opts ...grpc.CallOption) (*ResUpgradeActivityLevel, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResUpgradeActivityLevel)
	err := c.cc.Invoke(ctx, Lobby_UpgradeActivityLevel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) ReceiveUpgradeActivityReward(ctx context.Context, in *ReqReceiveUpgradeActivityReward, opts ...grpc.CallOption) (*ResReceiveUpgradeActivityReward, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResReceiveUpgradeActivityReward)
	err := c.cc.Invoke(ctx, Lobby_ReceiveUpgradeActivityReward_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) UpgradeChallenge(ctx context.Context, in *ReqCommon, opts ...grpc.CallOption) (*ResUpgradeChallenge, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResUpgradeChallenge)
	err := c.cc.Invoke(ctx, Lobby_UpgradeChallenge_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) RefreshChallenge(ctx context.Context, in *ReqCommon, opts ...grpc.CallOption) (*ResRefreshChallenge, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResRefreshChallenge)
	err := c.cc.Invoke(ctx, Lobby_RefreshChallenge_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) FetchChallengeInfo(ctx context.Context, in *ReqCommon, opts ...grpc.CallOption) (*ResFetchChallengeInfo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResFetchChallengeInfo)
	err := c.cc.Invoke(ctx, Lobby_FetchChallengeInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) ForceCompleteChallengeTask(ctx context.Context, in *ReqForceCompleteChallengeTask, opts ...grpc.CallOption) (*ResCommon, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResCommon)
	err := c.cc.Invoke(ctx, Lobby_ForceCompleteChallengeTask_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) FetchChallengeSeason(ctx context.Context, in *ReqCommon, opts ...grpc.CallOption) (*ResChallengeSeasonInfo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResChallengeSeasonInfo)
	err := c.cc.Invoke(ctx, Lobby_FetchChallengeSeason_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) ReceiveChallengeRankReward(ctx context.Context, in *ReqReceiveChallengeRankReward, opts ...grpc.CallOption) (*ResReceiveChallengeRankReward, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResReceiveChallengeRankReward)
	err := c.cc.Invoke(ctx, Lobby_ReceiveChallengeRankReward_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) FetchABMatchInfo(ctx context.Context, in *ReqCommon, opts ...grpc.CallOption) (*ResFetchABMatch, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResFetchABMatch)
	err := c.cc.Invoke(ctx, Lobby_FetchABMatchInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) BuyInABMatch(ctx context.Context, in *ReqBuyInABMatch, opts ...grpc.CallOption) (*ResCommon, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResCommon)
	err := c.cc.Invoke(ctx, Lobby_BuyInABMatch_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) ReceiveABMatchReward(ctx context.Context, in *ReqCommon, opts ...grpc.CallOption) (*ResCommon, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResCommon)
	err := c.cc.Invoke(ctx, Lobby_ReceiveABMatchReward_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) QuitABMatch(ctx context.Context, in *ReqCommon, opts ...grpc.CallOption) (*ResCommon, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResCommon)
	err := c.cc.Invoke(ctx, Lobby_QuitABMatch_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) StartUnifiedMatch(ctx context.Context, in *ReqStartUnifiedMatch, opts ...grpc.CallOption) (*ResCommon, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResCommon)
	err := c.cc.Invoke(ctx, Lobby_StartUnifiedMatch_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) CancelUnifiedMatch(ctx context.Context, in *ReqCancelUnifiedMatch, opts ...grpc.CallOption) (*ResCommon, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResCommon)
	err := c.cc.Invoke(ctx, Lobby_CancelUnifiedMatch_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) FetchGamePointRank(ctx context.Context, in *ReqGamePointRank, opts ...grpc.CallOption) (*ResGamePointRank, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResGamePointRank)
	err := c.cc.Invoke(ctx, Lobby_FetchGamePointRank_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) FetchSelfGamePointRank(ctx context.Context, in *ReqGamePointRank, opts ...grpc.CallOption) (*ResFetchSelfGamePointRank, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResFetchSelfGamePointRank)
	err := c.cc.Invoke(ctx, Lobby_FetchSelfGamePointRank_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) ReadSNS(ctx context.Context, in *ReqReadSNS, opts ...grpc.CallOption) (*ResReadSNS, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResReadSNS)
	err := c.cc.Invoke(ctx, Lobby_ReadSNS_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) ReplySNS(ctx context.Context, in *ReqReplySNS, opts ...grpc.CallOption) (*ResReplySNS, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResReplySNS)
	err := c.cc.Invoke(ctx, Lobby_ReplySNS_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) LikeSNS(ctx context.Context, in *ReqLikeSNS, opts ...grpc.CallOption) (*ResLikeSNS, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResLikeSNS)
	err := c.cc.Invoke(ctx, Lobby_LikeSNS_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) DigMine(ctx context.Context, in *ReqDigMine, opts ...grpc.CallOption) (*ResDigMine, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResDigMine)
	err := c.cc.Invoke(ctx, Lobby_DigMine_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) FetchLastPrivacy(ctx context.Context, in *ReqFetchLastPrivacy, opts ...grpc.CallOption) (*ResFetchLastPrivacy, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResFetchLastPrivacy)
	err := c.cc.Invoke(ctx, Lobby_FetchLastPrivacy_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) CheckPrivacy(ctx context.Context, in *ReqCheckPrivacy, opts ...grpc.CallOption) (*ResCommon, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResCommon)
	err := c.cc.Invoke(ctx, Lobby_CheckPrivacy_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) ResponseCaptcha(ctx context.Context, in *ReqResponseCaptcha, opts ...grpc.CallOption) (*ResCommon, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResCommon)
	err := c.cc.Invoke(ctx, Lobby_ResponseCaptcha_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) FetchRPGBattleHistory(ctx context.Context, in *ReqFetchRPGBattleHistory, opts ...grpc.CallOption) (*ResFetchRPGBattleHistory, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResFetchRPGBattleHistory)
	err := c.cc.Invoke(ctx, Lobby_FetchRPGBattleHistory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) FetchRPGBattleHistoryV2(ctx context.Context, in *ReqFetchRPGBattleHistory, opts ...grpc.CallOption) (*ResFetchRPGBattleHistoryV2, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResFetchRPGBattleHistoryV2)
	err := c.cc.Invoke(ctx, Lobby_FetchRPGBattleHistoryV2_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) ReceiveRPGRewards(ctx context.Context, in *ReqReceiveRPGRewards, opts ...grpc.CallOption) (*ResReceiveRPGRewards, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResReceiveRPGRewards)
	err := c.cc.Invoke(ctx, Lobby_ReceiveRPGRewards_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) ReceiveRPGReward(ctx context.Context, in *ReqReceiveRPGReward, opts ...grpc.CallOption) (*ResReceiveRPGRewards, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResReceiveRPGRewards)
	err := c.cc.Invoke(ctx, Lobby_ReceiveRPGReward_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) BuyArenaTicket(ctx context.Context, in *ReqBuyArenaTicket, opts ...grpc.CallOption) (*ResCommon, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResCommon)
	err := c.cc.Invoke(ctx, Lobby_BuyArenaTicket_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) EnterArena(ctx context.Context, in *ReqEnterArena, opts ...grpc.CallOption) (*ResCommon, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResCommon)
	err := c.cc.Invoke(ctx, Lobby_EnterArena_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) ReceiveArenaReward(ctx context.Context, in *ReqArenaReward, opts ...grpc.CallOption) (*ResArenaReward, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResArenaReward)
	err := c.cc.Invoke(ctx, Lobby_ReceiveArenaReward_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) FetchOBToken(ctx context.Context, in *ReqFetchOBToken, opts ...grpc.CallOption) (*ResFetchOBToken, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResFetchOBToken)
	err := c.cc.Invoke(ctx, Lobby_FetchOBToken_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) ReceiveCharacterRewards(ctx context.Context, in *ReqReceiveCharacterRewards, opts ...grpc.CallOption) (*ResReceiveCharacterRewards, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResReceiveCharacterRewards)
	err := c.cc.Invoke(ctx, Lobby_ReceiveCharacterRewards_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) FeedActivityFeed(ctx context.Context, in *ReqFeedActivityFeed, opts ...grpc.CallOption) (*ResFeedActivityFeed, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResFeedActivityFeed)
	err := c.cc.Invoke(ctx, Lobby_FeedActivityFeed_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) SendActivityGiftToFriend(ctx context.Context, in *ReqSendActivityGiftToFriend, opts ...grpc.CallOption) (*ResSendActivityGiftToFriend, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResSendActivityGiftToFriend)
	err := c.cc.Invoke(ctx, Lobby_SendActivityGiftToFriend_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) ReceiveActivityGift(ctx context.Context, in *ReqReceiveActivityGift, opts ...grpc.CallOption) (*ResCommon, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResCommon)
	err := c.cc.Invoke(ctx, Lobby_ReceiveActivityGift_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) ReceiveAllActivityGift(ctx context.Context, in *ReqReceiveAllActivityGift, opts ...grpc.CallOption) (*ResReceiveAllActivityGift, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResReceiveAllActivityGift)
	err := c.cc.Invoke(ctx, Lobby_ReceiveAllActivityGift_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) FetchFriendGiftActivityData(ctx context.Context, in *ReqFetchFriendGiftActivityData, opts ...grpc.CallOption) (*ResFetchFriendGiftActivityData, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResFetchFriendGiftActivityData)
	err := c.cc.Invoke(ctx, Lobby_FetchFriendGiftActivityData_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) OpenPreChestItem(ctx context.Context, in *ReqOpenPreChestItem, opts ...grpc.CallOption) (*ResOpenPreChestItem, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResOpenPreChestItem)
	err := c.cc.Invoke(ctx, Lobby_OpenPreChestItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) FetchVoteActivity(ctx context.Context, in *ReqFetchVoteActivity, opts ...grpc.CallOption) (*ResFetchVoteActivity, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResFetchVoteActivity)
	err := c.cc.Invoke(ctx, Lobby_FetchVoteActivity_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) VoteActivity(ctx context.Context, in *ReqVoteActivity, opts ...grpc.CallOption) (*ResVoteActivity, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResVoteActivity)
	err := c.cc.Invoke(ctx, Lobby_VoteActivity_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) UnlockActivitySpot(ctx context.Context, in *ReqUnlockActivitySpot, opts ...grpc.CallOption) (*ResCommon, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResCommon)
	err := c.cc.Invoke(ctx, Lobby_UnlockActivitySpot_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) UnlockActivitySpotEnding(ctx context.Context, in *ReqUnlockActivitySpotEnding, opts ...grpc.CallOption) (*ResCommon, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResCommon)
	err := c.cc.Invoke(ctx, Lobby_UnlockActivitySpotEnding_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) ReceiveActivitySpotReward(ctx context.Context, in *ReqReceiveActivitySpotReward, opts ...grpc.CallOption) (*ResReceiveActivitySpotReward, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResReceiveActivitySpotReward)
	err := c.cc.Invoke(ctx, Lobby_ReceiveActivitySpotReward_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) DeleteAccount(ctx context.Context, in *ReqCommon, opts ...grpc.CallOption) (*ResDeleteAccount, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResDeleteAccount)
	err := c.cc.Invoke(ctx, Lobby_DeleteAccount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) CancelDeleteAccount(ctx context.Context, in *ReqCommon, opts ...grpc.CallOption) (*ResCommon, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResCommon)
	err := c.cc.Invoke(ctx, Lobby_CancelDeleteAccount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) LogReport(ctx context.Context, in *ReqLogReport, opts ...grpc.CallOption) (*ResCommon, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResCommon)
	err := c.cc.Invoke(ctx, Lobby_LogReport_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) BindOauth2(ctx context.Context, in *ReqBindOauth2, opts ...grpc.CallOption) (*ResCommon, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResCommon)
	err := c.cc.Invoke(ctx, Lobby_BindOauth2_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) FetchOauth2Info(ctx context.Context, in *ReqFetchOauth2, opts ...grpc.CallOption) (*ResFetchOauth2, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResFetchOauth2)
	err := c.cc.Invoke(ctx, Lobby_FetchOauth2Info_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) SetLoadingImage(ctx context.Context, in *ReqSetLoadingImage, opts ...grpc.CallOption) (*ResCommon, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResCommon)
	err := c.cc.Invoke(ctx, Lobby_SetLoadingImage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) FetchShopInterval(ctx context.Context, in *ReqCommon, opts ...grpc.CallOption) (*ResFetchShopInterval, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResFetchShopInterval)
	err := c.cc.Invoke(ctx, Lobby_FetchShopInterval_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) FetchActivityInterval(ctx context.Context, in *ReqCommon, opts ...grpc.CallOption) (*ResFetchActivityInterval, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResFetchActivityInterval)
	err := c.cc.Invoke(ctx, Lobby_FetchActivityInterval_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) FetchRecentFriend(ctx context.Context, in *ReqCommon, opts ...grpc.CallOption) (*ResFetchrecentFriend, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResFetchrecentFriend)
	err := c.cc.Invoke(ctx, Lobby_FetchRecentFriend_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) OpenGacha(ctx context.Context, in *ReqOpenGacha, opts ...grpc.CallOption) (*ResOpenGacha, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResOpenGacha)
	err := c.cc.Invoke(ctx, Lobby_OpenGacha_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) TaskRequest(ctx context.Context, in *ReqTaskRequest, opts ...grpc.CallOption) (*ResCommon, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResCommon)
	err := c.cc.Invoke(ctx, Lobby_TaskRequest_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) SimulationActivityTrain(ctx context.Context, in *ReqSimulationActivityTrain, opts ...grpc.CallOption) (*ResSimulationActivityTrain, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResSimulationActivityTrain)
	err := c.cc.Invoke(ctx, Lobby_SimulationActivityTrain_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) FetchSimulationGameRecord(ctx context.Context, in *ReqFetchSimulationGameRecord, opts ...grpc.CallOption) (*ResFetchSimulationGameRecord, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResFetchSimulationGameRecord)
	err := c.cc.Invoke(ctx, Lobby_FetchSimulationGameRecord_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) StartSimulationActivityGame(ctx context.Context, in *ReqStartSimulationActivityGame, opts ...grpc.CallOption) (*ResStartSimulationActivityGame, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResStartSimulationActivityGame)
	err := c.cc.Invoke(ctx, Lobby_StartSimulationActivityGame_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) FetchSimulationGameRank(ctx context.Context, in *ReqFetchSimulationGameRank, opts ...grpc.CallOption) (*ResFetchSimulationGameRank, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResFetchSimulationGameRank)
	err := c.cc.Invoke(ctx, Lobby_FetchSimulationGameRank_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) GenerateCombiningCraft(ctx context.Context, in *ReqGenerateCombiningCraft, opts ...grpc.CallOption) (*ResGenerateCombiningCraft, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResGenerateCombiningCraft)
	err := c.cc.Invoke(ctx, Lobby_GenerateCombiningCraft_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) MoveCombiningCraft(ctx context.Context, in *ReqMoveCombiningCraft, opts ...grpc.CallOption) (*ResMoveCombiningCraft, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResMoveCombiningCraft)
	err := c.cc.Invoke(ctx, Lobby_MoveCombiningCraft_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) CombiningRecycleCraft(ctx context.Context, in *ReqCombiningRecycleCraft, opts ...grpc.CallOption) (*ResCombiningRecycleCraft, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResCombiningRecycleCraft)
	err := c.cc.Invoke(ctx, Lobby_CombiningRecycleCraft_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) RecoverCombiningRecycle(ctx context.Context, in *ReqRecoverCombiningRecycle, opts ...grpc.CallOption) (*ResRecoverCombiningRecycle, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResRecoverCombiningRecycle)
	err := c.cc.Invoke(ctx, Lobby_RecoverCombiningRecycle_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) FinishCombiningOrder(ctx context.Context, in *ReqFinishCombiningOrder, opts ...grpc.CallOption) (*ResFinishCombiningOrder, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResFinishCombiningOrder)
	err := c.cc.Invoke(ctx, Lobby_FinishCombiningOrder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) UpgradeVillageBuilding(ctx context.Context, in *ReqUpgradeVillageBuilding, opts ...grpc.CallOption) (*ResCommon, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResCommon)
	err := c.cc.Invoke(ctx, Lobby_UpgradeVillageBuilding_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) ReceiveVillageBuildingReward(ctx context.Context, in *ReqReceiveVillageBuildingReward, opts ...grpc.CallOption) (*ResReceiveVillageBuildingReward, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResReceiveVillageBuildingReward)
	err := c.cc.Invoke(ctx, Lobby_ReceiveVillageBuildingReward_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) StartVillageTrip(ctx context.Context, in *ReqStartVillageTrip, opts ...grpc.CallOption) (*ResCommon, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResCommon)
	err := c.cc.Invoke(ctx, Lobby_StartVillageTrip_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) ReceiveVillageTripReward(ctx context.Context, in *ReqReceiveVillageTripReward, opts ...grpc.CallOption) (*ResReceiveVillageTripReward, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResReceiveVillageTripReward)
	err := c.cc.Invoke(ctx, Lobby_ReceiveVillageTripReward_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) CompleteVillageTask(ctx context.Context, in *ReqCompleteVillageTask, opts ...grpc.CallOption) (*ResCompleteVillageTask, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResCompleteVillageTask)
	err := c.cc.Invoke(ctx, Lobby_CompleteVillageTask_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) GetFriendVillageData(ctx context.Context, in *ReqGetFriendVillageData, opts ...grpc.CallOption) (*ResGetFriendVillageData, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResGetFriendVillageData)
	err := c.cc.Invoke(ctx, Lobby_GetFriendVillageData_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) SetVillageWorker(ctx context.Context, in *ReqSetVillageWorker, opts ...grpc.CallOption) (*ResSetVillageWorker, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResSetVillageWorker)
	err := c.cc.Invoke(ctx, Lobby_SetVillageWorker_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) NextRoundVillage(ctx context.Context, in *ReqNextRoundVillage, opts ...grpc.CallOption) (*ResNextRoundVillage, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResNextRoundVillage)
	err := c.cc.Invoke(ctx, Lobby_NextRoundVillage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) ResolveFestivalActivityProposal(ctx context.Context, in *ReqResolveFestivalActivityProposal, opts ...grpc.CallOption) (*ResResolveFestivalActivityProposal, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResResolveFestivalActivityProposal)
	err := c.cc.Invoke(ctx, Lobby_ResolveFestivalActivityProposal_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) ResolveFestivalActivityEvent(ctx context.Context, in *ReqResolveFestivalActivityEvent, opts ...grpc.CallOption) (*ResResolveFestivalActivityEvent, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResResolveFestivalActivityEvent)
	err := c.cc.Invoke(ctx, Lobby_ResolveFestivalActivityEvent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) BuyFestivalProposal(ctx context.Context, in *ReqBuyFestivalProposal, opts ...grpc.CallOption) (*ResBuyFestivalProposal, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResBuyFestivalProposal)
	err := c.cc.Invoke(ctx, Lobby_BuyFestivalProposal_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) IslandActivityMove(ctx context.Context, in *ReqIslandActivityMove, opts ...grpc.CallOption) (*ResCommon, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResCommon)
	err := c.cc.Invoke(ctx, Lobby_IslandActivityMove_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) IslandActivityBuy(ctx context.Context, in *ReqIslandActivityBuy, opts ...grpc.CallOption) (*ResCommon, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResCommon)
	err := c.cc.Invoke(ctx, Lobby_IslandActivityBuy_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) IslandActivitySell(ctx context.Context, in *ReqIslandActivitySell, opts ...grpc.CallOption) (*ResCommon, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResCommon)
	err := c.cc.Invoke(ctx, Lobby_IslandActivitySell_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) IslandActivityTidyBag(ctx context.Context, in *ReqIslandActivityTidyBag, opts ...grpc.CallOption) (*ResCommon, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResCommon)
	err := c.cc.Invoke(ctx, Lobby_IslandActivityTidyBag_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) IslandActivityUnlockBagGrid(ctx context.Context, in *ReqIslandActivityUnlockBagGrid, opts ...grpc.CallOption) (*ResCommon, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResCommon)
	err := c.cc.Invoke(ctx, Lobby_IslandActivityUnlockBagGrid_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) CreateCustomizedContest(ctx context.Context, in *ReqCreateCustomizedContest, opts ...grpc.CallOption) (*ResCreateCustomizedContest, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResCreateCustomizedContest)
	err := c.cc.Invoke(ctx, Lobby_CreateCustomizedContest_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) FetchManagerCustomizedContestList(ctx context.Context, in *ReqFetchmanagerCustomizedContestList, opts ...grpc.CallOption) (*ResFetchManagerCustomizedContestList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResFetchManagerCustomizedContestList)
	err := c.cc.Invoke(ctx, Lobby_FetchManagerCustomizedContestList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) FetchManagerCustomizedContest(ctx context.Context, in *ReqFetchManagerCustomizedContest, opts ...grpc.CallOption) (*ResFetchManagerCustomizedContest, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResFetchManagerCustomizedContest)
	err := c.cc.Invoke(ctx, Lobby_FetchManagerCustomizedContest_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) UpdateManagerCustomizedContest(ctx context.Context, in *ReqUpdateManagerCustomizedContest, opts ...grpc.CallOption) (*ResCommon, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResCommon)
	err := c.cc.Invoke(ctx, Lobby_UpdateManagerCustomizedContest_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) FetchContestPlayerRank(ctx context.Context, in *ReqFetchContestPlayerRank, opts ...grpc.CallOption) (*ResFetchContestPlayerRank, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResFetchContestPlayerRank)
	err := c.cc.Invoke(ctx, Lobby_FetchContestPlayerRank_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) FetchReadyPlayerList(ctx context.Context, in *ReqFetchReadyPlayerList, opts ...grpc.CallOption) (*ResFetchReadyPlayerList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResFetchReadyPlayerList)
	err := c.cc.Invoke(ctx, Lobby_FetchReadyPlayerList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) CreateGamePlan(ctx context.Context, in *ReqCreateGamePlan, opts ...grpc.CallOption) (*ResCommon, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResCommon)
	err := c.cc.Invoke(ctx, Lobby_CreateGamePlan_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) GenerateContestManagerLoginCode(ctx context.Context, in *ReqCommon, opts ...grpc.CallOption) (*ResGenerateContestManagerLoginCode, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResGenerateContestManagerLoginCode)
	err := c.cc.Invoke(ctx, Lobby_GenerateContestManagerLoginCode_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) AmuletActivityStartGame(ctx context.Context, in *ReqAmuletActivityStartGame, opts ...grpc.CallOption) (*ResAmuletActivityStartGame, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResAmuletActivityStartGame)
	err := c.cc.Invoke(ctx, Lobby_AmuletActivityStartGame_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) AmuletActivityOperate(ctx context.Context, in *ReqAmuletActivityOperate, opts ...grpc.CallOption) (*ResAmuletActivityOperate, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResAmuletActivityOperate)
	err := c.cc.Invoke(ctx, Lobby_AmuletActivityOperate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) AmuletActivityChangeHands(ctx context.Context, in *ReqAmuletActivityChangeHands, opts ...grpc.CallOption) (*ResAmuletActivityChangeHands, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResAmuletActivityChangeHands)
	err := c.cc.Invoke(ctx, Lobby_AmuletActivityChangeHands_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) AmuletActivityUpgrade(ctx context.Context, in *ReqAmuletActivityUpgrade, opts ...grpc.CallOption) (*ResAmuletActivityUpgrade, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResAmuletActivityUpgrade)
	err := c.cc.Invoke(ctx, Lobby_AmuletActivityUpgrade_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) AmuletActivityBuy(ctx context.Context, in *ReqAmuletActivityBuy, opts ...grpc.CallOption) (*ResAmuletActivityBuy, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResAmuletActivityBuy)
	err := c.cc.Invoke(ctx, Lobby_AmuletActivityBuy_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) AmuletActivitySelectPack(ctx context.Context, in *ReqAmuletActivitySelectPack, opts ...grpc.CallOption) (*ResAmuletActivitySelectPack, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResAmuletActivitySelectPack)
	err := c.cc.Invoke(ctx, Lobby_AmuletActivitySelectPack_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) AmuletActivitySellEffect(ctx context.Context, in *ReqAmuletActivitySellEffect, opts ...grpc.CallOption) (*ResAmuletActivitySellEffect, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResAmuletActivitySellEffect)
	err := c.cc.Invoke(ctx, Lobby_AmuletActivitySellEffect_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) AmuletActivityEffectSort(ctx context.Context, in *ReqAmuletActivityEffectSort, opts ...grpc.CallOption) (*ResCommon, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResCommon)
	err := c.cc.Invoke(ctx, Lobby_AmuletActivityEffectSort_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) AmuletActivityGiveup(ctx context.Context, in *ReqAmuletActivityGiveup, opts ...grpc.CallOption) (*ResCommon, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResCommon)
	err := c.cc.Invoke(ctx, Lobby_AmuletActivityGiveup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) AmuletActivityRefreshShop(ctx context.Context, in *ReqAmuletActivityRefreshShop, opts ...grpc.CallOption) (*ResAmuletActivityRefreshShop, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResAmuletActivityRefreshShop)
	err := c.cc.Invoke(ctx, Lobby_AmuletActivityRefreshShop_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) AmuletActivitySelectFreeEffect(ctx context.Context, in *ReqAmuletActivitySelectFreeEffect, opts ...grpc.CallOption) (*ResAmuletActivitySelectFreeEffect, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResAmuletActivitySelectFreeEffect)
	err := c.cc.Invoke(ctx, Lobby_AmuletActivitySelectFreeEffect_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) AmuletActivityUpgradeShopBuff(ctx context.Context, in *ReqAmuletActivityUpgradeShopBuff, opts ...grpc.CallOption) (*ResAmuletActivityUpgradeShopBuff, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResAmuletActivityUpgradeShopBuff)
	err := c.cc.Invoke(ctx, Lobby_AmuletActivityUpgradeShopBuff_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) AmuletActivityEndShopping(ctx context.Context, in *ReqAmuletActivityEndShopping, opts ...grpc.CallOption) (*ResAmuletActivityEndShopping, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResAmuletActivityEndShopping)
	err := c.cc.Invoke(ctx, Lobby_AmuletActivityEndShopping_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) AmuletActivitySetSkillLevel(ctx context.Context, in *ReqAmuletActivitySetSkillLevel, opts ...grpc.CallOption) (*ResCommon, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResCommon)
	err := c.cc.Invoke(ctx, Lobby_AmuletActivitySetSkillLevel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) AmuletActivityMaintainInfo(ctx context.Context, in *ReqCommon, opts ...grpc.CallOption) (*ResAmuletActivityMaintainInfo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResAmuletActivityMaintainInfo)
	err := c.cc.Invoke(ctx, Lobby_AmuletActivityMaintainInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) StoryActivityUnlock(ctx context.Context, in *ReqStoryActivityUnlock, opts ...grpc.CallOption) (*ResCommon, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResCommon)
	err := c.cc.Invoke(ctx, Lobby_StoryActivityUnlock_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) StoryActivityUnlockEnding(ctx context.Context, in *ReqStoryActivityUnlockEnding, opts ...grpc.CallOption) (*ResCommon, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResCommon)
	err := c.cc.Invoke(ctx, Lobby_StoryActivityUnlockEnding_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) StoryActivityReceiveEndingReward(ctx context.Context, in *ReqStoryActivityReceiveEndingReward, opts ...grpc.CallOption) (*ResStoryReward, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResStoryReward)
	err := c.cc.Invoke(ctx, Lobby_StoryActivityReceiveEndingReward_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) StoryActivityReceiveFinishReward(ctx context.Context, in *ReqStoryActivityReceiveFinishReward, opts ...grpc.CallOption) (*ResStoryReward, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResStoryReward)
	err := c.cc.Invoke(ctx, Lobby_StoryActivityReceiveFinishReward_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) StoryActivityReceiveAllFinishReward(ctx context.Context, in *ReqStoryActivityReceiveAllFinishReward, opts ...grpc.CallOption) (*ResStoryReward, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResStoryReward)
	err := c.cc.Invoke(ctx, Lobby_StoryActivityReceiveAllFinishReward_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) StoryActivityUnlockEndingAndReceive(ctx context.Context, in *ReqStoryActivityUnlockEndingAndReceive, opts ...grpc.CallOption) (*ResStoryActivityUnlockEndingAndReceive, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResStoryActivityUnlockEndingAndReceive)
	err := c.cc.Invoke(ctx, Lobby_StoryActivityUnlockEndingAndReceive_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) FetchActivityRank(ctx context.Context, in *ReqFetchActivityRank, opts ...grpc.CallOption) (*ResFetchActivityRank, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResFetchActivityRank)
	err := c.cc.Invoke(ctx, Lobby_FetchActivityRank_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) SetVerifiedHidden(ctx context.Context, in *ReqSetVerifiedHidden, opts ...grpc.CallOption) (*ResCommon, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResCommon)
	err := c.cc.Invoke(ctx, Lobby_SetVerifiedHidden_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) FetchQuestionnaireList(ctx context.Context, in *ReqFetchQuestionnaireList, opts ...grpc.CallOption) (*ResFetchQuestionnaireList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResFetchQuestionnaireList)
	err := c.cc.Invoke(ctx, Lobby_FetchQuestionnaireList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) FetchQuestionnaireDetail(ctx context.Context, in *ReqFetchQuestionnaireDetail, opts ...grpc.CallOption) (*ResFetchQuestionnaireDetail, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResFetchQuestionnaireDetail)
	err := c.cc.Invoke(ctx, Lobby_FetchQuestionnaireDetail_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) SubmitQuestionnaire(ctx context.Context, in *ReqSubmitQuestionnaire, opts ...grpc.CallOption) (*ResCommon, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResCommon)
	err := c.cc.Invoke(ctx, Lobby_SubmitQuestionnaire_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LobbyServer is the server API for Lobby service.
// All implementations must embed UnimplementedLobbyServer
// for forward compatibility.
type LobbyServer interface {
	FetchConnectionInfo(context.Context, *ReqCommon) (*ResConnectionInfo, error)
	FetchQueueInfo(context.Context, *ReqCommon) (*ResFetchQueueInfo, error)
	CancelQueue(context.Context, *ReqCommon) (*ResCommon, error)
	OpenidCheck(context.Context, *ReqOpenidCheck) (*ResOauth2Check, error)
	Signup(context.Context, *ReqSignupAccount) (*ResSignupAccount, error)
	Login(context.Context, *ReqLogin) (*ResLogin, error)
	FetchInfo(context.Context, *ReqCommon) (*ResFetchInfo, error)
	LoginSuccess(context.Context, *ReqCommon) (*ResCommon, error)
	FetchServerMaintenanceInfo(context.Context, *ReqCommon) (*ResFetchServerMaintenanceInfo, error)
	EmailLogin(context.Context, *ReqEmailLogin) (*ResLogin, error)
	Oauth2Auth(context.Context, *ReqOauth2Auth) (*ResOauth2Auth, error)
	Oauth2Check(context.Context, *ReqOauth2Check) (*ResOauth2Check, error)
	Oauth2Signup(context.Context, *ReqOauth2Signup) (*ResOauth2Signup, error)
	Oauth2Login(context.Context, *ReqOauth2Login) (*ResLogin, error)
	DmmPreLogin(context.Context, *ReqDMMPreLogin) (*ResDMMPreLogin, error)
	CreatePhoneVerifyCode(context.Context, *ReqCreatePhoneVerifyCode) (*ResCommon, error)
	CreateEmailVerifyCode(context.Context, *ReqCreateEmailVerifyCode) (*ResCommon, error)
	VerfifyCodeForSecure(context.Context, *ReqVerifyCodeForSecure) (*ResVerfiyCodeForSecure, error)
	BindPhoneNumber(context.Context, *ReqBindPhoneNumber) (*ResCommon, error)
	UnbindPhoneNumber(context.Context, *ReqUnbindPhoneNumber) (*ResCommon, error)
	FetchPhoneLoginBind(context.Context, *ReqCommon) (*ResFetchPhoneLoginBind, error)
	CreatePhoneLoginBind(context.Context, *ReqCreatePhoneLoginBind) (*ResCommon, error)
	BindEmail(context.Context, *ReqBindEmail) (*ResCommon, error)
	ModifyPassword(context.Context, *ReqModifyPassword) (*ResCommon, error)
	BindAccount(context.Context, *ReqBindAccount) (*ResCommon, error)
	Logout(context.Context, *ReqLogout) (*ResLogout, error)
	Heatbeat(context.Context, *ReqHeatBeat) (*ResCommon, error)
	LoginBeat(context.Context, *ReqLoginBeat) (*ResCommon, error)
	CreateNickname(context.Context, *ReqCreateNickname) (*ResCommon, error)
	ModifyNickname(context.Context, *ReqModifyNickname) (*ResCommon, error)
	ModifyBirthday(context.Context, *ReqModifyBirthday) (*ResCommon, error)
	FetchRoom(context.Context, *ReqCommon) (*ResSelfRoom, error)
	FetchGamingInfo(context.Context, *ReqCommon) (*ResFetchGamingInfo, error)
	CreateRoom(context.Context, *ReqCreateRoom) (*ResCreateRoom, error)
	JoinRoom(context.Context, *ReqJoinRoom) (*ResJoinRoom, error)
	LeaveRoom(context.Context, *ReqCommon) (*ResCommon, error)
	ReadyPlay(context.Context, *ReqRoomReady) (*ResCommon, error)
	DressingStatus(context.Context, *ReqRoomDressing) (*ResCommon, error)
	StartRoom(context.Context, *ReqRoomStart) (*ResCommon, error)
	RoomKickPlayer(context.Context, *ReqRoomKickPlayer) (*ResCommon, error)
	ModifyRoom(context.Context, *ReqModifyRoom) (*ResCommon, error)
	AddRoomRobot(context.Context, *ReqAddRoomRobot) (*ResCommon, error)
	MatchGame(context.Context, *ReqJoinMatchQueue) (*ResCommon, error)
	CancelMatch(context.Context, *ReqCancelMatchQueue) (*ResCommon, error)
	FetchAccountInfo(context.Context, *ReqAccountInfo) (*ResAccountInfo, error)
	ChangeAvatar(context.Context, *ReqChangeAvatar) (*ResCommon, error)
	ReceiveVersionReward(context.Context, *ReqCommon) (*ResCommon, error)
	FetchAccountStatisticInfo(context.Context, *ReqAccountStatisticInfo) (*ResAccountStatisticInfo, error)
	FetchAccountChallengeRankInfo(context.Context, *ReqAccountInfo) (*ResAccountChallengeRankInfo, error)
	FetchAccountCharacterInfo(context.Context, *ReqCommon) (*ResAccountCharacterInfo, error)
	ShopPurchase(context.Context, *ReqShopPurchase) (*ResShopPurchase, error)
	FetchGameRecord(context.Context, *ReqGameRecord) (*ResGameRecord, error)
	ReadGameRecord(context.Context, *ReqGameRecord) (*ResCommon, error)
	FetchGameRecordList(context.Context, *ReqGameRecordList) (*ResGameRecordList, error)
	FetchGameRecordListV2(context.Context, *ReqGameRecordListV2) (*ResGameRecordListV2, error)
	FetchNextGameRecordList(context.Context, *ReqNextGameRecordList) (*ResNextGameRecordList, error)
	FetchCollectedGameRecordList(context.Context, *ReqCommon) (*ResCollectedGameRecordList, error)
	FetchGameRecordsDetail(context.Context, *ReqGameRecordsDetail) (*ResGameRecordsDetail, error)
	FetchGameRecordsDetailV2(context.Context, *ReqGameRecordsDetailV2) (*ResGameRecordsDetailV2, error)
	AddCollectedGameRecord(context.Context, *ReqAddCollectedGameRecord) (*ResAddCollectedGameRecord, error)
	RemoveCollectedGameRecord(context.Context, *ReqRemoveCollectedGameRecord) (*ResRemoveCollectedGameRecord, error)
	ChangeCollectedGameRecordRemarks(context.Context, *ReqChangeCollectedGameRecordRemarks) (*ResChangeCollectedGameRecordRemarks, error)
	FetchLevelLeaderboard(context.Context, *ReqLevelLeaderboard) (*ResLevelLeaderboard, error)
	FetchChallengeLeaderboard(context.Context, *ReqChallangeLeaderboard) (*ResChallengeLeaderboard, error)
	FetchMutiChallengeLevel(context.Context, *ReqMutiChallengeLevel) (*ResMutiChallengeLevel, error)
	FetchMultiAccountBrief(context.Context, *ReqMultiAccountId) (*ResMultiAccountBrief, error)
	FetchFriendList(context.Context, *ReqCommon) (*ResFriendList, error)
	FetchFriendApplyList(context.Context, *ReqCommon) (*ResFriendApplyList, error)
	ApplyFriend(context.Context, *ReqApplyFriend) (*ResCommon, error)
	HandleFriendApply(context.Context, *ReqHandleFriendApply) (*ResCommon, error)
	RemoveFriend(context.Context, *ReqRemoveFriend) (*ResCommon, error)
	SearchAccountById(context.Context, *ReqSearchAccountById) (*ResSearchAccountById, error)
	SearchAccountByPattern(context.Context, *ReqSearchAccountByPattern) (*ResSearchAccountByPattern, error)
	FetchAccountState(context.Context, *ReqAccountList) (*ResAccountStates, error)
	FetchBagInfo(context.Context, *ReqCommon) (*ResBagInfo, error)
	UseBagItem(context.Context, *ReqUseBagItem) (*ResCommon, error)
	OpenManualItem(context.Context, *ReqOpenManualItem) (*ResCommon, error)
	OpenRandomRewardItem(context.Context, *ReqOpenRandomRewardItem) (*ResOpenRandomRewardItem, error)
	OpenAllRewardItem(context.Context, *ReqOpenAllRewardItem) (*ResOpenAllRewardItem, error)
	ComposeShard(context.Context, *ReqComposeShard) (*ResCommon, error)
	FetchAnnouncement(context.Context, *ReqFetchAnnouncement) (*ResAnnouncement, error)
	ReadAnnouncement(context.Context, *ReqReadAnnouncement) (*ResCommon, error)
	FetchMailInfo(context.Context, *ReqCommon) (*ResMailInfo, error)
	ReadMail(context.Context, *ReqReadMail) (*ResCommon, error)
	DeleteMail(context.Context, *ReqDeleteMail) (*ResCommon, error)
	TakeAttachmentFromMail(context.Context, *ReqTakeAttachment) (*ResCommon, error)
	ReceiveAchievementReward(context.Context, *ReqReceiveAchievementReward) (*ResReceiveAchievementReward, error)
	ReceiveAchievementGroupReward(context.Context, *ReqReceiveAchievementGroupReward) (*ResReceiveAchievementGroupReward, error)
	FetchAchievementRate(context.Context, *ReqCommon) (*ResFetchAchievementRate, error)
	FetchAchievement(context.Context, *ReqCommon) (*ResAchievement, error)
	BuyShiLian(context.Context, *ReqBuyShiLian) (*ResCommon, error)
	MatchShiLian(context.Context, *ReqCommon) (*ResCommon, error)
	GoNextShiLian(context.Context, *ReqCommon) (*ResCommon, error)
	UpdateClientValue(context.Context, *ReqUpdateClientValue) (*ResCommon, error)
	FetchClientValue(context.Context, *ReqCommon) (*ResClientValue, error)
	ClientMessage(context.Context, *ReqClientMessage) (*ResCommon, error)
	FetchCurrentMatchInfo(context.Context, *ReqCurrentMatchInfo) (*ResCurrentMatchInfo, error)
	UserComplain(context.Context, *ReqUserComplain) (*ResCommon, error)
	FetchReviveCoinInfo(context.Context, *ReqCommon) (*ResReviveCoinInfo, error)
	GainReviveCoin(context.Context, *ReqCommon) (*ResCommon, error)
	FetchDailyTask(context.Context, *ReqCommon) (*ResDailyTask, error)
	RefreshDailyTask(context.Context, *ReqRefreshDailyTask) (*ResRefreshDailyTask, error)
	UseGiftCode(context.Context, *ReqUseGiftCode) (*ResUseGiftCode, error)
	UseSpecialGiftCode(context.Context, *ReqUseGiftCode) (*ResUseSpecialGiftCode, error)
	FetchTitleList(context.Context, *ReqCommon) (*ResTitleList, error)
	UseTitle(context.Context, *ReqUseTitle) (*ResCommon, error)
	SendClientMessage(context.Context, *ReqSendClientMessage) (*ResCommon, error)
	FetchGameLiveInfo(context.Context, *ReqGameLiveInfo) (*ResGameLiveInfo, error)
	FetchGameLiveLeftSegment(context.Context, *ReqGameLiveLeftSegment) (*ResGameLiveLeftSegment, error)
	FetchGameLiveList(context.Context, *ReqGameLiveList) (*ResGameLiveList, error)
	FetchCommentSetting(context.Context, *ReqCommon) (*ResCommentSetting, error)
	UpdateCommentSetting(context.Context, *ReqUpdateCommentSetting) (*ResCommon, error)
	FetchCommentList(context.Context, *ReqFetchCommentList) (*ResFetchCommentList, error)
	FetchCommentContent(context.Context, *ReqFetchCommentContent) (*ResFetchCommentContent, error)
	LeaveComment(context.Context, *ReqLeaveComment) (*ResCommon, error)
	DeleteComment(context.Context, *ReqDeleteComment) (*ResCommon, error)
	UpdateReadComment(context.Context, *ReqUpdateReadComment) (*ResCommon, error)
	FetchRollingNotice(context.Context, *ReqFetchRollingNotice) (*ResFetchRollingNotice, error)
	FetchMaintainNotice(context.Context, *ReqCommon) (*ResFetchMaintainNotice, error)
	FetchServerTime(context.Context, *ReqCommon) (*ResServerTime, error)
	FetchPlatformProducts(context.Context, *ReqPlatformBillingProducts) (*ResPlatformBillingProducts, error)
	FetchRandomCharacter(context.Context, *ReqCommon) (*ResRandomCharacter, error)
	SetRandomCharacter(context.Context, *ReqRandomCharacter) (*ResCommon, error)
	CancelGooglePlayOrder(context.Context, *ReqCancelGooglePlayOrder) (*ResCommon, error)
	OpenChest(context.Context, *ReqOpenChest) (*ResOpenChest, error)
	BuyFromChestShop(context.Context, *ReqBuyFromChestShop) (*ResBuyFromChestShop, error)
	FetchDailySignInInfo(context.Context, *ReqCommon) (*ResDailySignInInfo, error)
	DoDailySignIn(context.Context, *ReqCommon) (*ResCommon, error)
	DoActivitySignIn(context.Context, *ReqDoActivitySignIn) (*ResDoActivitySignIn, error)
	FetchCharacterInfo(context.Context, *ReqCommon) (*ResCharacterInfo, error)
	UpdateCharacterSort(context.Context, *ReqUpdateCharacterSort) (*ResCommon, error)
	ChangeMainCharacter(context.Context, *ReqChangeMainCharacter) (*ResCommon, error)
	ChangeCharacterSkin(context.Context, *ReqChangeCharacterSkin) (*ResCommon, error)
	ChangeCharacterView(context.Context, *ReqChangeCharacterView) (*ResCommon, error)
	SetHiddenCharacter(context.Context, *ReqSetHiddenCharacter) (*ResSetHiddenCharacter, error)
	SendGiftToCharacter(context.Context, *ReqSendGiftToCharacter) (*ResSendGiftToCharacter, error)
	SellItem(context.Context, *ReqSellItem) (*ResCommon, error)
	FetchCommonView(context.Context, *ReqCommon) (*ResCommonView, error)
	ChangeCommonView(context.Context, *ReqChangeCommonView) (*ResCommon, error)
	SaveCommonViews(context.Context, *ReqSaveCommonViews) (*ResCommon, error)
	FetchCommonViews(context.Context, *ReqCommonViews) (*ResCommonViews, error)
	FetchAllCommonViews(context.Context, *ReqCommon) (*ResAllcommonViews, error)
	UseCommonView(context.Context, *ReqUseCommonView) (*ResCommon, error)
	UpgradeCharacter(context.Context, *ReqUpgradeCharacter) (*ResUpgradeCharacter, error)
	AddFinishedEnding(context.Context, *ReqFinishedEnding) (*ResCommon, error)
	ReceiveEndingReward(context.Context, *ReqFinishedEnding) (*ResCommon, error)
	GameMasterCommand(context.Context, *ReqGMCommand) (*ResCommon, error)
	FetchShopInfo(context.Context, *ReqCommon) (*ResShopInfo, error)
	BuyFromShop(context.Context, *ReqBuyFromShop) (*ResBuyFromShop, error)
	BuyFromZHP(context.Context, *ReqBuyFromZHP) (*ResCommon, error)
	RefreshZHPShop(context.Context, *ReqReshZHPShop) (*ResRefreshZHPShop, error)
	FetchMonthTicketInfo(context.Context, *ReqCommon) (*ResMonthTicketInfo, error)
	PayMonthTicket(context.Context, *ReqCommon) (*ResPayMonthTicket, error)
	ExchangeCurrency(context.Context, *ReqExchangeCurrency) (*ResCommon, error)
	ExchangeChestStone(context.Context, *ReqExchangeCurrency) (*ResCommon, error)
	ExchangeDiamond(context.Context, *ReqExchangeCurrency) (*ResCommon, error)
	FetchServerSettings(context.Context, *ReqCommon) (*ResServerSettings, error)
	FetchAccountSettings(context.Context, *ReqCommon) (*ResAccountSettings, error)
	UpdateAccountSettings(context.Context, *ReqUpdateAccountSettings) (*ResCommon, error)
	FetchModNicknameTime(context.Context, *ReqCommon) (*ResModNicknameTime, error)
	CreateWechatNativeOrder(context.Context, *ReqCreateWechatNativeOrder) (*ResCreateWechatNativeOrder, error)
	CreateWechatAppOrder(context.Context, *ReqCreateWechatAppOrder) (*ResCreateWechatAppOrder, error)
	CreateAlipayOrder(context.Context, *ReqCreateAlipayOrder) (*ResCreateAlipayOrder, error)
	CreateAlipayScanOrder(context.Context, *ReqCreateAlipayScanOrder) (*ResCreateAlipayScanOrder, error)
	CreateAlipayAppOrder(context.Context, *ReqCreateAlipayAppOrder) (*ResCreateAlipayAppOrder, error)
	CreateJPCreditCardOrder(context.Context, *ReqCreateJPCreditCardOrder) (*ResCreateJPCreditCardOrder, error)
	CreateJPPaypalOrder(context.Context, *ReqCreateJPPaypalOrder) (*ResCreateJPPaypalOrder, error)
	CreateJPAuOrder(context.Context, *ReqCreateJPAuOrder) (*ResCreateJPAuOrder, error)
	CreateJPDocomoOrder(context.Context, *ReqCreateJPDocomoOrder) (*ResCreateJPDocomoOrder, error)
	CreateJPWebMoneyOrder(context.Context, *ReqCreateJPWebMoneyOrder) (*ResCreateJPWebMoneyOrder, error)
	CreateJPSoftbankOrder(context.Context, *ReqCreateJPSoftbankOrder) (*ResCreateJPSoftbankOrder, error)
	CreateJPPayPayOrder(context.Context, *ReqCreateJPPayPayOrder) (*ResCreateJPPayPayOrder, error)
	FetchJPCommonCreditCardOrder(context.Context, *ReqFetchJPCommonCreditCardOrder) (*ResFetchJPCommonCreditCardOrder, error)
	CreateJPGMOOrder(context.Context, *ReqCreateJPGMOOrder) (*ResCreateJPGMOOrder, error)
	CreateENPaypalOrder(context.Context, *ReqCreateENPaypalOrder) (*ResCreateENPaypalOrder, error)
	CreateENMasterCardOrder(context.Context, *ReqCreateENMasterCardOrder) (*ResCreateENMasterCardOrder, error)
	CreateENVisaOrder(context.Context, *ReqCreateENVisaOrder) (*ResCreateENVisaOrder, error)
	CreateENJCBOrder(context.Context, *ReqCreateENJCBOrder) (*ResCreateENJCBOrder, error)
	CreateENAlipayOrder(context.Context, *ReqCreateENAlipayOrder) (*ResCreateENAlipayOrder, error)
	CreateKRPaypalOrder(context.Context, *ReqCreateKRPaypalOrder) (*ResCreateKRPaypalOrder, error)
	CreateKRMasterCardOrder(context.Context, *ReqCreateKRMasterCardOrder) (*ResCreateKRMasterCardOrder, error)
	CreateKRVisaOrder(context.Context, *ReqCreateKRVisaOrder) (*ResCreateKRVisaOrder, error)
	CreateKRJCBOrder(context.Context, *ReqCreateKRJCBOrder) (*ResCreateKRJCBOrder, error)
	CreateKRAlipayOrder(context.Context, *ReqCreateKRAlipayOrder) (*ResCreateKRAlipayOrder, error)
	CreateDMMOrder(context.Context, *ReqCreateDMMOrder) (*ResCreateDmmOrder, error)
	CreateIAPOrder(context.Context, *ReqCreateIAPOrder) (*ResCreateIAPOrder, error)
	CreateSteamOrder(context.Context, *ReqCreateSteamOrder) (*ResCreateSteamOrder, error)
	VerifySteamOrder(context.Context, *ReqVerifySteamOrder) (*ResCommon, error)
	CreateMyCardAndroidOrder(context.Context, *ReqCreateMyCardOrder) (*ResCreateMyCardOrder, error)
	CreateMyCardWebOrder(context.Context, *ReqCreateMyCardOrder) (*ResCreateMyCardOrder, error)
	CreatePaypalOrder(context.Context, *ReqCreatePaypalOrder) (*ResCreatePaypalOrder, error)
	CreateXsollaOrder(context.Context, *ReqCreateXsollaOrder) (*ResCreateXsollaOrder, error)
	VerifyMyCardOrder(context.Context, *ReqVerifyMyCardOrder) (*ResCommon, error)
	VerificationIAPOrder(context.Context, *ReqVerificationIAPOrder) (*ResVerificationIAPOrder, error)
	CreateYostarSDKOrder(context.Context, *ReqCreateYostarOrder) (*ResCreateYostarOrder, error)
	CreateBillingOrder(context.Context, *ReqCreateBillingOrder) (*ResCreateBillingOrder, error)
	SolveGooglePlayOrder(context.Context, *ReqSolveGooglePlayOrder) (*ResCommon, error)
	SolveGooglePayOrderV3(context.Context, *ReqSolveGooglePlayOrderV3) (*ResCommon, error)
	DeliverAA32Order(context.Context, *ReqDeliverAA32Order) (*ResCommon, error)
	FetchMisc(context.Context, *ReqCommon) (*ResMisc, error)
	ModifySignature(context.Context, *ReqModifySignature) (*ResCommon, error)
	FetchIDCardInfo(context.Context, *ReqCommon) (*ResIDCardInfo, error)
	UpdateIDCardInfo(context.Context, *ReqUpdateIDCardInfo) (*ResCommon, error)
	FetchVipReward(context.Context, *ReqCommon) (*ResVipReward, error)
	GainVipReward(context.Context, *ReqGainVipReward) (*ResCommon, error)
	FetchRefundOrder(context.Context, *ReqCommon) (*ResFetchRefundOrder, error)
	FetchCustomizedContestList(context.Context, *ReqFetchCustomizedContestList) (*ResFetchCustomizedContestList, error)
	FetchCustomizedContestAuthInfo(context.Context, *ReqFetchCustomizedContestAuthInfo) (*ResFetchCustomizedContestAuthInfo, error)
	EnterCustomizedContest(context.Context, *ReqEnterCustomizedContest) (*ResEnterCustomizedContest, error)
	LeaveCustomizedContest(context.Context, *ReqCommon) (*ResCommon, error)
	FetchCustomizedContestOnlineInfo(context.Context, *ReqFetchCustomizedContestOnlineInfo) (*ResFetchCustomizedContestOnlineInfo, error)
	FetchCustomizedContestByContestId(context.Context, *ReqFetchCustomizedContestByContestId) (*ResFetchCustomizedContestByContestId, error)
	SignupCustomizedContest(context.Context, *ReqSignupCustomizedContest) (*ResSignupCustomizedContest, error)
	StartCustomizedContest(context.Context, *ReqStartCustomizedContest) (*ResCommon, error)
	StopCustomizedContest(context.Context, *ReqStopCustomizedContest) (*ResCommon, error)
	JoinCustomizedContestChatRoom(context.Context, *ReqJoinCustomizedContestChatRoom) (*ResJoinCustomizedContestChatRoom, error)
	LeaveCustomizedContestChatRoom(context.Context, *ReqCommon) (*ResCommon, error)
	SayChatMessage(context.Context, *ReqSayChatMessage) (*ResCommon, error)
	FetchCustomizedContestGameRecords(context.Context, *ReqFetchCustomizedContestGameRecords) (*ResFetchCustomizedContestGameRecords, error)
	FetchCustomizedContestGameLiveList(context.Context, *ReqFetchCustomizedContestGameLiveList) (*ResFetchCustomizedContestGameLiveList, error)
	FollowCustomizedContest(context.Context, *ReqTargetCustomizedContest) (*ResCommon, error)
	UnfollowCustomizedContest(context.Context, *ReqTargetCustomizedContest) (*ResCommon, error)
	FetchActivityList(context.Context, *ReqCommon) (*ResActivityList, error)
	FetchAccountActivityData(context.Context, *ReqCommon) (*ResAccountActivityData, error)
	ExchangeActivityItem(context.Context, *ReqExchangeActivityItem) (*ResExchangeActivityItem, error)
	CompleteActivityTask(context.Context, *ReqCompleteActivityTask) (*ResCommon, error)
	CompleteActivityTaskBatch(context.Context, *ReqCompleteActivityTaskBatch) (*ResCommon, error)
	CompleteActivityFlipTask(context.Context, *ReqCompleteActivityTask) (*ResCommon, error)
	CompletePeriodActivityTask(context.Context, *ReqCompleteActivityTask) (*ResCommon, error)
	CompletePeriodActivityTaskBatch(context.Context, *ReqCompletePeriodActivityTaskBatch) (*ResCommon, error)
	CompleteRandomActivityTask(context.Context, *ReqCompleteActivityTask) (*ResCommon, error)
	ReceiveActivityFlipTask(context.Context, *ReqReceiveActivityFlipTask) (*ResReceiveActivityFlipTask, error)
	CompleteSegmentTaskReward(context.Context, *ReqCompleteSegmentTaskReward) (*ResCompleteSegmentTaskReward, error)
	FetchActivityFlipInfo(context.Context, *ReqFetchActivityFlipInfo) (*ResFetchActivityFlipInfo, error)
	GainAccumulatedPointActivityReward(context.Context, *ReqGainAccumulatedPointActivityReward) (*ResCommon, error)
	GainMultiPointActivityReward(context.Context, *ReqGainMultiPointActivityReward) (*ResCommon, error)
	FetchRankPointLeaderboard(context.Context, *ReqFetchRankPointLeaderboard) (*ResFetchRankPointLeaderboard, error)
	GainRankPointReward(context.Context, *ReqGainRankPointReward) (*ResCommon, error)
	RichmanActivityNextMove(context.Context, *ReqRichmanNextMove) (*ResRichmanNextMove, error)
	RichmanAcitivitySpecialMove(context.Context, *ReqRichmanSpecialMove) (*ResRichmanNextMove, error)
	RichmanActivityChestInfo(context.Context, *ReqRichmanChestInfo) (*ResRichmanChestInfo, error)
	CreateGameObserveAuth(context.Context, *ReqCreateGameObserveAuth) (*ResCreateGameObserveAuth, error)
	RefreshGameObserveAuth(context.Context, *ReqRefreshGameObserveAuth) (*ResRefreshGameObserveAuth, error)
	FetchActivityBuff(context.Context, *ReqCommon) (*ResActivityBuff, error)
	UpgradeActivityBuff(context.Context, *ReqUpgradeActivityBuff) (*ResActivityBuff, error)
	UpgradeActivityLevel(context.Context, *ReqUpgradeActivityLevel) (*ResUpgradeActivityLevel, error)
	ReceiveUpgradeActivityReward(context.Context, *ReqReceiveUpgradeActivityReward) (*ResReceiveUpgradeActivityReward, error)
	UpgradeChallenge(context.Context, *ReqCommon) (*ResUpgradeChallenge, error)
	RefreshChallenge(context.Context, *ReqCommon) (*ResRefreshChallenge, error)
	FetchChallengeInfo(context.Context, *ReqCommon) (*ResFetchChallengeInfo, error)
	ForceCompleteChallengeTask(context.Context, *ReqForceCompleteChallengeTask) (*ResCommon, error)
	FetchChallengeSeason(context.Context, *ReqCommon) (*ResChallengeSeasonInfo, error)
	ReceiveChallengeRankReward(context.Context, *ReqReceiveChallengeRankReward) (*ResReceiveChallengeRankReward, error)
	FetchABMatchInfo(context.Context, *ReqCommon) (*ResFetchABMatch, error)
	BuyInABMatch(context.Context, *ReqBuyInABMatch) (*ResCommon, error)
	ReceiveABMatchReward(context.Context, *ReqCommon) (*ResCommon, error)
	QuitABMatch(context.Context, *ReqCommon) (*ResCommon, error)
	StartUnifiedMatch(context.Context, *ReqStartUnifiedMatch) (*ResCommon, error)
	CancelUnifiedMatch(context.Context, *ReqCancelUnifiedMatch) (*ResCommon, error)
	FetchGamePointRank(context.Context, *ReqGamePointRank) (*ResGamePointRank, error)
	FetchSelfGamePointRank(context.Context, *ReqGamePointRank) (*ResFetchSelfGamePointRank, error)
	ReadSNS(context.Context, *ReqReadSNS) (*ResReadSNS, error)
	ReplySNS(context.Context, *ReqReplySNS) (*ResReplySNS, error)
	LikeSNS(context.Context, *ReqLikeSNS) (*ResLikeSNS, error)
	DigMine(context.Context, *ReqDigMine) (*ResDigMine, error)
	FetchLastPrivacy(context.Context, *ReqFetchLastPrivacy) (*ResFetchLastPrivacy, error)
	CheckPrivacy(context.Context, *ReqCheckPrivacy) (*ResCommon, error)
	ResponseCaptcha(context.Context, *ReqResponseCaptcha) (*ResCommon, error)
	FetchRPGBattleHistory(context.Context, *ReqFetchRPGBattleHistory) (*ResFetchRPGBattleHistory, error)
	FetchRPGBattleHistoryV2(context.Context, *ReqFetchRPGBattleHistory) (*ResFetchRPGBattleHistoryV2, error)
	ReceiveRPGRewards(context.Context, *ReqReceiveRPGRewards) (*ResReceiveRPGRewards, error)
	ReceiveRPGReward(context.Context, *ReqReceiveRPGReward) (*ResReceiveRPGRewards, error)
	BuyArenaTicket(context.Context, *ReqBuyArenaTicket) (*ResCommon, error)
	EnterArena(context.Context, *ReqEnterArena) (*ResCommon, error)
	ReceiveArenaReward(context.Context, *ReqArenaReward) (*ResArenaReward, error)
	FetchOBToken(context.Context, *ReqFetchOBToken) (*ResFetchOBToken, error)
	ReceiveCharacterRewards(context.Context, *ReqReceiveCharacterRewards) (*ResReceiveCharacterRewards, error)
	FeedActivityFeed(context.Context, *ReqFeedActivityFeed) (*ResFeedActivityFeed, error)
	SendActivityGiftToFriend(context.Context, *ReqSendActivityGiftToFriend) (*ResSendActivityGiftToFriend, error)
	ReceiveActivityGift(context.Context, *ReqReceiveActivityGift) (*ResCommon, error)
	ReceiveAllActivityGift(context.Context, *ReqReceiveAllActivityGift) (*ResReceiveAllActivityGift, error)
	FetchFriendGiftActivityData(context.Context, *ReqFetchFriendGiftActivityData) (*ResFetchFriendGiftActivityData, error)
	OpenPreChestItem(context.Context, *ReqOpenPreChestItem) (*ResOpenPreChestItem, error)
	FetchVoteActivity(context.Context, *ReqFetchVoteActivity) (*ResFetchVoteActivity, error)
	VoteActivity(context.Context, *ReqVoteActivity) (*ResVoteActivity, error)
	UnlockActivitySpot(context.Context, *ReqUnlockActivitySpot) (*ResCommon, error)
	UnlockActivitySpotEnding(context.Context, *ReqUnlockActivitySpotEnding) (*ResCommon, error)
	ReceiveActivitySpotReward(context.Context, *ReqReceiveActivitySpotReward) (*ResReceiveActivitySpotReward, error)
	DeleteAccount(context.Context, *ReqCommon) (*ResDeleteAccount, error)
	CancelDeleteAccount(context.Context, *ReqCommon) (*ResCommon, error)
	LogReport(context.Context, *ReqLogReport) (*ResCommon, error)
	BindOauth2(context.Context, *ReqBindOauth2) (*ResCommon, error)
	FetchOauth2Info(context.Context, *ReqFetchOauth2) (*ResFetchOauth2, error)
	SetLoadingImage(context.Context, *ReqSetLoadingImage) (*ResCommon, error)
	FetchShopInterval(context.Context, *ReqCommon) (*ResFetchShopInterval, error)
	FetchActivityInterval(context.Context, *ReqCommon) (*ResFetchActivityInterval, error)
	FetchRecentFriend(context.Context, *ReqCommon) (*ResFetchrecentFriend, error)
	OpenGacha(context.Context, *ReqOpenGacha) (*ResOpenGacha, error)
	TaskRequest(context.Context, *ReqTaskRequest) (*ResCommon, error)
	SimulationActivityTrain(context.Context, *ReqSimulationActivityTrain) (*ResSimulationActivityTrain, error)
	FetchSimulationGameRecord(context.Context, *ReqFetchSimulationGameRecord) (*ResFetchSimulationGameRecord, error)
	StartSimulationActivityGame(context.Context, *ReqStartSimulationActivityGame) (*ResStartSimulationActivityGame, error)
	FetchSimulationGameRank(context.Context, *ReqFetchSimulationGameRank) (*ResFetchSimulationGameRank, error)
	GenerateCombiningCraft(context.Context, *ReqGenerateCombiningCraft) (*ResGenerateCombiningCraft, error)
	MoveCombiningCraft(context.Context, *ReqMoveCombiningCraft) (*ResMoveCombiningCraft, error)
	CombiningRecycleCraft(context.Context, *ReqCombiningRecycleCraft) (*ResCombiningRecycleCraft, error)
	RecoverCombiningRecycle(context.Context, *ReqRecoverCombiningRecycle) (*ResRecoverCombiningRecycle, error)
	FinishCombiningOrder(context.Context, *ReqFinishCombiningOrder) (*ResFinishCombiningOrder, error)
	UpgradeVillageBuilding(context.Context, *ReqUpgradeVillageBuilding) (*ResCommon, error)
	ReceiveVillageBuildingReward(context.Context, *ReqReceiveVillageBuildingReward) (*ResReceiveVillageBuildingReward, error)
	StartVillageTrip(context.Context, *ReqStartVillageTrip) (*ResCommon, error)
	ReceiveVillageTripReward(context.Context, *ReqReceiveVillageTripReward) (*ResReceiveVillageTripReward, error)
	CompleteVillageTask(context.Context, *ReqCompleteVillageTask) (*ResCompleteVillageTask, error)
	GetFriendVillageData(context.Context, *ReqGetFriendVillageData) (*ResGetFriendVillageData, error)
	SetVillageWorker(context.Context, *ReqSetVillageWorker) (*ResSetVillageWorker, error)
	NextRoundVillage(context.Context, *ReqNextRoundVillage) (*ResNextRoundVillage, error)
	ResolveFestivalActivityProposal(context.Context, *ReqResolveFestivalActivityProposal) (*ResResolveFestivalActivityProposal, error)
	ResolveFestivalActivityEvent(context.Context, *ReqResolveFestivalActivityEvent) (*ResResolveFestivalActivityEvent, error)
	BuyFestivalProposal(context.Context, *ReqBuyFestivalProposal) (*ResBuyFestivalProposal, error)
	IslandActivityMove(context.Context, *ReqIslandActivityMove) (*ResCommon, error)
	IslandActivityBuy(context.Context, *ReqIslandActivityBuy) (*ResCommon, error)
	IslandActivitySell(context.Context, *ReqIslandActivitySell) (*ResCommon, error)
	IslandActivityTidyBag(context.Context, *ReqIslandActivityTidyBag) (*ResCommon, error)
	IslandActivityUnlockBagGrid(context.Context, *ReqIslandActivityUnlockBagGrid) (*ResCommon, error)
	CreateCustomizedContest(context.Context, *ReqCreateCustomizedContest) (*ResCreateCustomizedContest, error)
	FetchManagerCustomizedContestList(context.Context, *ReqFetchmanagerCustomizedContestList) (*ResFetchManagerCustomizedContestList, error)
	FetchManagerCustomizedContest(context.Context, *ReqFetchManagerCustomizedContest) (*ResFetchManagerCustomizedContest, error)
	UpdateManagerCustomizedContest(context.Context, *ReqUpdateManagerCustomizedContest) (*ResCommon, error)
	FetchContestPlayerRank(context.Context, *ReqFetchContestPlayerRank) (*ResFetchContestPlayerRank, error)
	FetchReadyPlayerList(context.Context, *ReqFetchReadyPlayerList) (*ResFetchReadyPlayerList, error)
	CreateGamePlan(context.Context, *ReqCreateGamePlan) (*ResCommon, error)
	GenerateContestManagerLoginCode(context.Context, *ReqCommon) (*ResGenerateContestManagerLoginCode, error)
	AmuletActivityStartGame(context.Context, *ReqAmuletActivityStartGame) (*ResAmuletActivityStartGame, error)
	AmuletActivityOperate(context.Context, *ReqAmuletActivityOperate) (*ResAmuletActivityOperate, error)
	AmuletActivityChangeHands(context.Context, *ReqAmuletActivityChangeHands) (*ResAmuletActivityChangeHands, error)
	AmuletActivityUpgrade(context.Context, *ReqAmuletActivityUpgrade) (*ResAmuletActivityUpgrade, error)
	AmuletActivityBuy(context.Context, *ReqAmuletActivityBuy) (*ResAmuletActivityBuy, error)
	AmuletActivitySelectPack(context.Context, *ReqAmuletActivitySelectPack) (*ResAmuletActivitySelectPack, error)
	AmuletActivitySellEffect(context.Context, *ReqAmuletActivitySellEffect) (*ResAmuletActivitySellEffect, error)
	AmuletActivityEffectSort(context.Context, *ReqAmuletActivityEffectSort) (*ResCommon, error)
	AmuletActivityGiveup(context.Context, *ReqAmuletActivityGiveup) (*ResCommon, error)
	AmuletActivityRefreshShop(context.Context, *ReqAmuletActivityRefreshShop) (*ResAmuletActivityRefreshShop, error)
	AmuletActivitySelectFreeEffect(context.Context, *ReqAmuletActivitySelectFreeEffect) (*ResAmuletActivitySelectFreeEffect, error)
	AmuletActivityUpgradeShopBuff(context.Context, *ReqAmuletActivityUpgradeShopBuff) (*ResAmuletActivityUpgradeShopBuff, error)
	AmuletActivityEndShopping(context.Context, *ReqAmuletActivityEndShopping) (*ResAmuletActivityEndShopping, error)
	AmuletActivitySetSkillLevel(context.Context, *ReqAmuletActivitySetSkillLevel) (*ResCommon, error)
	AmuletActivityMaintainInfo(context.Context, *ReqCommon) (*ResAmuletActivityMaintainInfo, error)
	StoryActivityUnlock(context.Context, *ReqStoryActivityUnlock) (*ResCommon, error)
	StoryActivityUnlockEnding(context.Context, *ReqStoryActivityUnlockEnding) (*ResCommon, error)
	StoryActivityReceiveEndingReward(context.Context, *ReqStoryActivityReceiveEndingReward) (*ResStoryReward, error)
	StoryActivityReceiveFinishReward(context.Context, *ReqStoryActivityReceiveFinishReward) (*ResStoryReward, error)
	StoryActivityReceiveAllFinishReward(context.Context, *ReqStoryActivityReceiveAllFinishReward) (*ResStoryReward, error)
	StoryActivityUnlockEndingAndReceive(context.Context, *ReqStoryActivityUnlockEndingAndReceive) (*ResStoryActivityUnlockEndingAndReceive, error)
	FetchActivityRank(context.Context, *ReqFetchActivityRank) (*ResFetchActivityRank, error)
	SetVerifiedHidden(context.Context, *ReqSetVerifiedHidden) (*ResCommon, error)
	FetchQuestionnaireList(context.Context, *ReqFetchQuestionnaireList) (*ResFetchQuestionnaireList, error)
	FetchQuestionnaireDetail(context.Context, *ReqFetchQuestionnaireDetail) (*ResFetchQuestionnaireDetail, error)
	SubmitQuestionnaire(context.Context, *ReqSubmitQuestionnaire) (*ResCommon, error)
	mustEmbedUnimplementedLobbyServer()
}

// UnimplementedLobbyServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedLobbyServer struct{}

func (UnimplementedLobbyServer) FetchConnectionInfo(context.Context, *ReqCommon) (*ResConnectionInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchConnectionInfo not implemented")
}
func (UnimplementedLobbyServer) FetchQueueInfo(context.Context, *ReqCommon) (*ResFetchQueueInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchQueueInfo not implemented")
}
func (UnimplementedLobbyServer) CancelQueue(context.Context, *ReqCommon) (*ResCommon, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelQueue not implemented")
}
func (UnimplementedLobbyServer) OpenidCheck(context.Context, *ReqOpenidCheck) (*ResOauth2Check, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OpenidCheck not implemented")
}
func (UnimplementedLobbyServer) Signup(context.Context, *ReqSignupAccount) (*ResSignupAccount, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Signup not implemented")
}
func (UnimplementedLobbyServer) Login(context.Context, *ReqLogin) (*ResLogin, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedLobbyServer) FetchInfo(context.Context, *ReqCommon) (*ResFetchInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchInfo not implemented")
}
func (UnimplementedLobbyServer) LoginSuccess(context.Context, *ReqCommon) (*ResCommon, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoginSuccess not implemented")
}
func (UnimplementedLobbyServer) FetchServerMaintenanceInfo(context.Context, *ReqCommon) (*ResFetchServerMaintenanceInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchServerMaintenanceInfo not implemented")
}
func (UnimplementedLobbyServer) EmailLogin(context.Context, *ReqEmailLogin) (*ResLogin, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EmailLogin not implemented")
}
func (UnimplementedLobbyServer) Oauth2Auth(context.Context, *ReqOauth2Auth) (*ResOauth2Auth, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Oauth2Auth not implemented")
}
func (UnimplementedLobbyServer) Oauth2Check(context.Context, *ReqOauth2Check) (*ResOauth2Check, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Oauth2Check not implemented")
}
func (UnimplementedLobbyServer) Oauth2Signup(context.Context, *ReqOauth2Signup) (*ResOauth2Signup, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Oauth2Signup not implemented")
}
func (UnimplementedLobbyServer) Oauth2Login(context.Context, *ReqOauth2Login) (*ResLogin, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Oauth2Login not implemented")
}
func (UnimplementedLobbyServer) DmmPreLogin(context.Context, *ReqDMMPreLogin) (*ResDMMPreLogin, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DmmPreLogin not implemented")
}
func (UnimplementedLobbyServer) CreatePhoneVerifyCode(context.Context, *ReqCreatePhoneVerifyCode) (*ResCommon, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePhoneVerifyCode not implemented")
}
func (UnimplementedLobbyServer) CreateEmailVerifyCode(context.Context, *ReqCreateEmailVerifyCode) (*ResCommon, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateEmailVerifyCode not implemented")
}
func (UnimplementedLobbyServer) VerfifyCodeForSecure(context.Context, *ReqVerifyCodeForSecure) (*ResVerfiyCodeForSecure, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerfifyCodeForSecure not implemented")
}
func (UnimplementedLobbyServer) BindPhoneNumber(context.Context, *ReqBindPhoneNumber) (*ResCommon, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BindPhoneNumber not implemented")
}
func (UnimplementedLobbyServer) UnbindPhoneNumber(context.Context, *ReqUnbindPhoneNumber) (*ResCommon, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnbindPhoneNumber not implemented")
}
func (UnimplementedLobbyServer) FetchPhoneLoginBind(context.Context, *ReqCommon) (*ResFetchPhoneLoginBind, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchPhoneLoginBind not implemented")
}
func (UnimplementedLobbyServer) CreatePhoneLoginBind(context.Context, *ReqCreatePhoneLoginBind) (*ResCommon, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePhoneLoginBind not implemented")
}
func (UnimplementedLobbyServer) BindEmail(context.Context, *ReqBindEmail) (*ResCommon, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BindEmail not implemented")
}
func (UnimplementedLobbyServer) ModifyPassword(context.Context, *ReqModifyPassword) (*ResCommon, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ModifyPassword not implemented")
}
func (UnimplementedLobbyServer) BindAccount(context.Context, *ReqBindAccount) (*ResCommon, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BindAccount not implemented")
}
func (UnimplementedLobbyServer) Logout(context.Context, *ReqLogout) (*ResLogout, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Logout not implemented")
}
func (UnimplementedLobbyServer) Heatbeat(context.Context, *ReqHeatBeat) (*ResCommon, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Heatbeat not implemented")
}
func (UnimplementedLobbyServer) LoginBeat(context.Context, *ReqLoginBeat) (*ResCommon, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoginBeat not implemented")
}
func (UnimplementedLobbyServer) CreateNickname(context.Context, *ReqCreateNickname) (*ResCommon, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNickname not implemented")
}
func (UnimplementedLobbyServer) ModifyNickname(context.Context, *ReqModifyNickname) (*ResCommon, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ModifyNickname not implemented")
}
func (UnimplementedLobbyServer) ModifyBirthday(context.Context, *ReqModifyBirthday) (*ResCommon, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ModifyBirthday not implemented")
}
func (UnimplementedLobbyServer) FetchRoom(context.Context, *ReqCommon) (*ResSelfRoom, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchRoom not implemented")
}
func (UnimplementedLobbyServer) FetchGamingInfo(context.Context, *ReqCommon) (*ResFetchGamingInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchGamingInfo not implemented")
}
func (UnimplementedLobbyServer) CreateRoom(context.Context, *ReqCreateRoom) (*ResCreateRoom, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRoom not implemented")
}
func (UnimplementedLobbyServer) JoinRoom(context.Context, *ReqJoinRoom) (*ResJoinRoom, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JoinRoom not implemented")
}
func (UnimplementedLobbyServer) LeaveRoom(context.Context, *ReqCommon) (*ResCommon, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LeaveRoom not implemented")
}
func (UnimplementedLobbyServer) ReadyPlay(context.Context, *ReqRoomReady) (*ResCommon, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadyPlay not implemented")
}
func (UnimplementedLobbyServer) DressingStatus(context.Context, *ReqRoomDressing) (*ResCommon, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DressingStatus not implemented")
}
func (UnimplementedLobbyServer) StartRoom(context.Context, *ReqRoomStart) (*ResCommon, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartRoom not implemented")
}
func (UnimplementedLobbyServer) RoomKickPlayer(context.Context, *ReqRoomKickPlayer) (*ResCommon, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RoomKickPlayer not implemented")
}
func (UnimplementedLobbyServer) ModifyRoom(context.Context, *ReqModifyRoom) (*ResCommon, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ModifyRoom not implemented")
}
func (UnimplementedLobbyServer) AddRoomRobot(context.Context, *ReqAddRoomRobot) (*ResCommon, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddRoomRobot not implemented")
}
func (UnimplementedLobbyServer) MatchGame(context.Context, *ReqJoinMatchQueue) (*ResCommon, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MatchGame not implemented")
}
func (UnimplementedLobbyServer) CancelMatch(context.Context, *ReqCancelMatchQueue) (*ResCommon, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelMatch not implemented")
}
func (UnimplementedLobbyServer) FetchAccountInfo(context.Context, *ReqAccountInfo) (*ResAccountInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchAccountInfo not implemented")
}
func (UnimplementedLobbyServer) ChangeAvatar(context.Context, *ReqChangeAvatar) (*ResCommon, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeAvatar not implemented")
}
func (UnimplementedLobbyServer) ReceiveVersionReward(context.Context, *ReqCommon) (*ResCommon, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReceiveVersionReward not implemented")
}
func (UnimplementedLobbyServer) FetchAccountStatisticInfo(context.Context, *ReqAccountStatisticInfo) (*ResAccountStatisticInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchAccountStatisticInfo not implemented")
}
func (UnimplementedLobbyServer) FetchAccountChallengeRankInfo(context.Context, *ReqAccountInfo) (*ResAccountChallengeRankInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchAccountChallengeRankInfo not implemented")
}
func (UnimplementedLobbyServer) FetchAccountCharacterInfo(context.Context, *ReqCommon) (*ResAccountCharacterInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchAccountCharacterInfo not implemented")
}
func (UnimplementedLobbyServer) ShopPurchase(context.Context, *ReqShopPurchase) (*ResShopPurchase, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShopPurchase not implemented")
}
func (UnimplementedLobbyServer) FetchGameRecord(context.Context, *ReqGameRecord) (*ResGameRecord, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchGameRecord not implemented")
}
func (UnimplementedLobbyServer) ReadGameRecord(context.Context, *ReqGameRecord) (*ResCommon, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadGameRecord not implemented")
}
func (UnimplementedLobbyServer) FetchGameRecordList(context.Context, *ReqGameRecordList) (*ResGameRecordList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchGameRecordList not implemented")
}
func (UnimplementedLobbyServer) FetchGameRecordListV2(context.Context, *ReqGameRecordListV2) (*ResGameRecordListV2, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchGameRecordListV2 not implemented")
}
func (UnimplementedLobbyServer) FetchNextGameRecordList(context.Context, *ReqNextGameRecordList) (*ResNextGameRecordList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchNextGameRecordList not implemented")
}
func (UnimplementedLobbyServer) FetchCollectedGameRecordList(context.Context, *ReqCommon) (*ResCollectedGameRecordList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchCollectedGameRecordList not implemented")
}
func (UnimplementedLobbyServer) FetchGameRecordsDetail(context.Context, *ReqGameRecordsDetail) (*ResGameRecordsDetail, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchGameRecordsDetail not implemented")
}
func (UnimplementedLobbyServer) FetchGameRecordsDetailV2(context.Context, *ReqGameRecordsDetailV2) (*ResGameRecordsDetailV2, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchGameRecordsDetailV2 not implemented")
}
func (UnimplementedLobbyServer) AddCollectedGameRecord(context.Context, *ReqAddCollectedGameRecord) (*ResAddCollectedGameRecord, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddCollectedGameRecord not implemented")
}
func (UnimplementedLobbyServer) RemoveCollectedGameRecord(context.Context, *ReqRemoveCollectedGameRecord) (*ResRemoveCollectedGameRecord, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveCollectedGameRecord not implemented")
}
func (UnimplementedLobbyServer) ChangeCollectedGameRecordRemarks(context.Context, *ReqChangeCollectedGameRecordRemarks) (*ResChangeCollectedGameRecordRemarks, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeCollectedGameRecordRemarks not implemented")
}
func (UnimplementedLobbyServer) FetchLevelLeaderboard(context.Context, *ReqLevelLeaderboard) (*ResLevelLeaderboard, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchLevelLeaderboard not implemented")
}
func (UnimplementedLobbyServer) FetchChallengeLeaderboard(context.Context, *ReqChallangeLeaderboard) (*ResChallengeLeaderboard, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchChallengeLeaderboard not implemented")
}
func (UnimplementedLobbyServer) FetchMutiChallengeLevel(context.Context, *ReqMutiChallengeLevel) (*ResMutiChallengeLevel, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchMutiChallengeLevel not implemented")
}
func (UnimplementedLobbyServer) FetchMultiAccountBrief(context.Context, *ReqMultiAccountId) (*ResMultiAccountBrief, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchMultiAccountBrief not implemented")
}
func (UnimplementedLobbyServer) FetchFriendList(context.Context, *ReqCommon) (*ResFriendList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchFriendList not implemented")
}
func (UnimplementedLobbyServer) FetchFriendApplyList(context.Context, *ReqCommon) (*ResFriendApplyList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchFriendApplyList not implemented")
}
func (UnimplementedLobbyServer) ApplyFriend(context.Context, *ReqApplyFriend) (*ResCommon, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApplyFriend not implemented")
}
func (UnimplementedLobbyServer) HandleFriendApply(context.Context, *ReqHandleFriendApply) (*ResCommon, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HandleFriendApply not implemented")
}
func (UnimplementedLobbyServer) RemoveFriend(context.Context, *ReqRemoveFriend) (*ResCommon, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveFriend not implemented")
}
func (UnimplementedLobbyServer) SearchAccountById(context.Context, *ReqSearchAccountById) (*ResSearchAccountById, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchAccountById not implemented")
}
func (UnimplementedLobbyServer) SearchAccountByPattern(context.Context, *ReqSearchAccountByPattern) (*ResSearchAccountByPattern, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchAccountByPattern not implemented")
}
func (UnimplementedLobbyServer) FetchAccountState(context.Context, *ReqAccountList) (*ResAccountStates, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchAccountState not implemented")
}
func (UnimplementedLobbyServer) FetchBagInfo(context.Context, *ReqCommon) (*ResBagInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchBagInfo not implemented")
}
func (UnimplementedLobbyServer) UseBagItem(context.Context, *ReqUseBagItem) (*ResCommon, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UseBagItem not implemented")
}
func (UnimplementedLobbyServer) OpenManualItem(context.Context, *ReqOpenManualItem) (*ResCommon, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OpenManualItem not implemented")
}
func (UnimplementedLobbyServer) OpenRandomRewardItem(context.Context, *ReqOpenRandomRewardItem) (*ResOpenRandomRewardItem, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OpenRandomRewardItem not implemented")
}
func (UnimplementedLobbyServer) OpenAllRewardItem(context.Context, *ReqOpenAllRewardItem) (*ResOpenAllRewardItem, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OpenAllRewardItem not implemented")
}
func (UnimplementedLobbyServer) ComposeShard(context.Context, *ReqComposeShard) (*ResCommon, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ComposeShard not implemented")
}
func (UnimplementedLobbyServer) FetchAnnouncement(context.Context, *ReqFetchAnnouncement) (*ResAnnouncement, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchAnnouncement not implemented")
}
func (UnimplementedLobbyServer) ReadAnnouncement(context.Context, *ReqReadAnnouncement) (*ResCommon, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadAnnouncement not implemented")
}
func (UnimplementedLobbyServer) FetchMailInfo(context.Context, *ReqCommon) (*ResMailInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchMailInfo not implemented")
}
func (UnimplementedLobbyServer) ReadMail(context.Context, *ReqReadMail) (*ResCommon, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadMail not implemented")
}
func (UnimplementedLobbyServer) DeleteMail(context.Context, *ReqDeleteMail) (*ResCommon, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMail not implemented")
}
func (UnimplementedLobbyServer) TakeAttachmentFromMail(context.Context, *ReqTakeAttachment) (*ResCommon, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TakeAttachmentFromMail not implemented")
}
func (UnimplementedLobbyServer) ReceiveAchievementReward(context.Context, *ReqReceiveAchievementReward) (*ResReceiveAchievementReward, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReceiveAchievementReward not implemented")
}
func (UnimplementedLobbyServer) ReceiveAchievementGroupReward(context.Context, *ReqReceiveAchievementGroupReward) (*ResReceiveAchievementGroupReward, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReceiveAchievementGroupReward not implemented")
}
func (UnimplementedLobbyServer) FetchAchievementRate(context.Context, *ReqCommon) (*ResFetchAchievementRate, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchAchievementRate not implemented")
}
func (UnimplementedLobbyServer) FetchAchievement(context.Context, *ReqCommon) (*ResAchievement, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchAchievement not implemented")
}
func (UnimplementedLobbyServer) BuyShiLian(context.Context, *ReqBuyShiLian) (*ResCommon, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BuyShiLian not implemented")
}
func (UnimplementedLobbyServer) MatchShiLian(context.Context, *ReqCommon) (*ResCommon, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MatchShiLian not implemented")
}
func (UnimplementedLobbyServer) GoNextShiLian(context.Context, *ReqCommon) (*ResCommon, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GoNextShiLian not implemented")
}
func (UnimplementedLobbyServer) UpdateClientValue(context.Context, *ReqUpdateClientValue) (*ResCommon, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateClientValue not implemented")
}
func (UnimplementedLobbyServer) FetchClientValue(context.Context, *ReqCommon) (*ResClientValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchClientValue not implemented")
}
func (UnimplementedLobbyServer) ClientMessage(context.Context, *ReqClientMessage) (*ResCommon, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClientMessage not implemented")
}
func (UnimplementedLobbyServer) FetchCurrentMatchInfo(context.Context, *ReqCurrentMatchInfo) (*ResCurrentMatchInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchCurrentMatchInfo not implemented")
}
func (UnimplementedLobbyServer) UserComplain(context.Context, *ReqUserComplain) (*ResCommon, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserComplain not implemented")
}
func (UnimplementedLobbyServer) FetchReviveCoinInfo(context.Context, *ReqCommon) (*ResReviveCoinInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchReviveCoinInfo not implemented")
}
func (UnimplementedLobbyServer) GainReviveCoin(context.Context, *ReqCommon) (*ResCommon, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GainReviveCoin not implemented")
}
func (UnimplementedLobbyServer) FetchDailyTask(context.Context, *ReqCommon) (*ResDailyTask, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchDailyTask not implemented")
}
func (UnimplementedLobbyServer) RefreshDailyTask(context.Context, *ReqRefreshDailyTask) (*ResRefreshDailyTask, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RefreshDailyTask not implemented")
}
func (UnimplementedLobbyServer) UseGiftCode(context.Context, *ReqUseGiftCode) (*ResUseGiftCode, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UseGiftCode not implemented")
}
func (UnimplementedLobbyServer) UseSpecialGiftCode(context.Context, *ReqUseGiftCode) (*ResUseSpecialGiftCode, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UseSpecialGiftCode not implemented")
}
func (UnimplementedLobbyServer) FetchTitleList(context.Context, *ReqCommon) (*ResTitleList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchTitleList not implemented")
}
func (UnimplementedLobbyServer) UseTitle(context.Context, *ReqUseTitle) (*ResCommon, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UseTitle not implemented")
}
func (UnimplementedLobbyServer) SendClientMessage(context.Context, *ReqSendClientMessage) (*ResCommon, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendClientMessage not implemented")
}
func (UnimplementedLobbyServer) FetchGameLiveInfo(context.Context, *ReqGameLiveInfo) (*ResGameLiveInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchGameLiveInfo not implemented")
}
func (UnimplementedLobbyServer) FetchGameLiveLeftSegment(context.Context, *ReqGameLiveLeftSegment) (*ResGameLiveLeftSegment, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchGameLiveLeftSegment not implemented")
}
func (UnimplementedLobbyServer) FetchGameLiveList(context.Context, *ReqGameLiveList) (*ResGameLiveList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchGameLiveList not implemented")
}
func (UnimplementedLobbyServer) FetchCommentSetting(context.Context, *ReqCommon) (*ResCommentSetting, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchCommentSetting not implemented")
}
func (UnimplementedLobbyServer) UpdateCommentSetting(context.Context, *ReqUpdateCommentSetting) (*ResCommon, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCommentSetting not implemented")
}
func (UnimplementedLobbyServer) FetchCommentList(context.Context, *ReqFetchCommentList) (*ResFetchCommentList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchCommentList not implemented")
}
func (UnimplementedLobbyServer) FetchCommentContent(context.Context, *ReqFetchCommentContent) (*ResFetchCommentContent, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchCommentContent not implemented")
}
func (UnimplementedLobbyServer) LeaveComment(context.Context, *ReqLeaveComment) (*ResCommon, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LeaveComment not implemented")
}
func (UnimplementedLobbyServer) DeleteComment(context.Context, *ReqDeleteComment) (*ResCommon, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteComment not implemented")
}
func (UnimplementedLobbyServer) UpdateReadComment(context.Context, *ReqUpdateReadComment) (*ResCommon, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateReadComment not implemented")
}
func (UnimplementedLobbyServer) FetchRollingNotice(context.Context, *ReqFetchRollingNotice) (*ResFetchRollingNotice, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchRollingNotice not implemented")
}
func (UnimplementedLobbyServer) FetchMaintainNotice(context.Context, *ReqCommon) (*ResFetchMaintainNotice, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchMaintainNotice not implemented")
}
func (UnimplementedLobbyServer) FetchServerTime(context.Context, *ReqCommon) (*ResServerTime, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchServerTime not implemented")
}
func (UnimplementedLobbyServer) FetchPlatformProducts(context.Context, *ReqPlatformBillingProducts) (*ResPlatformBillingProducts, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchPlatformProducts not implemented")
}
func (UnimplementedLobbyServer) FetchRandomCharacter(context.Context, *ReqCommon) (*ResRandomCharacter, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchRandomCharacter not implemented")
}
func (UnimplementedLobbyServer) SetRandomCharacter(context.Context, *ReqRandomCharacter) (*ResCommon, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetRandomCharacter not implemented")
}
func (UnimplementedLobbyServer) CancelGooglePlayOrder(context.Context, *ReqCancelGooglePlayOrder) (*ResCommon, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelGooglePlayOrder not implemented")
}
func (UnimplementedLobbyServer) OpenChest(context.Context, *ReqOpenChest) (*ResOpenChest, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OpenChest not implemented")
}
func (UnimplementedLobbyServer) BuyFromChestShop(context.Context, *ReqBuyFromChestShop) (*ResBuyFromChestShop, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BuyFromChestShop not implemented")
}
func (UnimplementedLobbyServer) FetchDailySignInInfo(context.Context, *ReqCommon) (*ResDailySignInInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchDailySignInInfo not implemented")
}
func (UnimplementedLobbyServer) DoDailySignIn(context.Context, *ReqCommon) (*ResCommon, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DoDailySignIn not implemented")
}
func (UnimplementedLobbyServer) DoActivitySignIn(context.Context, *ReqDoActivitySignIn) (*ResDoActivitySignIn, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DoActivitySignIn not implemented")
}
func (UnimplementedLobbyServer) FetchCharacterInfo(context.Context, *ReqCommon) (*ResCharacterInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchCharacterInfo not implemented")
}
func (UnimplementedLobbyServer) UpdateCharacterSort(context.Context, *ReqUpdateCharacterSort) (*ResCommon, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCharacterSort not implemented")
}
func (UnimplementedLobbyServer) ChangeMainCharacter(context.Context, *ReqChangeMainCharacter) (*ResCommon, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeMainCharacter not implemented")
}
func (UnimplementedLobbyServer) ChangeCharacterSkin(context.Context, *ReqChangeCharacterSkin) (*ResCommon, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeCharacterSkin not implemented")
}
func (UnimplementedLobbyServer) ChangeCharacterView(context.Context, *ReqChangeCharacterView) (*ResCommon, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeCharacterView not implemented")
}
func (UnimplementedLobbyServer) SetHiddenCharacter(context.Context, *ReqSetHiddenCharacter) (*ResSetHiddenCharacter, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetHiddenCharacter not implemented")
}
func (UnimplementedLobbyServer) SendGiftToCharacter(context.Context, *ReqSendGiftToCharacter) (*ResSendGiftToCharacter, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendGiftToCharacter not implemented")
}
func (UnimplementedLobbyServer) SellItem(context.Context, *ReqSellItem) (*ResCommon, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SellItem not implemented")
}
func (UnimplementedLobbyServer) FetchCommonView(context.Context, *ReqCommon) (*ResCommonView, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchCommonView not implemented")
}
func (UnimplementedLobbyServer) ChangeCommonView(context.Context, *ReqChangeCommonView) (*ResCommon, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeCommonView not implemented")
}
func (UnimplementedLobbyServer) SaveCommonViews(context.Context, *ReqSaveCommonViews) (*ResCommon, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveCommonViews not implemented")
}
func (UnimplementedLobbyServer) FetchCommonViews(context.Context, *ReqCommonViews) (*ResCommonViews, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchCommonViews not implemented")
}
func (UnimplementedLobbyServer) FetchAllCommonViews(context.Context, *ReqCommon) (*ResAllcommonViews, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchAllCommonViews not implemented")
}
func (UnimplementedLobbyServer) UseCommonView(context.Context, *ReqUseCommonView) (*ResCommon, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UseCommonView not implemented")
}
func (UnimplementedLobbyServer) UpgradeCharacter(context.Context, *ReqUpgradeCharacter) (*ResUpgradeCharacter, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpgradeCharacter not implemented")
}
func (UnimplementedLobbyServer) AddFinishedEnding(context.Context, *ReqFinishedEnding) (*ResCommon, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddFinishedEnding not implemented")
}
func (UnimplementedLobbyServer) ReceiveEndingReward(context.Context, *ReqFinishedEnding) (*ResCommon, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReceiveEndingReward not implemented")
}
func (UnimplementedLobbyServer) GameMasterCommand(context.Context, *ReqGMCommand) (*ResCommon, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GameMasterCommand not implemented")
}
func (UnimplementedLobbyServer) FetchShopInfo(context.Context, *ReqCommon) (*ResShopInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchShopInfo not implemented")
}
func (UnimplementedLobbyServer) BuyFromShop(context.Context, *ReqBuyFromShop) (*ResBuyFromShop, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BuyFromShop not implemented")
}
func (UnimplementedLobbyServer) BuyFromZHP(context.Context, *ReqBuyFromZHP) (*ResCommon, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BuyFromZHP not implemented")
}
func (UnimplementedLobbyServer) RefreshZHPShop(context.Context, *ReqReshZHPShop) (*ResRefreshZHPShop, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RefreshZHPShop not implemented")
}
func (UnimplementedLobbyServer) FetchMonthTicketInfo(context.Context, *ReqCommon) (*ResMonthTicketInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchMonthTicketInfo not implemented")
}
func (UnimplementedLobbyServer) PayMonthTicket(context.Context, *ReqCommon) (*ResPayMonthTicket, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PayMonthTicket not implemented")
}
func (UnimplementedLobbyServer) ExchangeCurrency(context.Context, *ReqExchangeCurrency) (*ResCommon, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExchangeCurrency not implemented")
}
func (UnimplementedLobbyServer) ExchangeChestStone(context.Context, *ReqExchangeCurrency) (*ResCommon, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExchangeChestStone not implemented")
}
func (UnimplementedLobbyServer) ExchangeDiamond(context.Context, *ReqExchangeCurrency) (*ResCommon, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExchangeDiamond not implemented")
}
func (UnimplementedLobbyServer) FetchServerSettings(context.Context, *ReqCommon) (*ResServerSettings, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchServerSettings not implemented")
}
func (UnimplementedLobbyServer) FetchAccountSettings(context.Context, *ReqCommon) (*ResAccountSettings, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchAccountSettings not implemented")
}
func (UnimplementedLobbyServer) UpdateAccountSettings(context.Context, *ReqUpdateAccountSettings) (*ResCommon, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAccountSettings not implemented")
}
func (UnimplementedLobbyServer) FetchModNicknameTime(context.Context, *ReqCommon) (*ResModNicknameTime, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchModNicknameTime not implemented")
}
func (UnimplementedLobbyServer) CreateWechatNativeOrder(context.Context, *ReqCreateWechatNativeOrder) (*ResCreateWechatNativeOrder, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateWechatNativeOrder not implemented")
}
func (UnimplementedLobbyServer) CreateWechatAppOrder(context.Context, *ReqCreateWechatAppOrder) (*ResCreateWechatAppOrder, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateWechatAppOrder not implemented")
}
func (UnimplementedLobbyServer) CreateAlipayOrder(context.Context, *ReqCreateAlipayOrder) (*ResCreateAlipayOrder, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAlipayOrder not implemented")
}
func (UnimplementedLobbyServer) CreateAlipayScanOrder(context.Context, *ReqCreateAlipayScanOrder) (*ResCreateAlipayScanOrder, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAlipayScanOrder not implemented")
}
func (UnimplementedLobbyServer) CreateAlipayAppOrder(context.Context, *ReqCreateAlipayAppOrder) (*ResCreateAlipayAppOrder, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAlipayAppOrder not implemented")
}
func (UnimplementedLobbyServer) CreateJPCreditCardOrder(context.Context, *ReqCreateJPCreditCardOrder) (*ResCreateJPCreditCardOrder, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateJPCreditCardOrder not implemented")
}
func (UnimplementedLobbyServer) CreateJPPaypalOrder(context.Context, *ReqCreateJPPaypalOrder) (*ResCreateJPPaypalOrder, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateJPPaypalOrder not implemented")
}
func (UnimplementedLobbyServer) CreateJPAuOrder(context.Context, *ReqCreateJPAuOrder) (*ResCreateJPAuOrder, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateJPAuOrder not implemented")
}
func (UnimplementedLobbyServer) CreateJPDocomoOrder(context.Context, *ReqCreateJPDocomoOrder) (*ResCreateJPDocomoOrder, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateJPDocomoOrder not implemented")
}
func (UnimplementedLobbyServer) CreateJPWebMoneyOrder(context.Context, *ReqCreateJPWebMoneyOrder) (*ResCreateJPWebMoneyOrder, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateJPWebMoneyOrder not implemented")
}
func (UnimplementedLobbyServer) CreateJPSoftbankOrder(context.Context, *ReqCreateJPSoftbankOrder) (*ResCreateJPSoftbankOrder, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateJPSoftbankOrder not implemented")
}
func (UnimplementedLobbyServer) CreateJPPayPayOrder(context.Context, *ReqCreateJPPayPayOrder) (*ResCreateJPPayPayOrder, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateJPPayPayOrder not implemented")
}
func (UnimplementedLobbyServer) FetchJPCommonCreditCardOrder(context.Context, *ReqFetchJPCommonCreditCardOrder) (*ResFetchJPCommonCreditCardOrder, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchJPCommonCreditCardOrder not implemented")
}
func (UnimplementedLobbyServer) CreateJPGMOOrder(context.Context, *ReqCreateJPGMOOrder) (*ResCreateJPGMOOrder, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateJPGMOOrder not implemented")
}
func (UnimplementedLobbyServer) CreateENPaypalOrder(context.Context, *ReqCreateENPaypalOrder) (*ResCreateENPaypalOrder, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateENPaypalOrder not implemented")
}
func (UnimplementedLobbyServer) CreateENMasterCardOrder(context.Context, *ReqCreateENMasterCardOrder) (*ResCreateENMasterCardOrder, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateENMasterCardOrder not implemented")
}
func (UnimplementedLobbyServer) CreateENVisaOrder(context.Context, *ReqCreateENVisaOrder) (*ResCreateENVisaOrder, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateENVisaOrder not implemented")
}
func (UnimplementedLobbyServer) CreateENJCBOrder(context.Context, *ReqCreateENJCBOrder) (*ResCreateENJCBOrder, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateENJCBOrder not implemented")
}
func (UnimplementedLobbyServer) CreateENAlipayOrder(context.Context, *ReqCreateENAlipayOrder) (*ResCreateENAlipayOrder, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateENAlipayOrder not implemented")
}
func (UnimplementedLobbyServer) CreateKRPaypalOrder(context.Context, *ReqCreateKRPaypalOrder) (*ResCreateKRPaypalOrder, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateKRPaypalOrder not implemented")
}
func (UnimplementedLobbyServer) CreateKRMasterCardOrder(context.Context, *ReqCreateKRMasterCardOrder) (*ResCreateKRMasterCardOrder, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateKRMasterCardOrder not implemented")
}
func (UnimplementedLobbyServer) CreateKRVisaOrder(context.Context, *ReqCreateKRVisaOrder) (*ResCreateKRVisaOrder, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateKRVisaOrder not implemented")
}
func (UnimplementedLobbyServer) CreateKRJCBOrder(context.Context, *ReqCreateKRJCBOrder) (*ResCreateKRJCBOrder, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateKRJCBOrder not implemented")
}
func (UnimplementedLobbyServer) CreateKRAlipayOrder(context.Context, *ReqCreateKRAlipayOrder) (*ResCreateKRAlipayOrder, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateKRAlipayOrder not implemented")
}
func (UnimplementedLobbyServer) CreateDMMOrder(context.Context, *ReqCreateDMMOrder) (*ResCreateDmmOrder, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDMMOrder not implemented")
}
func (UnimplementedLobbyServer) CreateIAPOrder(context.Context, *ReqCreateIAPOrder) (*ResCreateIAPOrder, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateIAPOrder not implemented")
}
func (UnimplementedLobbyServer) CreateSteamOrder(context.Context, *ReqCreateSteamOrder) (*ResCreateSteamOrder, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSteamOrder not implemented")
}
func (UnimplementedLobbyServer) VerifySteamOrder(context.Context, *ReqVerifySteamOrder) (*ResCommon, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifySteamOrder not implemented")
}
func (UnimplementedLobbyServer) CreateMyCardAndroidOrder(context.Context, *ReqCreateMyCardOrder) (*ResCreateMyCardOrder, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMyCardAndroidOrder not implemented")
}
func (UnimplementedLobbyServer) CreateMyCardWebOrder(context.Context, *ReqCreateMyCardOrder) (*ResCreateMyCardOrder, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMyCardWebOrder not implemented")
}
func (UnimplementedLobbyServer) CreatePaypalOrder(context.Context, *ReqCreatePaypalOrder) (*ResCreatePaypalOrder, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePaypalOrder not implemented")
}
func (UnimplementedLobbyServer) CreateXsollaOrder(context.Context, *ReqCreateXsollaOrder) (*ResCreateXsollaOrder, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateXsollaOrder not implemented")
}
func (UnimplementedLobbyServer) VerifyMyCardOrder(context.Context, *ReqVerifyMyCardOrder) (*ResCommon, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyMyCardOrder not implemented")
}
func (UnimplementedLobbyServer) VerificationIAPOrder(context.Context, *ReqVerificationIAPOrder) (*ResVerificationIAPOrder, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerificationIAPOrder not implemented")
}
func (UnimplementedLobbyServer) CreateYostarSDKOrder(context.Context, *ReqCreateYostarOrder) (*ResCreateYostarOrder, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateYostarSDKOrder not implemented")
}
func (UnimplementedLobbyServer) CreateBillingOrder(context.Context, *ReqCreateBillingOrder) (*ResCreateBillingOrder, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBillingOrder not implemented")
}
func (UnimplementedLobbyServer) SolveGooglePlayOrder(context.Context, *ReqSolveGooglePlayOrder) (*ResCommon, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SolveGooglePlayOrder not implemented")
}
func (UnimplementedLobbyServer) SolveGooglePayOrderV3(context.Context, *ReqSolveGooglePlayOrderV3) (*ResCommon, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SolveGooglePayOrderV3 not implemented")
}
func (UnimplementedLobbyServer) DeliverAA32Order(context.Context, *ReqDeliverAA32Order) (*ResCommon, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeliverAA32Order not implemented")
}
func (UnimplementedLobbyServer) FetchMisc(context.Context, *ReqCommon) (*ResMisc, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchMisc not implemented")
}
func (UnimplementedLobbyServer) ModifySignature(context.Context, *ReqModifySignature) (*ResCommon, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ModifySignature not implemented")
}
func (UnimplementedLobbyServer) FetchIDCardInfo(context.Context, *ReqCommon) (*ResIDCardInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchIDCardInfo not implemented")
}
func (UnimplementedLobbyServer) UpdateIDCardInfo(context.Context, *ReqUpdateIDCardInfo) (*ResCommon, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateIDCardInfo not implemented")
}
func (UnimplementedLobbyServer) FetchVipReward(context.Context, *ReqCommon) (*ResVipReward, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchVipReward not implemented")
}
func (UnimplementedLobbyServer) GainVipReward(context.Context, *ReqGainVipReward) (*ResCommon, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GainVipReward not implemented")
}
func (UnimplementedLobbyServer) FetchRefundOrder(context.Context, *ReqCommon) (*ResFetchRefundOrder, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchRefundOrder not implemented")
}
func (UnimplementedLobbyServer) FetchCustomizedContestList(context.Context, *ReqFetchCustomizedContestList) (*ResFetchCustomizedContestList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchCustomizedContestList not implemented")
}
func (UnimplementedLobbyServer) FetchCustomizedContestAuthInfo(context.Context, *ReqFetchCustomizedContestAuthInfo) (*ResFetchCustomizedContestAuthInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchCustomizedContestAuthInfo not implemented")
}
func (UnimplementedLobbyServer) EnterCustomizedContest(context.Context, *ReqEnterCustomizedContest) (*ResEnterCustomizedContest, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnterCustomizedContest not implemented")
}
func (UnimplementedLobbyServer) LeaveCustomizedContest(context.Context, *ReqCommon) (*ResCommon, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LeaveCustomizedContest not implemented")
}
func (UnimplementedLobbyServer) FetchCustomizedContestOnlineInfo(context.Context, *ReqFetchCustomizedContestOnlineInfo) (*ResFetchCustomizedContestOnlineInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchCustomizedContestOnlineInfo not implemented")
}
func (UnimplementedLobbyServer) FetchCustomizedContestByContestId(context.Context, *ReqFetchCustomizedContestByContestId) (*ResFetchCustomizedContestByContestId, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchCustomizedContestByContestId not implemented")
}
func (UnimplementedLobbyServer) SignupCustomizedContest(context.Context, *ReqSignupCustomizedContest) (*ResSignupCustomizedContest, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignupCustomizedContest not implemented")
}
func (UnimplementedLobbyServer) StartCustomizedContest(context.Context, *ReqStartCustomizedContest) (*ResCommon, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartCustomizedContest not implemented")
}
func (UnimplementedLobbyServer) StopCustomizedContest(context.Context, *ReqStopCustomizedContest) (*ResCommon, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopCustomizedContest not implemented")
}
func (UnimplementedLobbyServer) JoinCustomizedContestChatRoom(context.Context, *ReqJoinCustomizedContestChatRoom) (*ResJoinCustomizedContestChatRoom, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JoinCustomizedContestChatRoom not implemented")
}
func (UnimplementedLobbyServer) LeaveCustomizedContestChatRoom(context.Context, *ReqCommon) (*ResCommon, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LeaveCustomizedContestChatRoom not implemented")
}
func (UnimplementedLobbyServer) SayChatMessage(context.Context, *ReqSayChatMessage) (*ResCommon, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SayChatMessage not implemented")
}
func (UnimplementedLobbyServer) FetchCustomizedContestGameRecords(context.Context, *ReqFetchCustomizedContestGameRecords) (*ResFetchCustomizedContestGameRecords, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchCustomizedContestGameRecords not implemented")
}
func (UnimplementedLobbyServer) FetchCustomizedContestGameLiveList(context.Context, *ReqFetchCustomizedContestGameLiveList) (*ResFetchCustomizedContestGameLiveList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchCustomizedContestGameLiveList not implemented")
}
func (UnimplementedLobbyServer) FollowCustomizedContest(context.Context, *ReqTargetCustomizedContest) (*ResCommon, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FollowCustomizedContest not implemented")
}
func (UnimplementedLobbyServer) UnfollowCustomizedContest(context.Context, *ReqTargetCustomizedContest) (*ResCommon, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnfollowCustomizedContest not implemented")
}
func (UnimplementedLobbyServer) FetchActivityList(context.Context, *ReqCommon) (*ResActivityList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchActivityList not implemented")
}
func (UnimplementedLobbyServer) FetchAccountActivityData(context.Context, *ReqCommon) (*ResAccountActivityData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchAccountActivityData not implemented")
}
func (UnimplementedLobbyServer) ExchangeActivityItem(context.Context, *ReqExchangeActivityItem) (*ResExchangeActivityItem, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExchangeActivityItem not implemented")
}
func (UnimplementedLobbyServer) CompleteActivityTask(context.Context, *ReqCompleteActivityTask) (*ResCommon, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CompleteActivityTask not implemented")
}
func (UnimplementedLobbyServer) CompleteActivityTaskBatch(context.Context, *ReqCompleteActivityTaskBatch) (*ResCommon, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CompleteActivityTaskBatch not implemented")
}
func (UnimplementedLobbyServer) CompleteActivityFlipTask(context.Context, *ReqCompleteActivityTask) (*ResCommon, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CompleteActivityFlipTask not implemented")
}
func (UnimplementedLobbyServer) CompletePeriodActivityTask(context.Context, *ReqCompleteActivityTask) (*ResCommon, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CompletePeriodActivityTask not implemented")
}
func (UnimplementedLobbyServer) CompletePeriodActivityTaskBatch(context.Context, *ReqCompletePeriodActivityTaskBatch) (*ResCommon, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CompletePeriodActivityTaskBatch not implemented")
}
func (UnimplementedLobbyServer) CompleteRandomActivityTask(context.Context, *ReqCompleteActivityTask) (*ResCommon, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CompleteRandomActivityTask not implemented")
}
func (UnimplementedLobbyServer) ReceiveActivityFlipTask(context.Context, *ReqReceiveActivityFlipTask) (*ResReceiveActivityFlipTask, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReceiveActivityFlipTask not implemented")
}
func (UnimplementedLobbyServer) CompleteSegmentTaskReward(context.Context, *ReqCompleteSegmentTaskReward) (*ResCompleteSegmentTaskReward, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CompleteSegmentTaskReward not implemented")
}
func (UnimplementedLobbyServer) FetchActivityFlipInfo(context.Context, *ReqFetchActivityFlipInfo) (*ResFetchActivityFlipInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchActivityFlipInfo not implemented")
}
func (UnimplementedLobbyServer) GainAccumulatedPointActivityReward(context.Context, *ReqGainAccumulatedPointActivityReward) (*ResCommon, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GainAccumulatedPointActivityReward not implemented")
}
func (UnimplementedLobbyServer) GainMultiPointActivityReward(context.Context, *ReqGainMultiPointActivityReward) (*ResCommon, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GainMultiPointActivityReward not implemented")
}
func (UnimplementedLobbyServer) FetchRankPointLeaderboard(context.Context, *ReqFetchRankPointLeaderboard) (*ResFetchRankPointLeaderboard, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchRankPointLeaderboard not implemented")
}
func (UnimplementedLobbyServer) GainRankPointReward(context.Context, *ReqGainRankPointReward) (*ResCommon, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GainRankPointReward not implemented")
}
func (UnimplementedLobbyServer) RichmanActivityNextMove(context.Context, *ReqRichmanNextMove) (*ResRichmanNextMove, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RichmanActivityNextMove not implemented")
}
func (UnimplementedLobbyServer) RichmanAcitivitySpecialMove(context.Context, *ReqRichmanSpecialMove) (*ResRichmanNextMove, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RichmanAcitivitySpecialMove not implemented")
}
func (UnimplementedLobbyServer) RichmanActivityChestInfo(context.Context, *ReqRichmanChestInfo) (*ResRichmanChestInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RichmanActivityChestInfo not implemented")
}
func (UnimplementedLobbyServer) CreateGameObserveAuth(context.Context, *ReqCreateGameObserveAuth) (*ResCreateGameObserveAuth, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateGameObserveAuth not implemented")
}
func (UnimplementedLobbyServer) RefreshGameObserveAuth(context.Context, *ReqRefreshGameObserveAuth) (*ResRefreshGameObserveAuth, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RefreshGameObserveAuth not implemented")
}
func (UnimplementedLobbyServer) FetchActivityBuff(context.Context, *ReqCommon) (*ResActivityBuff, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchActivityBuff not implemented")
}
func (UnimplementedLobbyServer) UpgradeActivityBuff(context.Context, *ReqUpgradeActivityBuff) (*ResActivityBuff, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpgradeActivityBuff not implemented")
}
func (UnimplementedLobbyServer) UpgradeActivityLevel(context.Context, *ReqUpgradeActivityLevel) (*ResUpgradeActivityLevel, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpgradeActivityLevel not implemented")
}
func (UnimplementedLobbyServer) ReceiveUpgradeActivityReward(context.Context, *ReqReceiveUpgradeActivityReward) (*ResReceiveUpgradeActivityReward, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReceiveUpgradeActivityReward not implemented")
}
func (UnimplementedLobbyServer) UpgradeChallenge(context.Context, *ReqCommon) (*ResUpgradeChallenge, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpgradeChallenge not implemented")
}
func (UnimplementedLobbyServer) RefreshChallenge(context.Context, *ReqCommon) (*ResRefreshChallenge, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RefreshChallenge not implemented")
}
func (UnimplementedLobbyServer) FetchChallengeInfo(context.Context, *ReqCommon) (*ResFetchChallengeInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchChallengeInfo not implemented")
}
func (UnimplementedLobbyServer) ForceCompleteChallengeTask(context.Context, *ReqForceCompleteChallengeTask) (*ResCommon, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ForceCompleteChallengeTask not implemented")
}
func (UnimplementedLobbyServer) FetchChallengeSeason(context.Context, *ReqCommon) (*ResChallengeSeasonInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchChallengeSeason not implemented")
}
func (UnimplementedLobbyServer) ReceiveChallengeRankReward(context.Context, *ReqReceiveChallengeRankReward) (*ResReceiveChallengeRankReward, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReceiveChallengeRankReward not implemented")
}
func (UnimplementedLobbyServer) FetchABMatchInfo(context.Context, *ReqCommon) (*ResFetchABMatch, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchABMatchInfo not implemented")
}
func (UnimplementedLobbyServer) BuyInABMatch(context.Context, *ReqBuyInABMatch) (*ResCommon, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BuyInABMatch not implemented")
}
func (UnimplementedLobbyServer) ReceiveABMatchReward(context.Context, *ReqCommon) (*ResCommon, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReceiveABMatchReward not implemented")
}
func (UnimplementedLobbyServer) QuitABMatch(context.Context, *ReqCommon) (*ResCommon, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QuitABMatch not implemented")
}
func (UnimplementedLobbyServer) StartUnifiedMatch(context.Context, *ReqStartUnifiedMatch) (*ResCommon, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartUnifiedMatch not implemented")
}
func (UnimplementedLobbyServer) CancelUnifiedMatch(context.Context, *ReqCancelUnifiedMatch) (*ResCommon, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelUnifiedMatch not implemented")
}
func (UnimplementedLobbyServer) FetchGamePointRank(context.Context, *ReqGamePointRank) (*ResGamePointRank, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchGamePointRank not implemented")
}
func (UnimplementedLobbyServer) FetchSelfGamePointRank(context.Context, *ReqGamePointRank) (*ResFetchSelfGamePointRank, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchSelfGamePointRank not implemented")
}
func (UnimplementedLobbyServer) ReadSNS(context.Context, *ReqReadSNS) (*ResReadSNS, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadSNS not implemented")
}
func (UnimplementedLobbyServer) ReplySNS(context.Context, *ReqReplySNS) (*ResReplySNS, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReplySNS not implemented")
}
func (UnimplementedLobbyServer) LikeSNS(context.Context, *ReqLikeSNS) (*ResLikeSNS, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LikeSNS not implemented")
}
func (UnimplementedLobbyServer) DigMine(context.Context, *ReqDigMine) (*ResDigMine, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DigMine not implemented")
}
func (UnimplementedLobbyServer) FetchLastPrivacy(context.Context, *ReqFetchLastPrivacy) (*ResFetchLastPrivacy, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchLastPrivacy not implemented")
}
func (UnimplementedLobbyServer) CheckPrivacy(context.Context, *ReqCheckPrivacy) (*ResCommon, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckPrivacy not implemented")
}
func (UnimplementedLobbyServer) ResponseCaptcha(context.Context, *ReqResponseCaptcha) (*ResCommon, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResponseCaptcha not implemented")
}
func (UnimplementedLobbyServer) FetchRPGBattleHistory(context.Context, *ReqFetchRPGBattleHistory) (*ResFetchRPGBattleHistory, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchRPGBattleHistory not implemented")
}
func (UnimplementedLobbyServer) FetchRPGBattleHistoryV2(context.Context, *ReqFetchRPGBattleHistory) (*ResFetchRPGBattleHistoryV2, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchRPGBattleHistoryV2 not implemented")
}
func (UnimplementedLobbyServer) ReceiveRPGRewards(context.Context, *ReqReceiveRPGRewards) (*ResReceiveRPGRewards, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReceiveRPGRewards not implemented")
}
func (UnimplementedLobbyServer) ReceiveRPGReward(context.Context, *ReqReceiveRPGReward) (*ResReceiveRPGRewards, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReceiveRPGReward not implemented")
}
func (UnimplementedLobbyServer) BuyArenaTicket(context.Context, *ReqBuyArenaTicket) (*ResCommon, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BuyArenaTicket not implemented")
}
func (UnimplementedLobbyServer) EnterArena(context.Context, *ReqEnterArena) (*ResCommon, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnterArena not implemented")
}
func (UnimplementedLobbyServer) ReceiveArenaReward(context.Context, *ReqArenaReward) (*ResArenaReward, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReceiveArenaReward not implemented")
}
func (UnimplementedLobbyServer) FetchOBToken(context.Context, *ReqFetchOBToken) (*ResFetchOBToken, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchOBToken not implemented")
}
func (UnimplementedLobbyServer) ReceiveCharacterRewards(context.Context, *ReqReceiveCharacterRewards) (*ResReceiveCharacterRewards, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReceiveCharacterRewards not implemented")
}
func (UnimplementedLobbyServer) FeedActivityFeed(context.Context, *ReqFeedActivityFeed) (*ResFeedActivityFeed, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FeedActivityFeed not implemented")
}
func (UnimplementedLobbyServer) SendActivityGiftToFriend(context.Context, *ReqSendActivityGiftToFriend) (*ResSendActivityGiftToFriend, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendActivityGiftToFriend not implemented")
}
func (UnimplementedLobbyServer) ReceiveActivityGift(context.Context, *ReqReceiveActivityGift) (*ResCommon, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReceiveActivityGift not implemented")
}
func (UnimplementedLobbyServer) ReceiveAllActivityGift(context.Context, *ReqReceiveAllActivityGift) (*ResReceiveAllActivityGift, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReceiveAllActivityGift not implemented")
}
func (UnimplementedLobbyServer) FetchFriendGiftActivityData(context.Context, *ReqFetchFriendGiftActivityData) (*ResFetchFriendGiftActivityData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchFriendGiftActivityData not implemented")
}
func (UnimplementedLobbyServer) OpenPreChestItem(context.Context, *ReqOpenPreChestItem) (*ResOpenPreChestItem, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OpenPreChestItem not implemented")
}
func (UnimplementedLobbyServer) FetchVoteActivity(context.Context, *ReqFetchVoteActivity) (*ResFetchVoteActivity, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchVoteActivity not implemented")
}
func (UnimplementedLobbyServer) VoteActivity(context.Context, *ReqVoteActivity) (*ResVoteActivity, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoteActivity not implemented")
}
func (UnimplementedLobbyServer) UnlockActivitySpot(context.Context, *ReqUnlockActivitySpot) (*ResCommon, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnlockActivitySpot not implemented")
}
func (UnimplementedLobbyServer) UnlockActivitySpotEnding(context.Context, *ReqUnlockActivitySpotEnding) (*ResCommon, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnlockActivitySpotEnding not implemented")
}
func (UnimplementedLobbyServer) ReceiveActivitySpotReward(context.Context, *ReqReceiveActivitySpotReward) (*ResReceiveActivitySpotReward, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReceiveActivitySpotReward not implemented")
}
func (UnimplementedLobbyServer) DeleteAccount(context.Context, *ReqCommon) (*ResDeleteAccount, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAccount not implemented")
}
func (UnimplementedLobbyServer) CancelDeleteAccount(context.Context, *ReqCommon) (*ResCommon, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelDeleteAccount not implemented")
}
func (UnimplementedLobbyServer) LogReport(context.Context, *ReqLogReport) (*ResCommon, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LogReport not implemented")
}
func (UnimplementedLobbyServer) BindOauth2(context.Context, *ReqBindOauth2) (*ResCommon, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BindOauth2 not implemented")
}
func (UnimplementedLobbyServer) FetchOauth2Info(context.Context, *ReqFetchOauth2) (*ResFetchOauth2, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchOauth2Info not implemented")
}
func (UnimplementedLobbyServer) SetLoadingImage(context.Context, *ReqSetLoadingImage) (*ResCommon, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetLoadingImage not implemented")
}
func (UnimplementedLobbyServer) FetchShopInterval(context.Context, *ReqCommon) (*ResFetchShopInterval, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchShopInterval not implemented")
}
func (UnimplementedLobbyServer) FetchActivityInterval(context.Context, *ReqCommon) (*ResFetchActivityInterval, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchActivityInterval not implemented")
}
func (UnimplementedLobbyServer) FetchRecentFriend(context.Context, *ReqCommon) (*ResFetchrecentFriend, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchRecentFriend not implemented")
}
func (UnimplementedLobbyServer) OpenGacha(context.Context, *ReqOpenGacha) (*ResOpenGacha, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OpenGacha not implemented")
}
func (UnimplementedLobbyServer) TaskRequest(context.Context, *ReqTaskRequest) (*ResCommon, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TaskRequest not implemented")
}
func (UnimplementedLobbyServer) SimulationActivityTrain(context.Context, *ReqSimulationActivityTrain) (*ResSimulationActivityTrain, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SimulationActivityTrain not implemented")
}
func (UnimplementedLobbyServer) FetchSimulationGameRecord(context.Context, *ReqFetchSimulationGameRecord) (*ResFetchSimulationGameRecord, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchSimulationGameRecord not implemented")
}
func (UnimplementedLobbyServer) StartSimulationActivityGame(context.Context, *ReqStartSimulationActivityGame) (*ResStartSimulationActivityGame, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartSimulationActivityGame not implemented")
}
func (UnimplementedLobbyServer) FetchSimulationGameRank(context.Context, *ReqFetchSimulationGameRank) (*ResFetchSimulationGameRank, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchSimulationGameRank not implemented")
}
func (UnimplementedLobbyServer) GenerateCombiningCraft(context.Context, *ReqGenerateCombiningCraft) (*ResGenerateCombiningCraft, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateCombiningCraft not implemented")
}
func (UnimplementedLobbyServer) MoveCombiningCraft(context.Context, *ReqMoveCombiningCraft) (*ResMoveCombiningCraft, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MoveCombiningCraft not implemented")
}
func (UnimplementedLobbyServer) CombiningRecycleCraft(context.Context, *ReqCombiningRecycleCraft) (*ResCombiningRecycleCraft, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CombiningRecycleCraft not implemented")
}
func (UnimplementedLobbyServer) RecoverCombiningRecycle(context.Context, *ReqRecoverCombiningRecycle) (*ResRecoverCombiningRecycle, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecoverCombiningRecycle not implemented")
}
func (UnimplementedLobbyServer) FinishCombiningOrder(context.Context, *ReqFinishCombiningOrder) (*ResFinishCombiningOrder, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FinishCombiningOrder not implemented")
}
func (UnimplementedLobbyServer) UpgradeVillageBuilding(context.Context, *ReqUpgradeVillageBuilding) (*ResCommon, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpgradeVillageBuilding not implemented")
}
func (UnimplementedLobbyServer) ReceiveVillageBuildingReward(context.Context, *ReqReceiveVillageBuildingReward) (*ResReceiveVillageBuildingReward, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReceiveVillageBuildingReward not implemented")
}
func (UnimplementedLobbyServer) StartVillageTrip(context.Context, *ReqStartVillageTrip) (*ResCommon, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartVillageTrip not implemented")
}
func (UnimplementedLobbyServer) ReceiveVillageTripReward(context.Context, *ReqReceiveVillageTripReward) (*ResReceiveVillageTripReward, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReceiveVillageTripReward not implemented")
}
func (UnimplementedLobbyServer) CompleteVillageTask(context.Context, *ReqCompleteVillageTask) (*ResCompleteVillageTask, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CompleteVillageTask not implemented")
}
func (UnimplementedLobbyServer) GetFriendVillageData(context.Context, *ReqGetFriendVillageData) (*ResGetFriendVillageData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFriendVillageData not implemented")
}
func (UnimplementedLobbyServer) SetVillageWorker(context.Context, *ReqSetVillageWorker) (*ResSetVillageWorker, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetVillageWorker not implemented")
}
func (UnimplementedLobbyServer) NextRoundVillage(context.Context, *ReqNextRoundVillage) (*ResNextRoundVillage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NextRoundVillage not implemented")
}
func (UnimplementedLobbyServer) ResolveFestivalActivityProposal(context.Context, *ReqResolveFestivalActivityProposal) (*ResResolveFestivalActivityProposal, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResolveFestivalActivityProposal not implemented")
}
func (UnimplementedLobbyServer) ResolveFestivalActivityEvent(context.Context, *ReqResolveFestivalActivityEvent) (*ResResolveFestivalActivityEvent, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResolveFestivalActivityEvent not implemented")
}
func (UnimplementedLobbyServer) BuyFestivalProposal(context.Context, *ReqBuyFestivalProposal) (*ResBuyFestivalProposal, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BuyFestivalProposal not implemented")
}
func (UnimplementedLobbyServer) IslandActivityMove(context.Context, *ReqIslandActivityMove) (*ResCommon, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IslandActivityMove not implemented")
}
func (UnimplementedLobbyServer) IslandActivityBuy(context.Context, *ReqIslandActivityBuy) (*ResCommon, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IslandActivityBuy not implemented")
}
func (UnimplementedLobbyServer) IslandActivitySell(context.Context, *ReqIslandActivitySell) (*ResCommon, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IslandActivitySell not implemented")
}
func (UnimplementedLobbyServer) IslandActivityTidyBag(context.Context, *ReqIslandActivityTidyBag) (*ResCommon, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IslandActivityTidyBag not implemented")
}
func (UnimplementedLobbyServer) IslandActivityUnlockBagGrid(context.Context, *ReqIslandActivityUnlockBagGrid) (*ResCommon, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IslandActivityUnlockBagGrid not implemented")
}
func (UnimplementedLobbyServer) CreateCustomizedContest(context.Context, *ReqCreateCustomizedContest) (*ResCreateCustomizedContest, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCustomizedContest not implemented")
}
func (UnimplementedLobbyServer) FetchManagerCustomizedContestList(context.Context, *ReqFetchmanagerCustomizedContestList) (*ResFetchManagerCustomizedContestList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchManagerCustomizedContestList not implemented")
}
func (UnimplementedLobbyServer) FetchManagerCustomizedContest(context.Context, *ReqFetchManagerCustomizedContest) (*ResFetchManagerCustomizedContest, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchManagerCustomizedContest not implemented")
}
func (UnimplementedLobbyServer) UpdateManagerCustomizedContest(context.Context, *ReqUpdateManagerCustomizedContest) (*ResCommon, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateManagerCustomizedContest not implemented")
}
func (UnimplementedLobbyServer) FetchContestPlayerRank(context.Context, *ReqFetchContestPlayerRank) (*ResFetchContestPlayerRank, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchContestPlayerRank not implemented")
}
func (UnimplementedLobbyServer) FetchReadyPlayerList(context.Context, *ReqFetchReadyPlayerList) (*ResFetchReadyPlayerList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchReadyPlayerList not implemented")
}
func (UnimplementedLobbyServer) CreateGamePlan(context.Context, *ReqCreateGamePlan) (*ResCommon, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateGamePlan not implemented")
}
func (UnimplementedLobbyServer) GenerateContestManagerLoginCode(context.Context, *ReqCommon) (*ResGenerateContestManagerLoginCode, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateContestManagerLoginCode not implemented")
}
func (UnimplementedLobbyServer) AmuletActivityStartGame(context.Context, *ReqAmuletActivityStartGame) (*ResAmuletActivityStartGame, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AmuletActivityStartGame not implemented")
}
func (UnimplementedLobbyServer) AmuletActivityOperate(context.Context, *ReqAmuletActivityOperate) (*ResAmuletActivityOperate, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AmuletActivityOperate not implemented")
}
func (UnimplementedLobbyServer) AmuletActivityChangeHands(context.Context, *ReqAmuletActivityChangeHands) (*ResAmuletActivityChangeHands, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AmuletActivityChangeHands not implemented")
}
func (UnimplementedLobbyServer) AmuletActivityUpgrade(context.Context, *ReqAmuletActivityUpgrade) (*ResAmuletActivityUpgrade, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AmuletActivityUpgrade not implemented")
}
func (UnimplementedLobbyServer) AmuletActivityBuy(context.Context, *ReqAmuletActivityBuy) (*ResAmuletActivityBuy, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AmuletActivityBuy not implemented")
}
func (UnimplementedLobbyServer) AmuletActivitySelectPack(context.Context, *ReqAmuletActivitySelectPack) (*ResAmuletActivitySelectPack, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AmuletActivitySelectPack not implemented")
}
func (UnimplementedLobbyServer) AmuletActivitySellEffect(context.Context, *ReqAmuletActivitySellEffect) (*ResAmuletActivitySellEffect, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AmuletActivitySellEffect not implemented")
}
func (UnimplementedLobbyServer) AmuletActivityEffectSort(context.Context, *ReqAmuletActivityEffectSort) (*ResCommon, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AmuletActivityEffectSort not implemented")
}
func (UnimplementedLobbyServer) AmuletActivityGiveup(context.Context, *ReqAmuletActivityGiveup) (*ResCommon, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AmuletActivityGiveup not implemented")
}
func (UnimplementedLobbyServer) AmuletActivityRefreshShop(context.Context, *ReqAmuletActivityRefreshShop) (*ResAmuletActivityRefreshShop, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AmuletActivityRefreshShop not implemented")
}
func (UnimplementedLobbyServer) AmuletActivitySelectFreeEffect(context.Context, *ReqAmuletActivitySelectFreeEffect) (*ResAmuletActivitySelectFreeEffect, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AmuletActivitySelectFreeEffect not implemented")
}
func (UnimplementedLobbyServer) AmuletActivityUpgradeShopBuff(context.Context, *ReqAmuletActivityUpgradeShopBuff) (*ResAmuletActivityUpgradeShopBuff, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AmuletActivityUpgradeShopBuff not implemented")
}
func (UnimplementedLobbyServer) AmuletActivityEndShopping(context.Context, *ReqAmuletActivityEndShopping) (*ResAmuletActivityEndShopping, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AmuletActivityEndShopping not implemented")
}
func (UnimplementedLobbyServer) AmuletActivitySetSkillLevel(context.Context, *ReqAmuletActivitySetSkillLevel) (*ResCommon, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AmuletActivitySetSkillLevel not implemented")
}
func (UnimplementedLobbyServer) AmuletActivityMaintainInfo(context.Context, *ReqCommon) (*ResAmuletActivityMaintainInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AmuletActivityMaintainInfo not implemented")
}
func (UnimplementedLobbyServer) StoryActivityUnlock(context.Context, *ReqStoryActivityUnlock) (*ResCommon, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StoryActivityUnlock not implemented")
}
func (UnimplementedLobbyServer) StoryActivityUnlockEnding(context.Context, *ReqStoryActivityUnlockEnding) (*ResCommon, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StoryActivityUnlockEnding not implemented")
}
func (UnimplementedLobbyServer) StoryActivityReceiveEndingReward(context.Context, *ReqStoryActivityReceiveEndingReward) (*ResStoryReward, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StoryActivityReceiveEndingReward not implemented")
}
func (UnimplementedLobbyServer) StoryActivityReceiveFinishReward(context.Context, *ReqStoryActivityReceiveFinishReward) (*ResStoryReward, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StoryActivityReceiveFinishReward not implemented")
}
func (UnimplementedLobbyServer) StoryActivityReceiveAllFinishReward(context.Context, *ReqStoryActivityReceiveAllFinishReward) (*ResStoryReward, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StoryActivityReceiveAllFinishReward not implemented")
}
func (UnimplementedLobbyServer) StoryActivityUnlockEndingAndReceive(context.Context, *ReqStoryActivityUnlockEndingAndReceive) (*ResStoryActivityUnlockEndingAndReceive, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StoryActivityUnlockEndingAndReceive not implemented")
}
func (UnimplementedLobbyServer) FetchActivityRank(context.Context, *ReqFetchActivityRank) (*ResFetchActivityRank, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchActivityRank not implemented")
}
func (UnimplementedLobbyServer) SetVerifiedHidden(context.Context, *ReqSetVerifiedHidden) (*ResCommon, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetVerifiedHidden not implemented")
}
func (UnimplementedLobbyServer) FetchQuestionnaireList(context.Context, *ReqFetchQuestionnaireList) (*ResFetchQuestionnaireList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchQuestionnaireList not implemented")
}
func (UnimplementedLobbyServer) FetchQuestionnaireDetail(context.Context, *ReqFetchQuestionnaireDetail) (*ResFetchQuestionnaireDetail, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchQuestionnaireDetail not implemented")
}
func (UnimplementedLobbyServer) SubmitQuestionnaire(context.Context, *ReqSubmitQuestionnaire) (*ResCommon, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitQuestionnaire not implemented")
}
func (UnimplementedLobbyServer) mustEmbedUnimplementedLobbyServer() {}
func (UnimplementedLobbyServer) testEmbeddedByValue()               {}

// UnsafeLobbyServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LobbyServer will
// result in compilation errors.
type UnsafeLobbyServer interface {
	mustEmbedUnimplementedLobbyServer()
}

func RegisterLobbyServer(s grpc.ServiceRegistrar, srv LobbyServer) {
	// If the following call pancis, it indicates UnimplementedLobbyServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Lobby_ServiceDesc, srv)
}

func _Lobby_FetchConnectionInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqCommon)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).FetchConnectionInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_FetchConnectionInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).FetchConnectionInfo(ctx, req.(*ReqCommon))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_FetchQueueInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqCommon)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).FetchQueueInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_FetchQueueInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).FetchQueueInfo(ctx, req.(*ReqCommon))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_CancelQueue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqCommon)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).CancelQueue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_CancelQueue_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).CancelQueue(ctx, req.(*ReqCommon))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_OpenidCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqOpenidCheck)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).OpenidCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_OpenidCheck_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).OpenidCheck(ctx, req.(*ReqOpenidCheck))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_Signup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqSignupAccount)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).Signup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_Signup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).Signup(ctx, req.(*ReqSignupAccount))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqLogin)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_Login_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).Login(ctx, req.(*ReqLogin))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_FetchInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqCommon)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).FetchInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_FetchInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).FetchInfo(ctx, req.(*ReqCommon))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_LoginSuccess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqCommon)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).LoginSuccess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_LoginSuccess_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).LoginSuccess(ctx, req.(*ReqCommon))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_FetchServerMaintenanceInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqCommon)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).FetchServerMaintenanceInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_FetchServerMaintenanceInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).FetchServerMaintenanceInfo(ctx, req.(*ReqCommon))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_EmailLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqEmailLogin)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).EmailLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_EmailLogin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).EmailLogin(ctx, req.(*ReqEmailLogin))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_Oauth2Auth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqOauth2Auth)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).Oauth2Auth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_Oauth2Auth_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).Oauth2Auth(ctx, req.(*ReqOauth2Auth))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_Oauth2Check_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqOauth2Check)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).Oauth2Check(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_Oauth2Check_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).Oauth2Check(ctx, req.(*ReqOauth2Check))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_Oauth2Signup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqOauth2Signup)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).Oauth2Signup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_Oauth2Signup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).Oauth2Signup(ctx, req.(*ReqOauth2Signup))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_Oauth2Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqOauth2Login)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).Oauth2Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_Oauth2Login_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).Oauth2Login(ctx, req.(*ReqOauth2Login))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_DmmPreLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqDMMPreLogin)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).DmmPreLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_DmmPreLogin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).DmmPreLogin(ctx, req.(*ReqDMMPreLogin))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_CreatePhoneVerifyCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqCreatePhoneVerifyCode)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).CreatePhoneVerifyCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_CreatePhoneVerifyCode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).CreatePhoneVerifyCode(ctx, req.(*ReqCreatePhoneVerifyCode))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_CreateEmailVerifyCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqCreateEmailVerifyCode)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).CreateEmailVerifyCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_CreateEmailVerifyCode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).CreateEmailVerifyCode(ctx, req.(*ReqCreateEmailVerifyCode))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_VerfifyCodeForSecure_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqVerifyCodeForSecure)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).VerfifyCodeForSecure(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_VerfifyCodeForSecure_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).VerfifyCodeForSecure(ctx, req.(*ReqVerifyCodeForSecure))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_BindPhoneNumber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqBindPhoneNumber)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).BindPhoneNumber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_BindPhoneNumber_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).BindPhoneNumber(ctx, req.(*ReqBindPhoneNumber))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_UnbindPhoneNumber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqUnbindPhoneNumber)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).UnbindPhoneNumber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_UnbindPhoneNumber_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).UnbindPhoneNumber(ctx, req.(*ReqUnbindPhoneNumber))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_FetchPhoneLoginBind_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqCommon)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).FetchPhoneLoginBind(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_FetchPhoneLoginBind_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).FetchPhoneLoginBind(ctx, req.(*ReqCommon))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_CreatePhoneLoginBind_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqCreatePhoneLoginBind)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).CreatePhoneLoginBind(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_CreatePhoneLoginBind_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).CreatePhoneLoginBind(ctx, req.(*ReqCreatePhoneLoginBind))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_BindEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqBindEmail)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).BindEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_BindEmail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).BindEmail(ctx, req.(*ReqBindEmail))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_ModifyPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqModifyPassword)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).ModifyPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_ModifyPassword_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).ModifyPassword(ctx, req.(*ReqModifyPassword))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_BindAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqBindAccount)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).BindAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_BindAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).BindAccount(ctx, req.(*ReqBindAccount))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_Logout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqLogout)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).Logout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_Logout_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).Logout(ctx, req.(*ReqLogout))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_Heatbeat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqHeatBeat)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).Heatbeat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_Heatbeat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).Heatbeat(ctx, req.(*ReqHeatBeat))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_LoginBeat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqLoginBeat)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).LoginBeat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_LoginBeat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).LoginBeat(ctx, req.(*ReqLoginBeat))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_CreateNickname_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqCreateNickname)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).CreateNickname(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_CreateNickname_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).CreateNickname(ctx, req.(*ReqCreateNickname))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_ModifyNickname_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqModifyNickname)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).ModifyNickname(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_ModifyNickname_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).ModifyNickname(ctx, req.(*ReqModifyNickname))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_ModifyBirthday_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqModifyBirthday)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).ModifyBirthday(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_ModifyBirthday_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).ModifyBirthday(ctx, req.(*ReqModifyBirthday))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_FetchRoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqCommon)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).FetchRoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_FetchRoom_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).FetchRoom(ctx, req.(*ReqCommon))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_FetchGamingInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqCommon)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).FetchGamingInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_FetchGamingInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).FetchGamingInfo(ctx, req.(*ReqCommon))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_CreateRoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqCreateRoom)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).CreateRoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_CreateRoom_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).CreateRoom(ctx, req.(*ReqCreateRoom))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_JoinRoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqJoinRoom)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).JoinRoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_JoinRoom_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).JoinRoom(ctx, req.(*ReqJoinRoom))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_LeaveRoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqCommon)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).LeaveRoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_LeaveRoom_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).LeaveRoom(ctx, req.(*ReqCommon))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_ReadyPlay_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqRoomReady)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).ReadyPlay(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_ReadyPlay_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).ReadyPlay(ctx, req.(*ReqRoomReady))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_DressingStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqRoomDressing)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).DressingStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_DressingStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).DressingStatus(ctx, req.(*ReqRoomDressing))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_StartRoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqRoomStart)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).StartRoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_StartRoom_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).StartRoom(ctx, req.(*ReqRoomStart))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_RoomKickPlayer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqRoomKickPlayer)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).RoomKickPlayer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_RoomKickPlayer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).RoomKickPlayer(ctx, req.(*ReqRoomKickPlayer))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_ModifyRoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqModifyRoom)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).ModifyRoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_ModifyRoom_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).ModifyRoom(ctx, req.(*ReqModifyRoom))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_AddRoomRobot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqAddRoomRobot)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).AddRoomRobot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_AddRoomRobot_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).AddRoomRobot(ctx, req.(*ReqAddRoomRobot))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_MatchGame_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqJoinMatchQueue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).MatchGame(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_MatchGame_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).MatchGame(ctx, req.(*ReqJoinMatchQueue))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_CancelMatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqCancelMatchQueue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).CancelMatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_CancelMatch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).CancelMatch(ctx, req.(*ReqCancelMatchQueue))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_FetchAccountInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqAccountInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).FetchAccountInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_FetchAccountInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).FetchAccountInfo(ctx, req.(*ReqAccountInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_ChangeAvatar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqChangeAvatar)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).ChangeAvatar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_ChangeAvatar_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).ChangeAvatar(ctx, req.(*ReqChangeAvatar))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_ReceiveVersionReward_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqCommon)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).ReceiveVersionReward(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_ReceiveVersionReward_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).ReceiveVersionReward(ctx, req.(*ReqCommon))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_FetchAccountStatisticInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqAccountStatisticInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).FetchAccountStatisticInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_FetchAccountStatisticInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).FetchAccountStatisticInfo(ctx, req.(*ReqAccountStatisticInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_FetchAccountChallengeRankInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqAccountInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).FetchAccountChallengeRankInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_FetchAccountChallengeRankInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).FetchAccountChallengeRankInfo(ctx, req.(*ReqAccountInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_FetchAccountCharacterInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqCommon)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).FetchAccountCharacterInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_FetchAccountCharacterInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).FetchAccountCharacterInfo(ctx, req.(*ReqCommon))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_ShopPurchase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqShopPurchase)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).ShopPurchase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_ShopPurchase_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).ShopPurchase(ctx, req.(*ReqShopPurchase))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_FetchGameRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqGameRecord)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).FetchGameRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_FetchGameRecord_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).FetchGameRecord(ctx, req.(*ReqGameRecord))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_ReadGameRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqGameRecord)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).ReadGameRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_ReadGameRecord_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).ReadGameRecord(ctx, req.(*ReqGameRecord))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_FetchGameRecordList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqGameRecordList)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).FetchGameRecordList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_FetchGameRecordList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).FetchGameRecordList(ctx, req.(*ReqGameRecordList))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_FetchGameRecordListV2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqGameRecordListV2)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).FetchGameRecordListV2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_FetchGameRecordListV2_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).FetchGameRecordListV2(ctx, req.(*ReqGameRecordListV2))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_FetchNextGameRecordList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqNextGameRecordList)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).FetchNextGameRecordList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_FetchNextGameRecordList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).FetchNextGameRecordList(ctx, req.(*ReqNextGameRecordList))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_FetchCollectedGameRecordList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqCommon)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).FetchCollectedGameRecordList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_FetchCollectedGameRecordList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).FetchCollectedGameRecordList(ctx, req.(*ReqCommon))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_FetchGameRecordsDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqGameRecordsDetail)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).FetchGameRecordsDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_FetchGameRecordsDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).FetchGameRecordsDetail(ctx, req.(*ReqGameRecordsDetail))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_FetchGameRecordsDetailV2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqGameRecordsDetailV2)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).FetchGameRecordsDetailV2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_FetchGameRecordsDetailV2_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).FetchGameRecordsDetailV2(ctx, req.(*ReqGameRecordsDetailV2))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_AddCollectedGameRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqAddCollectedGameRecord)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).AddCollectedGameRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_AddCollectedGameRecord_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).AddCollectedGameRecord(ctx, req.(*ReqAddCollectedGameRecord))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_RemoveCollectedGameRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqRemoveCollectedGameRecord)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).RemoveCollectedGameRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_RemoveCollectedGameRecord_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).RemoveCollectedGameRecord(ctx, req.(*ReqRemoveCollectedGameRecord))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_ChangeCollectedGameRecordRemarks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqChangeCollectedGameRecordRemarks)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).ChangeCollectedGameRecordRemarks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_ChangeCollectedGameRecordRemarks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).ChangeCollectedGameRecordRemarks(ctx, req.(*ReqChangeCollectedGameRecordRemarks))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_FetchLevelLeaderboard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqLevelLeaderboard)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).FetchLevelLeaderboard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_FetchLevelLeaderboard_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).FetchLevelLeaderboard(ctx, req.(*ReqLevelLeaderboard))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_FetchChallengeLeaderboard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqChallangeLeaderboard)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).FetchChallengeLeaderboard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_FetchChallengeLeaderboard_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).FetchChallengeLeaderboard(ctx, req.(*ReqChallangeLeaderboard))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_FetchMutiChallengeLevel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqMutiChallengeLevel)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).FetchMutiChallengeLevel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_FetchMutiChallengeLevel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).FetchMutiChallengeLevel(ctx, req.(*ReqMutiChallengeLevel))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_FetchMultiAccountBrief_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqMultiAccountId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).FetchMultiAccountBrief(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_FetchMultiAccountBrief_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).FetchMultiAccountBrief(ctx, req.(*ReqMultiAccountId))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_FetchFriendList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqCommon)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).FetchFriendList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_FetchFriendList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).FetchFriendList(ctx, req.(*ReqCommon))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_FetchFriendApplyList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqCommon)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).FetchFriendApplyList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_FetchFriendApplyList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).FetchFriendApplyList(ctx, req.(*ReqCommon))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_ApplyFriend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqApplyFriend)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).ApplyFriend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_ApplyFriend_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).ApplyFriend(ctx, req.(*ReqApplyFriend))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_HandleFriendApply_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqHandleFriendApply)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).HandleFriendApply(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_HandleFriendApply_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).HandleFriendApply(ctx, req.(*ReqHandleFriendApply))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_RemoveFriend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqRemoveFriend)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).RemoveFriend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_RemoveFriend_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).RemoveFriend(ctx, req.(*ReqRemoveFriend))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_SearchAccountById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqSearchAccountById)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).SearchAccountById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_SearchAccountById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).SearchAccountById(ctx, req.(*ReqSearchAccountById))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_SearchAccountByPattern_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqSearchAccountByPattern)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).SearchAccountByPattern(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_SearchAccountByPattern_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).SearchAccountByPattern(ctx, req.(*ReqSearchAccountByPattern))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_FetchAccountState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqAccountList)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).FetchAccountState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_FetchAccountState_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).FetchAccountState(ctx, req.(*ReqAccountList))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_FetchBagInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqCommon)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).FetchBagInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_FetchBagInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).FetchBagInfo(ctx, req.(*ReqCommon))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_UseBagItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqUseBagItem)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).UseBagItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_UseBagItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).UseBagItem(ctx, req.(*ReqUseBagItem))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_OpenManualItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqOpenManualItem)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).OpenManualItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_OpenManualItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).OpenManualItem(ctx, req.(*ReqOpenManualItem))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_OpenRandomRewardItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqOpenRandomRewardItem)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).OpenRandomRewardItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_OpenRandomRewardItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).OpenRandomRewardItem(ctx, req.(*ReqOpenRandomRewardItem))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_OpenAllRewardItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqOpenAllRewardItem)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).OpenAllRewardItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_OpenAllRewardItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).OpenAllRewardItem(ctx, req.(*ReqOpenAllRewardItem))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_ComposeShard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqComposeShard)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).ComposeShard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_ComposeShard_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).ComposeShard(ctx, req.(*ReqComposeShard))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_FetchAnnouncement_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqFetchAnnouncement)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).FetchAnnouncement(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_FetchAnnouncement_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).FetchAnnouncement(ctx, req.(*ReqFetchAnnouncement))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_ReadAnnouncement_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqReadAnnouncement)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).ReadAnnouncement(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_ReadAnnouncement_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).ReadAnnouncement(ctx, req.(*ReqReadAnnouncement))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_FetchMailInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqCommon)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).FetchMailInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_FetchMailInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).FetchMailInfo(ctx, req.(*ReqCommon))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_ReadMail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqReadMail)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).ReadMail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_ReadMail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).ReadMail(ctx, req.(*ReqReadMail))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_DeleteMail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqDeleteMail)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).DeleteMail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_DeleteMail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).DeleteMail(ctx, req.(*ReqDeleteMail))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_TakeAttachmentFromMail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqTakeAttachment)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).TakeAttachmentFromMail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_TakeAttachmentFromMail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).TakeAttachmentFromMail(ctx, req.(*ReqTakeAttachment))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_ReceiveAchievementReward_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqReceiveAchievementReward)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).ReceiveAchievementReward(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_ReceiveAchievementReward_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).ReceiveAchievementReward(ctx, req.(*ReqReceiveAchievementReward))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_ReceiveAchievementGroupReward_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqReceiveAchievementGroupReward)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).ReceiveAchievementGroupReward(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_ReceiveAchievementGroupReward_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).ReceiveAchievementGroupReward(ctx, req.(*ReqReceiveAchievementGroupReward))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_FetchAchievementRate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqCommon)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).FetchAchievementRate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_FetchAchievementRate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).FetchAchievementRate(ctx, req.(*ReqCommon))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_FetchAchievement_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqCommon)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).FetchAchievement(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_FetchAchievement_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).FetchAchievement(ctx, req.(*ReqCommon))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_BuyShiLian_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqBuyShiLian)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).BuyShiLian(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_BuyShiLian_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).BuyShiLian(ctx, req.(*ReqBuyShiLian))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_MatchShiLian_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqCommon)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).MatchShiLian(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_MatchShiLian_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).MatchShiLian(ctx, req.(*ReqCommon))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_GoNextShiLian_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqCommon)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).GoNextShiLian(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_GoNextShiLian_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).GoNextShiLian(ctx, req.(*ReqCommon))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_UpdateClientValue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqUpdateClientValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).UpdateClientValue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_UpdateClientValue_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).UpdateClientValue(ctx, req.(*ReqUpdateClientValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_FetchClientValue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqCommon)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).FetchClientValue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_FetchClientValue_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).FetchClientValue(ctx, req.(*ReqCommon))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_ClientMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqClientMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).ClientMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_ClientMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).ClientMessage(ctx, req.(*ReqClientMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_FetchCurrentMatchInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqCurrentMatchInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).FetchCurrentMatchInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_FetchCurrentMatchInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).FetchCurrentMatchInfo(ctx, req.(*ReqCurrentMatchInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_UserComplain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqUserComplain)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).UserComplain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_UserComplain_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).UserComplain(ctx, req.(*ReqUserComplain))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_FetchReviveCoinInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqCommon)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).FetchReviveCoinInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_FetchReviveCoinInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).FetchReviveCoinInfo(ctx, req.(*ReqCommon))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_GainReviveCoin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqCommon)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).GainReviveCoin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_GainReviveCoin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).GainReviveCoin(ctx, req.(*ReqCommon))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_FetchDailyTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqCommon)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).FetchDailyTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_FetchDailyTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).FetchDailyTask(ctx, req.(*ReqCommon))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_RefreshDailyTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqRefreshDailyTask)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).RefreshDailyTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_RefreshDailyTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).RefreshDailyTask(ctx, req.(*ReqRefreshDailyTask))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_UseGiftCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqUseGiftCode)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).UseGiftCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_UseGiftCode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).UseGiftCode(ctx, req.(*ReqUseGiftCode))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_UseSpecialGiftCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqUseGiftCode)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).UseSpecialGiftCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_UseSpecialGiftCode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).UseSpecialGiftCode(ctx, req.(*ReqUseGiftCode))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_FetchTitleList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqCommon)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).FetchTitleList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_FetchTitleList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).FetchTitleList(ctx, req.(*ReqCommon))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_UseTitle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqUseTitle)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).UseTitle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_UseTitle_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).UseTitle(ctx, req.(*ReqUseTitle))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_SendClientMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqSendClientMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).SendClientMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_SendClientMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).SendClientMessage(ctx, req.(*ReqSendClientMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_FetchGameLiveInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqGameLiveInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).FetchGameLiveInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_FetchGameLiveInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).FetchGameLiveInfo(ctx, req.(*ReqGameLiveInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_FetchGameLiveLeftSegment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqGameLiveLeftSegment)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).FetchGameLiveLeftSegment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_FetchGameLiveLeftSegment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).FetchGameLiveLeftSegment(ctx, req.(*ReqGameLiveLeftSegment))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_FetchGameLiveList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqGameLiveList)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).FetchGameLiveList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_FetchGameLiveList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).FetchGameLiveList(ctx, req.(*ReqGameLiveList))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_FetchCommentSetting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqCommon)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).FetchCommentSetting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_FetchCommentSetting_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).FetchCommentSetting(ctx, req.(*ReqCommon))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_UpdateCommentSetting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqUpdateCommentSetting)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).UpdateCommentSetting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_UpdateCommentSetting_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).UpdateCommentSetting(ctx, req.(*ReqUpdateCommentSetting))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_FetchCommentList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqFetchCommentList)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).FetchCommentList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_FetchCommentList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).FetchCommentList(ctx, req.(*ReqFetchCommentList))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_FetchCommentContent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqFetchCommentContent)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).FetchCommentContent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_FetchCommentContent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).FetchCommentContent(ctx, req.(*ReqFetchCommentContent))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_LeaveComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqLeaveComment)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).LeaveComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_LeaveComment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).LeaveComment(ctx, req.(*ReqLeaveComment))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_DeleteComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqDeleteComment)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).DeleteComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_DeleteComment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).DeleteComment(ctx, req.(*ReqDeleteComment))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_UpdateReadComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqUpdateReadComment)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).UpdateReadComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_UpdateReadComment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).UpdateReadComment(ctx, req.(*ReqUpdateReadComment))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_FetchRollingNotice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqFetchRollingNotice)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).FetchRollingNotice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_FetchRollingNotice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).FetchRollingNotice(ctx, req.(*ReqFetchRollingNotice))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_FetchMaintainNotice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqCommon)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).FetchMaintainNotice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_FetchMaintainNotice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).FetchMaintainNotice(ctx, req.(*ReqCommon))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_FetchServerTime_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqCommon)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).FetchServerTime(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_FetchServerTime_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).FetchServerTime(ctx, req.(*ReqCommon))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_FetchPlatformProducts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqPlatformBillingProducts)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).FetchPlatformProducts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_FetchPlatformProducts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).FetchPlatformProducts(ctx, req.(*ReqPlatformBillingProducts))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_FetchRandomCharacter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqCommon)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).FetchRandomCharacter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_FetchRandomCharacter_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).FetchRandomCharacter(ctx, req.(*ReqCommon))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_SetRandomCharacter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqRandomCharacter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).SetRandomCharacter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_SetRandomCharacter_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).SetRandomCharacter(ctx, req.(*ReqRandomCharacter))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_CancelGooglePlayOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqCancelGooglePlayOrder)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).CancelGooglePlayOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_CancelGooglePlayOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).CancelGooglePlayOrder(ctx, req.(*ReqCancelGooglePlayOrder))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_OpenChest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqOpenChest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).OpenChest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_OpenChest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).OpenChest(ctx, req.(*ReqOpenChest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_BuyFromChestShop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqBuyFromChestShop)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).BuyFromChestShop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_BuyFromChestShop_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).BuyFromChestShop(ctx, req.(*ReqBuyFromChestShop))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_FetchDailySignInInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqCommon)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).FetchDailySignInInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_FetchDailySignInInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).FetchDailySignInInfo(ctx, req.(*ReqCommon))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_DoDailySignIn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqCommon)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).DoDailySignIn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_DoDailySignIn_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).DoDailySignIn(ctx, req.(*ReqCommon))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_DoActivitySignIn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqDoActivitySignIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).DoActivitySignIn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_DoActivitySignIn_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).DoActivitySignIn(ctx, req.(*ReqDoActivitySignIn))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_FetchCharacterInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqCommon)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).FetchCharacterInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_FetchCharacterInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).FetchCharacterInfo(ctx, req.(*ReqCommon))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_UpdateCharacterSort_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqUpdateCharacterSort)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).UpdateCharacterSort(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_UpdateCharacterSort_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).UpdateCharacterSort(ctx, req.(*ReqUpdateCharacterSort))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_ChangeMainCharacter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqChangeMainCharacter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).ChangeMainCharacter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_ChangeMainCharacter_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).ChangeMainCharacter(ctx, req.(*ReqChangeMainCharacter))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_ChangeCharacterSkin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqChangeCharacterSkin)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).ChangeCharacterSkin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_ChangeCharacterSkin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).ChangeCharacterSkin(ctx, req.(*ReqChangeCharacterSkin))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_ChangeCharacterView_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqChangeCharacterView)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).ChangeCharacterView(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_ChangeCharacterView_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).ChangeCharacterView(ctx, req.(*ReqChangeCharacterView))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_SetHiddenCharacter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqSetHiddenCharacter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).SetHiddenCharacter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_SetHiddenCharacter_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).SetHiddenCharacter(ctx, req.(*ReqSetHiddenCharacter))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_SendGiftToCharacter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqSendGiftToCharacter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).SendGiftToCharacter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_SendGiftToCharacter_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).SendGiftToCharacter(ctx, req.(*ReqSendGiftToCharacter))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_SellItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqSellItem)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).SellItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_SellItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).SellItem(ctx, req.(*ReqSellItem))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_FetchCommonView_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqCommon)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).FetchCommonView(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_FetchCommonView_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).FetchCommonView(ctx, req.(*ReqCommon))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_ChangeCommonView_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqChangeCommonView)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).ChangeCommonView(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_ChangeCommonView_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).ChangeCommonView(ctx, req.(*ReqChangeCommonView))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_SaveCommonViews_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqSaveCommonViews)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).SaveCommonViews(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_SaveCommonViews_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).SaveCommonViews(ctx, req.(*ReqSaveCommonViews))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_FetchCommonViews_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqCommonViews)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).FetchCommonViews(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_FetchCommonViews_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).FetchCommonViews(ctx, req.(*ReqCommonViews))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_FetchAllCommonViews_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqCommon)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).FetchAllCommonViews(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_FetchAllCommonViews_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).FetchAllCommonViews(ctx, req.(*ReqCommon))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_UseCommonView_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqUseCommonView)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).UseCommonView(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_UseCommonView_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).UseCommonView(ctx, req.(*ReqUseCommonView))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_UpgradeCharacter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqUpgradeCharacter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).UpgradeCharacter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_UpgradeCharacter_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).UpgradeCharacter(ctx, req.(*ReqUpgradeCharacter))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_AddFinishedEnding_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqFinishedEnding)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).AddFinishedEnding(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_AddFinishedEnding_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).AddFinishedEnding(ctx, req.(*ReqFinishedEnding))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_ReceiveEndingReward_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqFinishedEnding)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).ReceiveEndingReward(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_ReceiveEndingReward_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).ReceiveEndingReward(ctx, req.(*ReqFinishedEnding))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_GameMasterCommand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqGMCommand)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).GameMasterCommand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_GameMasterCommand_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).GameMasterCommand(ctx, req.(*ReqGMCommand))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_FetchShopInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqCommon)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).FetchShopInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_FetchShopInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).FetchShopInfo(ctx, req.(*ReqCommon))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_BuyFromShop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqBuyFromShop)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).BuyFromShop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_BuyFromShop_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).BuyFromShop(ctx, req.(*ReqBuyFromShop))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_BuyFromZHP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqBuyFromZHP)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).BuyFromZHP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_BuyFromZHP_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).BuyFromZHP(ctx, req.(*ReqBuyFromZHP))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_RefreshZHPShop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqReshZHPShop)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).RefreshZHPShop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_RefreshZHPShop_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).RefreshZHPShop(ctx, req.(*ReqReshZHPShop))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_FetchMonthTicketInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqCommon)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).FetchMonthTicketInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_FetchMonthTicketInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).FetchMonthTicketInfo(ctx, req.(*ReqCommon))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_PayMonthTicket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqCommon)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).PayMonthTicket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_PayMonthTicket_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).PayMonthTicket(ctx, req.(*ReqCommon))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_ExchangeCurrency_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqExchangeCurrency)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).ExchangeCurrency(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_ExchangeCurrency_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).ExchangeCurrency(ctx, req.(*ReqExchangeCurrency))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_ExchangeChestStone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqExchangeCurrency)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).ExchangeChestStone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_ExchangeChestStone_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).ExchangeChestStone(ctx, req.(*ReqExchangeCurrency))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_ExchangeDiamond_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqExchangeCurrency)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).ExchangeDiamond(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_ExchangeDiamond_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).ExchangeDiamond(ctx, req.(*ReqExchangeCurrency))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_FetchServerSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqCommon)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).FetchServerSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_FetchServerSettings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).FetchServerSettings(ctx, req.(*ReqCommon))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_FetchAccountSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqCommon)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).FetchAccountSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_FetchAccountSettings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).FetchAccountSettings(ctx, req.(*ReqCommon))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_UpdateAccountSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqUpdateAccountSettings)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).UpdateAccountSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_UpdateAccountSettings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).UpdateAccountSettings(ctx, req.(*ReqUpdateAccountSettings))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_FetchModNicknameTime_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqCommon)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).FetchModNicknameTime(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_FetchModNicknameTime_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).FetchModNicknameTime(ctx, req.(*ReqCommon))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_CreateWechatNativeOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqCreateWechatNativeOrder)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).CreateWechatNativeOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_CreateWechatNativeOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).CreateWechatNativeOrder(ctx, req.(*ReqCreateWechatNativeOrder))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_CreateWechatAppOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqCreateWechatAppOrder)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).CreateWechatAppOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_CreateWechatAppOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).CreateWechatAppOrder(ctx, req.(*ReqCreateWechatAppOrder))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_CreateAlipayOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqCreateAlipayOrder)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).CreateAlipayOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_CreateAlipayOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).CreateAlipayOrder(ctx, req.(*ReqCreateAlipayOrder))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_CreateAlipayScanOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqCreateAlipayScanOrder)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).CreateAlipayScanOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_CreateAlipayScanOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).CreateAlipayScanOrder(ctx, req.(*ReqCreateAlipayScanOrder))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_CreateAlipayAppOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqCreateAlipayAppOrder)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).CreateAlipayAppOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_CreateAlipayAppOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).CreateAlipayAppOrder(ctx, req.(*ReqCreateAlipayAppOrder))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_CreateJPCreditCardOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqCreateJPCreditCardOrder)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).CreateJPCreditCardOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_CreateJPCreditCardOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).CreateJPCreditCardOrder(ctx, req.(*ReqCreateJPCreditCardOrder))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_CreateJPPaypalOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqCreateJPPaypalOrder)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).CreateJPPaypalOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_CreateJPPaypalOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).CreateJPPaypalOrder(ctx, req.(*ReqCreateJPPaypalOrder))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_CreateJPAuOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqCreateJPAuOrder)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).CreateJPAuOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_CreateJPAuOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).CreateJPAuOrder(ctx, req.(*ReqCreateJPAuOrder))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_CreateJPDocomoOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqCreateJPDocomoOrder)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).CreateJPDocomoOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_CreateJPDocomoOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).CreateJPDocomoOrder(ctx, req.(*ReqCreateJPDocomoOrder))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_CreateJPWebMoneyOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqCreateJPWebMoneyOrder)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).CreateJPWebMoneyOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_CreateJPWebMoneyOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).CreateJPWebMoneyOrder(ctx, req.(*ReqCreateJPWebMoneyOrder))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_CreateJPSoftbankOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqCreateJPSoftbankOrder)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).CreateJPSoftbankOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_CreateJPSoftbankOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).CreateJPSoftbankOrder(ctx, req.(*ReqCreateJPSoftbankOrder))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_CreateJPPayPayOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqCreateJPPayPayOrder)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).CreateJPPayPayOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_CreateJPPayPayOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).CreateJPPayPayOrder(ctx, req.(*ReqCreateJPPayPayOrder))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_FetchJPCommonCreditCardOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqFetchJPCommonCreditCardOrder)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).FetchJPCommonCreditCardOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_FetchJPCommonCreditCardOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).FetchJPCommonCreditCardOrder(ctx, req.(*ReqFetchJPCommonCreditCardOrder))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_CreateJPGMOOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqCreateJPGMOOrder)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).CreateJPGMOOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_CreateJPGMOOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).CreateJPGMOOrder(ctx, req.(*ReqCreateJPGMOOrder))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_CreateENPaypalOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqCreateENPaypalOrder)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).CreateENPaypalOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_CreateENPaypalOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).CreateENPaypalOrder(ctx, req.(*ReqCreateENPaypalOrder))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_CreateENMasterCardOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqCreateENMasterCardOrder)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).CreateENMasterCardOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_CreateENMasterCardOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).CreateENMasterCardOrder(ctx, req.(*ReqCreateENMasterCardOrder))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_CreateENVisaOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqCreateENVisaOrder)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).CreateENVisaOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_CreateENVisaOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).CreateENVisaOrder(ctx, req.(*ReqCreateENVisaOrder))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_CreateENJCBOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqCreateENJCBOrder)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).CreateENJCBOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_CreateENJCBOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).CreateENJCBOrder(ctx, req.(*ReqCreateENJCBOrder))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_CreateENAlipayOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqCreateENAlipayOrder)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).CreateENAlipayOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_CreateENAlipayOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).CreateENAlipayOrder(ctx, req.(*ReqCreateENAlipayOrder))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_CreateKRPaypalOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqCreateKRPaypalOrder)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).CreateKRPaypalOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_CreateKRPaypalOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).CreateKRPaypalOrder(ctx, req.(*ReqCreateKRPaypalOrder))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_CreateKRMasterCardOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqCreateKRMasterCardOrder)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).CreateKRMasterCardOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_CreateKRMasterCardOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).CreateKRMasterCardOrder(ctx, req.(*ReqCreateKRMasterCardOrder))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_CreateKRVisaOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqCreateKRVisaOrder)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).CreateKRVisaOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_CreateKRVisaOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).CreateKRVisaOrder(ctx, req.(*ReqCreateKRVisaOrder))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_CreateKRJCBOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqCreateKRJCBOrder)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).CreateKRJCBOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_CreateKRJCBOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).CreateKRJCBOrder(ctx, req.(*ReqCreateKRJCBOrder))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_CreateKRAlipayOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqCreateKRAlipayOrder)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).CreateKRAlipayOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_CreateKRAlipayOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).CreateKRAlipayOrder(ctx, req.(*ReqCreateKRAlipayOrder))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_CreateDMMOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqCreateDMMOrder)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).CreateDMMOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_CreateDMMOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).CreateDMMOrder(ctx, req.(*ReqCreateDMMOrder))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_CreateIAPOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqCreateIAPOrder)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).CreateIAPOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_CreateIAPOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).CreateIAPOrder(ctx, req.(*ReqCreateIAPOrder))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_CreateSteamOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqCreateSteamOrder)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).CreateSteamOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_CreateSteamOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).CreateSteamOrder(ctx, req.(*ReqCreateSteamOrder))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_VerifySteamOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqVerifySteamOrder)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).VerifySteamOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_VerifySteamOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).VerifySteamOrder(ctx, req.(*ReqVerifySteamOrder))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_CreateMyCardAndroidOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqCreateMyCardOrder)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).CreateMyCardAndroidOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_CreateMyCardAndroidOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).CreateMyCardAndroidOrder(ctx, req.(*ReqCreateMyCardOrder))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_CreateMyCardWebOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqCreateMyCardOrder)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).CreateMyCardWebOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_CreateMyCardWebOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).CreateMyCardWebOrder(ctx, req.(*ReqCreateMyCardOrder))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_CreatePaypalOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqCreatePaypalOrder)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).CreatePaypalOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_CreatePaypalOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).CreatePaypalOrder(ctx, req.(*ReqCreatePaypalOrder))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_CreateXsollaOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqCreateXsollaOrder)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).CreateXsollaOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_CreateXsollaOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).CreateXsollaOrder(ctx, req.(*ReqCreateXsollaOrder))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_VerifyMyCardOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqVerifyMyCardOrder)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).VerifyMyCardOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_VerifyMyCardOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).VerifyMyCardOrder(ctx, req.(*ReqVerifyMyCardOrder))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_VerificationIAPOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqVerificationIAPOrder)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).VerificationIAPOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_VerificationIAPOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).VerificationIAPOrder(ctx, req.(*ReqVerificationIAPOrder))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_CreateYostarSDKOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqCreateYostarOrder)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).CreateYostarSDKOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_CreateYostarSDKOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).CreateYostarSDKOrder(ctx, req.(*ReqCreateYostarOrder))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_CreateBillingOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqCreateBillingOrder)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).CreateBillingOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_CreateBillingOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).CreateBillingOrder(ctx, req.(*ReqCreateBillingOrder))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_SolveGooglePlayOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqSolveGooglePlayOrder)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).SolveGooglePlayOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_SolveGooglePlayOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).SolveGooglePlayOrder(ctx, req.(*ReqSolveGooglePlayOrder))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_SolveGooglePayOrderV3_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqSolveGooglePlayOrderV3)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).SolveGooglePayOrderV3(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_SolveGooglePayOrderV3_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).SolveGooglePayOrderV3(ctx, req.(*ReqSolveGooglePlayOrderV3))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_DeliverAA32Order_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqDeliverAA32Order)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).DeliverAA32Order(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_DeliverAA32Order_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).DeliverAA32Order(ctx, req.(*ReqDeliverAA32Order))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_FetchMisc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqCommon)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).FetchMisc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_FetchMisc_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).FetchMisc(ctx, req.(*ReqCommon))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_ModifySignature_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqModifySignature)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).ModifySignature(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_ModifySignature_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).ModifySignature(ctx, req.(*ReqModifySignature))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_FetchIDCardInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqCommon)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).FetchIDCardInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_FetchIDCardInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).FetchIDCardInfo(ctx, req.(*ReqCommon))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_UpdateIDCardInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqUpdateIDCardInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).UpdateIDCardInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_UpdateIDCardInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).UpdateIDCardInfo(ctx, req.(*ReqUpdateIDCardInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_FetchVipReward_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqCommon)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).FetchVipReward(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_FetchVipReward_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).FetchVipReward(ctx, req.(*ReqCommon))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_GainVipReward_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqGainVipReward)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).GainVipReward(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_GainVipReward_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).GainVipReward(ctx, req.(*ReqGainVipReward))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_FetchRefundOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqCommon)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).FetchRefundOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_FetchRefundOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).FetchRefundOrder(ctx, req.(*ReqCommon))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_FetchCustomizedContestList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqFetchCustomizedContestList)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).FetchCustomizedContestList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_FetchCustomizedContestList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).FetchCustomizedContestList(ctx, req.(*ReqFetchCustomizedContestList))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_FetchCustomizedContestAuthInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqFetchCustomizedContestAuthInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).FetchCustomizedContestAuthInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_FetchCustomizedContestAuthInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).FetchCustomizedContestAuthInfo(ctx, req.(*ReqFetchCustomizedContestAuthInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_EnterCustomizedContest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqEnterCustomizedContest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).EnterCustomizedContest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_EnterCustomizedContest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).EnterCustomizedContest(ctx, req.(*ReqEnterCustomizedContest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_LeaveCustomizedContest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqCommon)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).LeaveCustomizedContest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_LeaveCustomizedContest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).LeaveCustomizedContest(ctx, req.(*ReqCommon))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_FetchCustomizedContestOnlineInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqFetchCustomizedContestOnlineInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).FetchCustomizedContestOnlineInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_FetchCustomizedContestOnlineInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).FetchCustomizedContestOnlineInfo(ctx, req.(*ReqFetchCustomizedContestOnlineInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_FetchCustomizedContestByContestId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqFetchCustomizedContestByContestId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).FetchCustomizedContestByContestId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_FetchCustomizedContestByContestId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).FetchCustomizedContestByContestId(ctx, req.(*ReqFetchCustomizedContestByContestId))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_SignupCustomizedContest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqSignupCustomizedContest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).SignupCustomizedContest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_SignupCustomizedContest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).SignupCustomizedContest(ctx, req.(*ReqSignupCustomizedContest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_StartCustomizedContest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqStartCustomizedContest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).StartCustomizedContest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_StartCustomizedContest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).StartCustomizedContest(ctx, req.(*ReqStartCustomizedContest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_StopCustomizedContest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqStopCustomizedContest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).StopCustomizedContest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_StopCustomizedContest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).StopCustomizedContest(ctx, req.(*ReqStopCustomizedContest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_JoinCustomizedContestChatRoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqJoinCustomizedContestChatRoom)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).JoinCustomizedContestChatRoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_JoinCustomizedContestChatRoom_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).JoinCustomizedContestChatRoom(ctx, req.(*ReqJoinCustomizedContestChatRoom))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_LeaveCustomizedContestChatRoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqCommon)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).LeaveCustomizedContestChatRoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_LeaveCustomizedContestChatRoom_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).LeaveCustomizedContestChatRoom(ctx, req.(*ReqCommon))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_SayChatMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqSayChatMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).SayChatMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_SayChatMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).SayChatMessage(ctx, req.(*ReqSayChatMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_FetchCustomizedContestGameRecords_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqFetchCustomizedContestGameRecords)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).FetchCustomizedContestGameRecords(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_FetchCustomizedContestGameRecords_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).FetchCustomizedContestGameRecords(ctx, req.(*ReqFetchCustomizedContestGameRecords))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_FetchCustomizedContestGameLiveList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqFetchCustomizedContestGameLiveList)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).FetchCustomizedContestGameLiveList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_FetchCustomizedContestGameLiveList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).FetchCustomizedContestGameLiveList(ctx, req.(*ReqFetchCustomizedContestGameLiveList))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_FollowCustomizedContest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqTargetCustomizedContest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).FollowCustomizedContest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_FollowCustomizedContest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).FollowCustomizedContest(ctx, req.(*ReqTargetCustomizedContest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_UnfollowCustomizedContest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqTargetCustomizedContest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).UnfollowCustomizedContest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_UnfollowCustomizedContest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).UnfollowCustomizedContest(ctx, req.(*ReqTargetCustomizedContest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_FetchActivityList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqCommon)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).FetchActivityList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_FetchActivityList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).FetchActivityList(ctx, req.(*ReqCommon))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_FetchAccountActivityData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqCommon)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).FetchAccountActivityData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_FetchAccountActivityData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).FetchAccountActivityData(ctx, req.(*ReqCommon))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_ExchangeActivityItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqExchangeActivityItem)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).ExchangeActivityItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_ExchangeActivityItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).ExchangeActivityItem(ctx, req.(*ReqExchangeActivityItem))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_CompleteActivityTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqCompleteActivityTask)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).CompleteActivityTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_CompleteActivityTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).CompleteActivityTask(ctx, req.(*ReqCompleteActivityTask))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_CompleteActivityTaskBatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqCompleteActivityTaskBatch)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).CompleteActivityTaskBatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_CompleteActivityTaskBatch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).CompleteActivityTaskBatch(ctx, req.(*ReqCompleteActivityTaskBatch))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_CompleteActivityFlipTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqCompleteActivityTask)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).CompleteActivityFlipTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_CompleteActivityFlipTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).CompleteActivityFlipTask(ctx, req.(*ReqCompleteActivityTask))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_CompletePeriodActivityTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqCompleteActivityTask)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).CompletePeriodActivityTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_CompletePeriodActivityTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).CompletePeriodActivityTask(ctx, req.(*ReqCompleteActivityTask))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_CompletePeriodActivityTaskBatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqCompletePeriodActivityTaskBatch)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).CompletePeriodActivityTaskBatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_CompletePeriodActivityTaskBatch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).CompletePeriodActivityTaskBatch(ctx, req.(*ReqCompletePeriodActivityTaskBatch))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_CompleteRandomActivityTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqCompleteActivityTask)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).CompleteRandomActivityTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_CompleteRandomActivityTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).CompleteRandomActivityTask(ctx, req.(*ReqCompleteActivityTask))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_ReceiveActivityFlipTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqReceiveActivityFlipTask)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).ReceiveActivityFlipTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_ReceiveActivityFlipTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).ReceiveActivityFlipTask(ctx, req.(*ReqReceiveActivityFlipTask))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_CompleteSegmentTaskReward_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqCompleteSegmentTaskReward)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).CompleteSegmentTaskReward(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_CompleteSegmentTaskReward_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).CompleteSegmentTaskReward(ctx, req.(*ReqCompleteSegmentTaskReward))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_FetchActivityFlipInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqFetchActivityFlipInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).FetchActivityFlipInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_FetchActivityFlipInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).FetchActivityFlipInfo(ctx, req.(*ReqFetchActivityFlipInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_GainAccumulatedPointActivityReward_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqGainAccumulatedPointActivityReward)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).GainAccumulatedPointActivityReward(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_GainAccumulatedPointActivityReward_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).GainAccumulatedPointActivityReward(ctx, req.(*ReqGainAccumulatedPointActivityReward))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_GainMultiPointActivityReward_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqGainMultiPointActivityReward)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).GainMultiPointActivityReward(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_GainMultiPointActivityReward_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).GainMultiPointActivityReward(ctx, req.(*ReqGainMultiPointActivityReward))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_FetchRankPointLeaderboard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqFetchRankPointLeaderboard)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).FetchRankPointLeaderboard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_FetchRankPointLeaderboard_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).FetchRankPointLeaderboard(ctx, req.(*ReqFetchRankPointLeaderboard))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_GainRankPointReward_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqGainRankPointReward)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).GainRankPointReward(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_GainRankPointReward_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).GainRankPointReward(ctx, req.(*ReqGainRankPointReward))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_RichmanActivityNextMove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqRichmanNextMove)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).RichmanActivityNextMove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_RichmanActivityNextMove_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).RichmanActivityNextMove(ctx, req.(*ReqRichmanNextMove))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_RichmanAcitivitySpecialMove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqRichmanSpecialMove)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).RichmanAcitivitySpecialMove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_RichmanAcitivitySpecialMove_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).RichmanAcitivitySpecialMove(ctx, req.(*ReqRichmanSpecialMove))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_RichmanActivityChestInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqRichmanChestInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).RichmanActivityChestInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_RichmanActivityChestInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).RichmanActivityChestInfo(ctx, req.(*ReqRichmanChestInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_CreateGameObserveAuth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqCreateGameObserveAuth)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).CreateGameObserveAuth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_CreateGameObserveAuth_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).CreateGameObserveAuth(ctx, req.(*ReqCreateGameObserveAuth))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_RefreshGameObserveAuth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqRefreshGameObserveAuth)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).RefreshGameObserveAuth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_RefreshGameObserveAuth_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).RefreshGameObserveAuth(ctx, req.(*ReqRefreshGameObserveAuth))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_FetchActivityBuff_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqCommon)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).FetchActivityBuff(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_FetchActivityBuff_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).FetchActivityBuff(ctx, req.(*ReqCommon))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_UpgradeActivityBuff_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqUpgradeActivityBuff)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).UpgradeActivityBuff(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_UpgradeActivityBuff_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).UpgradeActivityBuff(ctx, req.(*ReqUpgradeActivityBuff))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_UpgradeActivityLevel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqUpgradeActivityLevel)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).UpgradeActivityLevel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_UpgradeActivityLevel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).UpgradeActivityLevel(ctx, req.(*ReqUpgradeActivityLevel))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_ReceiveUpgradeActivityReward_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqReceiveUpgradeActivityReward)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).ReceiveUpgradeActivityReward(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_ReceiveUpgradeActivityReward_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).ReceiveUpgradeActivityReward(ctx, req.(*ReqReceiveUpgradeActivityReward))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_UpgradeChallenge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqCommon)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).UpgradeChallenge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_UpgradeChallenge_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).UpgradeChallenge(ctx, req.(*ReqCommon))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_RefreshChallenge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqCommon)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).RefreshChallenge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_RefreshChallenge_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).RefreshChallenge(ctx, req.(*ReqCommon))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_FetchChallengeInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqCommon)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).FetchChallengeInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_FetchChallengeInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).FetchChallengeInfo(ctx, req.(*ReqCommon))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_ForceCompleteChallengeTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqForceCompleteChallengeTask)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).ForceCompleteChallengeTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_ForceCompleteChallengeTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).ForceCompleteChallengeTask(ctx, req.(*ReqForceCompleteChallengeTask))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_FetchChallengeSeason_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqCommon)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).FetchChallengeSeason(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_FetchChallengeSeason_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).FetchChallengeSeason(ctx, req.(*ReqCommon))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_ReceiveChallengeRankReward_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqReceiveChallengeRankReward)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).ReceiveChallengeRankReward(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_ReceiveChallengeRankReward_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).ReceiveChallengeRankReward(ctx, req.(*ReqReceiveChallengeRankReward))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_FetchABMatchInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqCommon)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).FetchABMatchInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_FetchABMatchInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).FetchABMatchInfo(ctx, req.(*ReqCommon))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_BuyInABMatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqBuyInABMatch)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).BuyInABMatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_BuyInABMatch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).BuyInABMatch(ctx, req.(*ReqBuyInABMatch))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_ReceiveABMatchReward_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqCommon)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).ReceiveABMatchReward(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_ReceiveABMatchReward_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).ReceiveABMatchReward(ctx, req.(*ReqCommon))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_QuitABMatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqCommon)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).QuitABMatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_QuitABMatch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).QuitABMatch(ctx, req.(*ReqCommon))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_StartUnifiedMatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqStartUnifiedMatch)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).StartUnifiedMatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_StartUnifiedMatch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).StartUnifiedMatch(ctx, req.(*ReqStartUnifiedMatch))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_CancelUnifiedMatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqCancelUnifiedMatch)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).CancelUnifiedMatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_CancelUnifiedMatch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).CancelUnifiedMatch(ctx, req.(*ReqCancelUnifiedMatch))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_FetchGamePointRank_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqGamePointRank)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).FetchGamePointRank(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_FetchGamePointRank_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).FetchGamePointRank(ctx, req.(*ReqGamePointRank))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_FetchSelfGamePointRank_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqGamePointRank)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).FetchSelfGamePointRank(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_FetchSelfGamePointRank_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).FetchSelfGamePointRank(ctx, req.(*ReqGamePointRank))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_ReadSNS_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqReadSNS)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).ReadSNS(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_ReadSNS_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).ReadSNS(ctx, req.(*ReqReadSNS))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_ReplySNS_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqReplySNS)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).ReplySNS(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_ReplySNS_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).ReplySNS(ctx, req.(*ReqReplySNS))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_LikeSNS_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqLikeSNS)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).LikeSNS(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_LikeSNS_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).LikeSNS(ctx, req.(*ReqLikeSNS))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_DigMine_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqDigMine)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).DigMine(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_DigMine_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).DigMine(ctx, req.(*ReqDigMine))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_FetchLastPrivacy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqFetchLastPrivacy)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).FetchLastPrivacy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_FetchLastPrivacy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).FetchLastPrivacy(ctx, req.(*ReqFetchLastPrivacy))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_CheckPrivacy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqCheckPrivacy)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).CheckPrivacy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_CheckPrivacy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).CheckPrivacy(ctx, req.(*ReqCheckPrivacy))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_ResponseCaptcha_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqResponseCaptcha)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).ResponseCaptcha(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_ResponseCaptcha_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).ResponseCaptcha(ctx, req.(*ReqResponseCaptcha))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_FetchRPGBattleHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqFetchRPGBattleHistory)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).FetchRPGBattleHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_FetchRPGBattleHistory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).FetchRPGBattleHistory(ctx, req.(*ReqFetchRPGBattleHistory))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_FetchRPGBattleHistoryV2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqFetchRPGBattleHistory)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).FetchRPGBattleHistoryV2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_FetchRPGBattleHistoryV2_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).FetchRPGBattleHistoryV2(ctx, req.(*ReqFetchRPGBattleHistory))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_ReceiveRPGRewards_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqReceiveRPGRewards)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).ReceiveRPGRewards(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_ReceiveRPGRewards_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).ReceiveRPGRewards(ctx, req.(*ReqReceiveRPGRewards))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_ReceiveRPGReward_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqReceiveRPGReward)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).ReceiveRPGReward(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_ReceiveRPGReward_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).ReceiveRPGReward(ctx, req.(*ReqReceiveRPGReward))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_BuyArenaTicket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqBuyArenaTicket)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).BuyArenaTicket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_BuyArenaTicket_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).BuyArenaTicket(ctx, req.(*ReqBuyArenaTicket))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_EnterArena_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqEnterArena)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).EnterArena(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_EnterArena_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).EnterArena(ctx, req.(*ReqEnterArena))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_ReceiveArenaReward_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqArenaReward)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).ReceiveArenaReward(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_ReceiveArenaReward_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).ReceiveArenaReward(ctx, req.(*ReqArenaReward))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_FetchOBToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqFetchOBToken)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).FetchOBToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_FetchOBToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).FetchOBToken(ctx, req.(*ReqFetchOBToken))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_ReceiveCharacterRewards_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqReceiveCharacterRewards)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).ReceiveCharacterRewards(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_ReceiveCharacterRewards_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).ReceiveCharacterRewards(ctx, req.(*ReqReceiveCharacterRewards))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_FeedActivityFeed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqFeedActivityFeed)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).FeedActivityFeed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_FeedActivityFeed_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).FeedActivityFeed(ctx, req.(*ReqFeedActivityFeed))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_SendActivityGiftToFriend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqSendActivityGiftToFriend)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).SendActivityGiftToFriend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_SendActivityGiftToFriend_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).SendActivityGiftToFriend(ctx, req.(*ReqSendActivityGiftToFriend))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_ReceiveActivityGift_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqReceiveActivityGift)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).ReceiveActivityGift(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_ReceiveActivityGift_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).ReceiveActivityGift(ctx, req.(*ReqReceiveActivityGift))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_ReceiveAllActivityGift_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqReceiveAllActivityGift)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).ReceiveAllActivityGift(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_ReceiveAllActivityGift_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).ReceiveAllActivityGift(ctx, req.(*ReqReceiveAllActivityGift))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_FetchFriendGiftActivityData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqFetchFriendGiftActivityData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).FetchFriendGiftActivityData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_FetchFriendGiftActivityData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).FetchFriendGiftActivityData(ctx, req.(*ReqFetchFriendGiftActivityData))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_OpenPreChestItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqOpenPreChestItem)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).OpenPreChestItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_OpenPreChestItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).OpenPreChestItem(ctx, req.(*ReqOpenPreChestItem))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_FetchVoteActivity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqFetchVoteActivity)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).FetchVoteActivity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_FetchVoteActivity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).FetchVoteActivity(ctx, req.(*ReqFetchVoteActivity))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_VoteActivity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqVoteActivity)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).VoteActivity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_VoteActivity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).VoteActivity(ctx, req.(*ReqVoteActivity))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_UnlockActivitySpot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqUnlockActivitySpot)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).UnlockActivitySpot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_UnlockActivitySpot_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).UnlockActivitySpot(ctx, req.(*ReqUnlockActivitySpot))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_UnlockActivitySpotEnding_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqUnlockActivitySpotEnding)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).UnlockActivitySpotEnding(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_UnlockActivitySpotEnding_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).UnlockActivitySpotEnding(ctx, req.(*ReqUnlockActivitySpotEnding))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_ReceiveActivitySpotReward_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqReceiveActivitySpotReward)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).ReceiveActivitySpotReward(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_ReceiveActivitySpotReward_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).ReceiveActivitySpotReward(ctx, req.(*ReqReceiveActivitySpotReward))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_DeleteAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqCommon)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).DeleteAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_DeleteAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).DeleteAccount(ctx, req.(*ReqCommon))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_CancelDeleteAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqCommon)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).CancelDeleteAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_CancelDeleteAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).CancelDeleteAccount(ctx, req.(*ReqCommon))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_LogReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqLogReport)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).LogReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_LogReport_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).LogReport(ctx, req.(*ReqLogReport))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_BindOauth2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqBindOauth2)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).BindOauth2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_BindOauth2_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).BindOauth2(ctx, req.(*ReqBindOauth2))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_FetchOauth2Info_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqFetchOauth2)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).FetchOauth2Info(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_FetchOauth2Info_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).FetchOauth2Info(ctx, req.(*ReqFetchOauth2))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_SetLoadingImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqSetLoadingImage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).SetLoadingImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_SetLoadingImage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).SetLoadingImage(ctx, req.(*ReqSetLoadingImage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_FetchShopInterval_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqCommon)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).FetchShopInterval(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_FetchShopInterval_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).FetchShopInterval(ctx, req.(*ReqCommon))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_FetchActivityInterval_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqCommon)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).FetchActivityInterval(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_FetchActivityInterval_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).FetchActivityInterval(ctx, req.(*ReqCommon))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_FetchRecentFriend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqCommon)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).FetchRecentFriend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_FetchRecentFriend_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).FetchRecentFriend(ctx, req.(*ReqCommon))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_OpenGacha_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqOpenGacha)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).OpenGacha(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_OpenGacha_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).OpenGacha(ctx, req.(*ReqOpenGacha))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_TaskRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).TaskRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_TaskRequest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).TaskRequest(ctx, req.(*ReqTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_SimulationActivityTrain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqSimulationActivityTrain)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).SimulationActivityTrain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_SimulationActivityTrain_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).SimulationActivityTrain(ctx, req.(*ReqSimulationActivityTrain))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_FetchSimulationGameRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqFetchSimulationGameRecord)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).FetchSimulationGameRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_FetchSimulationGameRecord_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).FetchSimulationGameRecord(ctx, req.(*ReqFetchSimulationGameRecord))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_StartSimulationActivityGame_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqStartSimulationActivityGame)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).StartSimulationActivityGame(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_StartSimulationActivityGame_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).StartSimulationActivityGame(ctx, req.(*ReqStartSimulationActivityGame))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_FetchSimulationGameRank_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqFetchSimulationGameRank)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).FetchSimulationGameRank(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_FetchSimulationGameRank_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).FetchSimulationGameRank(ctx, req.(*ReqFetchSimulationGameRank))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_GenerateCombiningCraft_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqGenerateCombiningCraft)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).GenerateCombiningCraft(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_GenerateCombiningCraft_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).GenerateCombiningCraft(ctx, req.(*ReqGenerateCombiningCraft))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_MoveCombiningCraft_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqMoveCombiningCraft)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).MoveCombiningCraft(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_MoveCombiningCraft_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).MoveCombiningCraft(ctx, req.(*ReqMoveCombiningCraft))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_CombiningRecycleCraft_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqCombiningRecycleCraft)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).CombiningRecycleCraft(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_CombiningRecycleCraft_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).CombiningRecycleCraft(ctx, req.(*ReqCombiningRecycleCraft))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_RecoverCombiningRecycle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqRecoverCombiningRecycle)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).RecoverCombiningRecycle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_RecoverCombiningRecycle_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).RecoverCombiningRecycle(ctx, req.(*ReqRecoverCombiningRecycle))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_FinishCombiningOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqFinishCombiningOrder)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).FinishCombiningOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_FinishCombiningOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).FinishCombiningOrder(ctx, req.(*ReqFinishCombiningOrder))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_UpgradeVillageBuilding_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqUpgradeVillageBuilding)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).UpgradeVillageBuilding(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_UpgradeVillageBuilding_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).UpgradeVillageBuilding(ctx, req.(*ReqUpgradeVillageBuilding))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_ReceiveVillageBuildingReward_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqReceiveVillageBuildingReward)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).ReceiveVillageBuildingReward(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_ReceiveVillageBuildingReward_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).ReceiveVillageBuildingReward(ctx, req.(*ReqReceiveVillageBuildingReward))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_StartVillageTrip_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqStartVillageTrip)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).StartVillageTrip(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_StartVillageTrip_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).StartVillageTrip(ctx, req.(*ReqStartVillageTrip))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_ReceiveVillageTripReward_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqReceiveVillageTripReward)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).ReceiveVillageTripReward(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_ReceiveVillageTripReward_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).ReceiveVillageTripReward(ctx, req.(*ReqReceiveVillageTripReward))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_CompleteVillageTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqCompleteVillageTask)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).CompleteVillageTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_CompleteVillageTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).CompleteVillageTask(ctx, req.(*ReqCompleteVillageTask))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_GetFriendVillageData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqGetFriendVillageData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).GetFriendVillageData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_GetFriendVillageData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).GetFriendVillageData(ctx, req.(*ReqGetFriendVillageData))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_SetVillageWorker_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqSetVillageWorker)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).SetVillageWorker(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_SetVillageWorker_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).SetVillageWorker(ctx, req.(*ReqSetVillageWorker))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_NextRoundVillage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqNextRoundVillage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).NextRoundVillage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_NextRoundVillage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).NextRoundVillage(ctx, req.(*ReqNextRoundVillage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_ResolveFestivalActivityProposal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqResolveFestivalActivityProposal)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).ResolveFestivalActivityProposal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_ResolveFestivalActivityProposal_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).ResolveFestivalActivityProposal(ctx, req.(*ReqResolveFestivalActivityProposal))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_ResolveFestivalActivityEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqResolveFestivalActivityEvent)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).ResolveFestivalActivityEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_ResolveFestivalActivityEvent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).ResolveFestivalActivityEvent(ctx, req.(*ReqResolveFestivalActivityEvent))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_BuyFestivalProposal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqBuyFestivalProposal)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).BuyFestivalProposal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_BuyFestivalProposal_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).BuyFestivalProposal(ctx, req.(*ReqBuyFestivalProposal))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_IslandActivityMove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqIslandActivityMove)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).IslandActivityMove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_IslandActivityMove_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).IslandActivityMove(ctx, req.(*ReqIslandActivityMove))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_IslandActivityBuy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqIslandActivityBuy)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).IslandActivityBuy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_IslandActivityBuy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).IslandActivityBuy(ctx, req.(*ReqIslandActivityBuy))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_IslandActivitySell_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqIslandActivitySell)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).IslandActivitySell(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_IslandActivitySell_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).IslandActivitySell(ctx, req.(*ReqIslandActivitySell))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_IslandActivityTidyBag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqIslandActivityTidyBag)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).IslandActivityTidyBag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_IslandActivityTidyBag_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).IslandActivityTidyBag(ctx, req.(*ReqIslandActivityTidyBag))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_IslandActivityUnlockBagGrid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqIslandActivityUnlockBagGrid)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).IslandActivityUnlockBagGrid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_IslandActivityUnlockBagGrid_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).IslandActivityUnlockBagGrid(ctx, req.(*ReqIslandActivityUnlockBagGrid))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_CreateCustomizedContest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqCreateCustomizedContest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).CreateCustomizedContest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_CreateCustomizedContest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).CreateCustomizedContest(ctx, req.(*ReqCreateCustomizedContest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_FetchManagerCustomizedContestList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqFetchmanagerCustomizedContestList)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).FetchManagerCustomizedContestList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_FetchManagerCustomizedContestList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).FetchManagerCustomizedContestList(ctx, req.(*ReqFetchmanagerCustomizedContestList))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_FetchManagerCustomizedContest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqFetchManagerCustomizedContest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).FetchManagerCustomizedContest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_FetchManagerCustomizedContest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).FetchManagerCustomizedContest(ctx, req.(*ReqFetchManagerCustomizedContest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_UpdateManagerCustomizedContest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqUpdateManagerCustomizedContest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).UpdateManagerCustomizedContest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_UpdateManagerCustomizedContest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).UpdateManagerCustomizedContest(ctx, req.(*ReqUpdateManagerCustomizedContest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_FetchContestPlayerRank_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqFetchContestPlayerRank)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).FetchContestPlayerRank(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_FetchContestPlayerRank_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).FetchContestPlayerRank(ctx, req.(*ReqFetchContestPlayerRank))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_FetchReadyPlayerList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqFetchReadyPlayerList)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).FetchReadyPlayerList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_FetchReadyPlayerList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).FetchReadyPlayerList(ctx, req.(*ReqFetchReadyPlayerList))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_CreateGamePlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqCreateGamePlan)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).CreateGamePlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_CreateGamePlan_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).CreateGamePlan(ctx, req.(*ReqCreateGamePlan))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_GenerateContestManagerLoginCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqCommon)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).GenerateContestManagerLoginCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_GenerateContestManagerLoginCode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).GenerateContestManagerLoginCode(ctx, req.(*ReqCommon))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_AmuletActivityStartGame_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqAmuletActivityStartGame)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).AmuletActivityStartGame(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_AmuletActivityStartGame_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).AmuletActivityStartGame(ctx, req.(*ReqAmuletActivityStartGame))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_AmuletActivityOperate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqAmuletActivityOperate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).AmuletActivityOperate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_AmuletActivityOperate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).AmuletActivityOperate(ctx, req.(*ReqAmuletActivityOperate))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_AmuletActivityChangeHands_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqAmuletActivityChangeHands)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).AmuletActivityChangeHands(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_AmuletActivityChangeHands_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).AmuletActivityChangeHands(ctx, req.(*ReqAmuletActivityChangeHands))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_AmuletActivityUpgrade_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqAmuletActivityUpgrade)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).AmuletActivityUpgrade(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_AmuletActivityUpgrade_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).AmuletActivityUpgrade(ctx, req.(*ReqAmuletActivityUpgrade))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_AmuletActivityBuy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqAmuletActivityBuy)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).AmuletActivityBuy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_AmuletActivityBuy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).AmuletActivityBuy(ctx, req.(*ReqAmuletActivityBuy))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_AmuletActivitySelectPack_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqAmuletActivitySelectPack)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).AmuletActivitySelectPack(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_AmuletActivitySelectPack_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).AmuletActivitySelectPack(ctx, req.(*ReqAmuletActivitySelectPack))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_AmuletActivitySellEffect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqAmuletActivitySellEffect)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).AmuletActivitySellEffect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_AmuletActivitySellEffect_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).AmuletActivitySellEffect(ctx, req.(*ReqAmuletActivitySellEffect))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_AmuletActivityEffectSort_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqAmuletActivityEffectSort)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).AmuletActivityEffectSort(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_AmuletActivityEffectSort_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).AmuletActivityEffectSort(ctx, req.(*ReqAmuletActivityEffectSort))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_AmuletActivityGiveup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqAmuletActivityGiveup)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).AmuletActivityGiveup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_AmuletActivityGiveup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).AmuletActivityGiveup(ctx, req.(*ReqAmuletActivityGiveup))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_AmuletActivityRefreshShop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqAmuletActivityRefreshShop)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).AmuletActivityRefreshShop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_AmuletActivityRefreshShop_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).AmuletActivityRefreshShop(ctx, req.(*ReqAmuletActivityRefreshShop))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_AmuletActivitySelectFreeEffect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqAmuletActivitySelectFreeEffect)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).AmuletActivitySelectFreeEffect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_AmuletActivitySelectFreeEffect_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).AmuletActivitySelectFreeEffect(ctx, req.(*ReqAmuletActivitySelectFreeEffect))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_AmuletActivityUpgradeShopBuff_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqAmuletActivityUpgradeShopBuff)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).AmuletActivityUpgradeShopBuff(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_AmuletActivityUpgradeShopBuff_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).AmuletActivityUpgradeShopBuff(ctx, req.(*ReqAmuletActivityUpgradeShopBuff))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_AmuletActivityEndShopping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqAmuletActivityEndShopping)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).AmuletActivityEndShopping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_AmuletActivityEndShopping_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).AmuletActivityEndShopping(ctx, req.(*ReqAmuletActivityEndShopping))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_AmuletActivitySetSkillLevel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqAmuletActivitySetSkillLevel)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).AmuletActivitySetSkillLevel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_AmuletActivitySetSkillLevel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).AmuletActivitySetSkillLevel(ctx, req.(*ReqAmuletActivitySetSkillLevel))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_AmuletActivityMaintainInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqCommon)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).AmuletActivityMaintainInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_AmuletActivityMaintainInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).AmuletActivityMaintainInfo(ctx, req.(*ReqCommon))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_StoryActivityUnlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqStoryActivityUnlock)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).StoryActivityUnlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_StoryActivityUnlock_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).StoryActivityUnlock(ctx, req.(*ReqStoryActivityUnlock))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_StoryActivityUnlockEnding_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqStoryActivityUnlockEnding)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).StoryActivityUnlockEnding(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_StoryActivityUnlockEnding_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).StoryActivityUnlockEnding(ctx, req.(*ReqStoryActivityUnlockEnding))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_StoryActivityReceiveEndingReward_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqStoryActivityReceiveEndingReward)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).StoryActivityReceiveEndingReward(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_StoryActivityReceiveEndingReward_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).StoryActivityReceiveEndingReward(ctx, req.(*ReqStoryActivityReceiveEndingReward))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_StoryActivityReceiveFinishReward_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqStoryActivityReceiveFinishReward)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).StoryActivityReceiveFinishReward(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_StoryActivityReceiveFinishReward_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).StoryActivityReceiveFinishReward(ctx, req.(*ReqStoryActivityReceiveFinishReward))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_StoryActivityReceiveAllFinishReward_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqStoryActivityReceiveAllFinishReward)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).StoryActivityReceiveAllFinishReward(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_StoryActivityReceiveAllFinishReward_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).StoryActivityReceiveAllFinishReward(ctx, req.(*ReqStoryActivityReceiveAllFinishReward))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_StoryActivityUnlockEndingAndReceive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqStoryActivityUnlockEndingAndReceive)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).StoryActivityUnlockEndingAndReceive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_StoryActivityUnlockEndingAndReceive_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).StoryActivityUnlockEndingAndReceive(ctx, req.(*ReqStoryActivityUnlockEndingAndReceive))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_FetchActivityRank_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqFetchActivityRank)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).FetchActivityRank(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_FetchActivityRank_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).FetchActivityRank(ctx, req.(*ReqFetchActivityRank))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_SetVerifiedHidden_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqSetVerifiedHidden)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).SetVerifiedHidden(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_SetVerifiedHidden_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).SetVerifiedHidden(ctx, req.(*ReqSetVerifiedHidden))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_FetchQuestionnaireList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqFetchQuestionnaireList)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).FetchQuestionnaireList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_FetchQuestionnaireList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).FetchQuestionnaireList(ctx, req.(*ReqFetchQuestionnaireList))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_FetchQuestionnaireDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqFetchQuestionnaireDetail)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).FetchQuestionnaireDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_FetchQuestionnaireDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).FetchQuestionnaireDetail(ctx, req.(*ReqFetchQuestionnaireDetail))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_SubmitQuestionnaire_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqSubmitQuestionnaire)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).SubmitQuestionnaire(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_SubmitQuestionnaire_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).SubmitQuestionnaire(ctx, req.(*ReqSubmitQuestionnaire))
	}
	return interceptor(ctx, in, info, handler)
}

// Lobby_ServiceDesc is the grpc.ServiceDesc for Lobby service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Lobby_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "lq.Lobby",
	HandlerType: (*LobbyServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "fetchConnectionInfo",
			Handler:    _Lobby_FetchConnectionInfo_Handler,
		},
		{
			MethodName: "fetchQueueInfo",
			Handler:    _Lobby_FetchQueueInfo_Handler,
		},
		{
			MethodName: "cancelQueue",
			Handler:    _Lobby_CancelQueue_Handler,
		},
		{
			MethodName: "openidCheck",
			Handler:    _Lobby_OpenidCheck_Handler,
		},
		{
			MethodName: "signup",
			Handler:    _Lobby_Signup_Handler,
		},
		{
			MethodName: "login",
			Handler:    _Lobby_Login_Handler,
		},
		{
			MethodName: "fetchInfo",
			Handler:    _Lobby_FetchInfo_Handler,
		},
		{
			MethodName: "loginSuccess",
			Handler:    _Lobby_LoginSuccess_Handler,
		},
		{
			MethodName: "fetchServerMaintenanceInfo",
			Handler:    _Lobby_FetchServerMaintenanceInfo_Handler,
		},
		{
			MethodName: "emailLogin",
			Handler:    _Lobby_EmailLogin_Handler,
		},
		{
			MethodName: "oauth2Auth",
			Handler:    _Lobby_Oauth2Auth_Handler,
		},
		{
			MethodName: "oauth2Check",
			Handler:    _Lobby_Oauth2Check_Handler,
		},
		{
			MethodName: "oauth2Signup",
			Handler:    _Lobby_Oauth2Signup_Handler,
		},
		{
			MethodName: "oauth2Login",
			Handler:    _Lobby_Oauth2Login_Handler,
		},
		{
			MethodName: "dmmPreLogin",
			Handler:    _Lobby_DmmPreLogin_Handler,
		},
		{
			MethodName: "createPhoneVerifyCode",
			Handler:    _Lobby_CreatePhoneVerifyCode_Handler,
		},
		{
			MethodName: "createEmailVerifyCode",
			Handler:    _Lobby_CreateEmailVerifyCode_Handler,
		},
		{
			MethodName: "verfifyCodeForSecure",
			Handler:    _Lobby_VerfifyCodeForSecure_Handler,
		},
		{
			MethodName: "bindPhoneNumber",
			Handler:    _Lobby_BindPhoneNumber_Handler,
		},
		{
			MethodName: "unbindPhoneNumber",
			Handler:    _Lobby_UnbindPhoneNumber_Handler,
		},
		{
			MethodName: "fetchPhoneLoginBind",
			Handler:    _Lobby_FetchPhoneLoginBind_Handler,
		},
		{
			MethodName: "createPhoneLoginBind",
			Handler:    _Lobby_CreatePhoneLoginBind_Handler,
		},
		{
			MethodName: "bindEmail",
			Handler:    _Lobby_BindEmail_Handler,
		},
		{
			MethodName: "modifyPassword",
			Handler:    _Lobby_ModifyPassword_Handler,
		},
		{
			MethodName: "bindAccount",
			Handler:    _Lobby_BindAccount_Handler,
		},
		{
			MethodName: "logout",
			Handler:    _Lobby_Logout_Handler,
		},
		{
			MethodName: "heatbeat",
			Handler:    _Lobby_Heatbeat_Handler,
		},
		{
			MethodName: "loginBeat",
			Handler:    _Lobby_LoginBeat_Handler,
		},
		{
			MethodName: "createNickname",
			Handler:    _Lobby_CreateNickname_Handler,
		},
		{
			MethodName: "modifyNickname",
			Handler:    _Lobby_ModifyNickname_Handler,
		},
		{
			MethodName: "modifyBirthday",
			Handler:    _Lobby_ModifyBirthday_Handler,
		},
		{
			MethodName: "fetchRoom",
			Handler:    _Lobby_FetchRoom_Handler,
		},
		{
			MethodName: "fetchGamingInfo",
			Handler:    _Lobby_FetchGamingInfo_Handler,
		},
		{
			MethodName: "createRoom",
			Handler:    _Lobby_CreateRoom_Handler,
		},
		{
			MethodName: "joinRoom",
			Handler:    _Lobby_JoinRoom_Handler,
		},
		{
			MethodName: "leaveRoom",
			Handler:    _Lobby_LeaveRoom_Handler,
		},
		{
			MethodName: "readyPlay",
			Handler:    _Lobby_ReadyPlay_Handler,
		},
		{
			MethodName: "dressingStatus",
			Handler:    _Lobby_DressingStatus_Handler,
		},
		{
			MethodName: "startRoom",
			Handler:    _Lobby_StartRoom_Handler,
		},
		{
			MethodName: "roomKickPlayer",
			Handler:    _Lobby_RoomKickPlayer_Handler,
		},
		{
			MethodName: "modifyRoom",
			Handler:    _Lobby_ModifyRoom_Handler,
		},
		{
			MethodName: "addRoomRobot",
			Handler:    _Lobby_AddRoomRobot_Handler,
		},
		{
			MethodName: "matchGame",
			Handler:    _Lobby_MatchGame_Handler,
		},
		{
			MethodName: "cancelMatch",
			Handler:    _Lobby_CancelMatch_Handler,
		},
		{
			MethodName: "fetchAccountInfo",
			Handler:    _Lobby_FetchAccountInfo_Handler,
		},
		{
			MethodName: "changeAvatar",
			Handler:    _Lobby_ChangeAvatar_Handler,
		},
		{
			MethodName: "receiveVersionReward",
			Handler:    _Lobby_ReceiveVersionReward_Handler,
		},
		{
			MethodName: "fetchAccountStatisticInfo",
			Handler:    _Lobby_FetchAccountStatisticInfo_Handler,
		},
		{
			MethodName: "fetchAccountChallengeRankInfo",
			Handler:    _Lobby_FetchAccountChallengeRankInfo_Handler,
		},
		{
			MethodName: "fetchAccountCharacterInfo",
			Handler:    _Lobby_FetchAccountCharacterInfo_Handler,
		},
		{
			MethodName: "shopPurchase",
			Handler:    _Lobby_ShopPurchase_Handler,
		},
		{
			MethodName: "fetchGameRecord",
			Handler:    _Lobby_FetchGameRecord_Handler,
		},
		{
			MethodName: "readGameRecord",
			Handler:    _Lobby_ReadGameRecord_Handler,
		},
		{
			MethodName: "fetchGameRecordList",
			Handler:    _Lobby_FetchGameRecordList_Handler,
		},
		{
			MethodName: "fetchGameRecordListV2",
			Handler:    _Lobby_FetchGameRecordListV2_Handler,
		},
		{
			MethodName: "fetchNextGameRecordList",
			Handler:    _Lobby_FetchNextGameRecordList_Handler,
		},
		{
			MethodName: "fetchCollectedGameRecordList",
			Handler:    _Lobby_FetchCollectedGameRecordList_Handler,
		},
		{
			MethodName: "fetchGameRecordsDetail",
			Handler:    _Lobby_FetchGameRecordsDetail_Handler,
		},
		{
			MethodName: "fetchGameRecordsDetailV2",
			Handler:    _Lobby_FetchGameRecordsDetailV2_Handler,
		},
		{
			MethodName: "addCollectedGameRecord",
			Handler:    _Lobby_AddCollectedGameRecord_Handler,
		},
		{
			MethodName: "removeCollectedGameRecord",
			Handler:    _Lobby_RemoveCollectedGameRecord_Handler,
		},
		{
			MethodName: "changeCollectedGameRecordRemarks",
			Handler:    _Lobby_ChangeCollectedGameRecordRemarks_Handler,
		},
		{
			MethodName: "fetchLevelLeaderboard",
			Handler:    _Lobby_FetchLevelLeaderboard_Handler,
		},
		{
			MethodName: "fetchChallengeLeaderboard",
			Handler:    _Lobby_FetchChallengeLeaderboard_Handler,
		},
		{
			MethodName: "fetchMutiChallengeLevel",
			Handler:    _Lobby_FetchMutiChallengeLevel_Handler,
		},
		{
			MethodName: "fetchMultiAccountBrief",
			Handler:    _Lobby_FetchMultiAccountBrief_Handler,
		},
		{
			MethodName: "fetchFriendList",
			Handler:    _Lobby_FetchFriendList_Handler,
		},
		{
			MethodName: "fetchFriendApplyList",
			Handler:    _Lobby_FetchFriendApplyList_Handler,
		},
		{
			MethodName: "applyFriend",
			Handler:    _Lobby_ApplyFriend_Handler,
		},
		{
			MethodName: "handleFriendApply",
			Handler:    _Lobby_HandleFriendApply_Handler,
		},
		{
			MethodName: "removeFriend",
			Handler:    _Lobby_RemoveFriend_Handler,
		},
		{
			MethodName: "searchAccountById",
			Handler:    _Lobby_SearchAccountById_Handler,
		},
		{
			MethodName: "searchAccountByPattern",
			Handler:    _Lobby_SearchAccountByPattern_Handler,
		},
		{
			MethodName: "fetchAccountState",
			Handler:    _Lobby_FetchAccountState_Handler,
		},
		{
			MethodName: "fetchBagInfo",
			Handler:    _Lobby_FetchBagInfo_Handler,
		},
		{
			MethodName: "useBagItem",
			Handler:    _Lobby_UseBagItem_Handler,
		},
		{
			MethodName: "openManualItem",
			Handler:    _Lobby_OpenManualItem_Handler,
		},
		{
			MethodName: "openRandomRewardItem",
			Handler:    _Lobby_OpenRandomRewardItem_Handler,
		},
		{
			MethodName: "openAllRewardItem",
			Handler:    _Lobby_OpenAllRewardItem_Handler,
		},
		{
			MethodName: "composeShard",
			Handler:    _Lobby_ComposeShard_Handler,
		},
		{
			MethodName: "fetchAnnouncement",
			Handler:    _Lobby_FetchAnnouncement_Handler,
		},
		{
			MethodName: "readAnnouncement",
			Handler:    _Lobby_ReadAnnouncement_Handler,
		},
		{
			MethodName: "fetchMailInfo",
			Handler:    _Lobby_FetchMailInfo_Handler,
		},
		{
			MethodName: "readMail",
			Handler:    _Lobby_ReadMail_Handler,
		},
		{
			MethodName: "deleteMail",
			Handler:    _Lobby_DeleteMail_Handler,
		},
		{
			MethodName: "takeAttachmentFromMail",
			Handler:    _Lobby_TakeAttachmentFromMail_Handler,
		},
		{
			MethodName: "receiveAchievementReward",
			Handler:    _Lobby_ReceiveAchievementReward_Handler,
		},
		{
			MethodName: "receiveAchievementGroupReward",
			Handler:    _Lobby_ReceiveAchievementGroupReward_Handler,
		},
		{
			MethodName: "fetchAchievementRate",
			Handler:    _Lobby_FetchAchievementRate_Handler,
		},
		{
			MethodName: "fetchAchievement",
			Handler:    _Lobby_FetchAchievement_Handler,
		},
		{
			MethodName: "buyShiLian",
			Handler:    _Lobby_BuyShiLian_Handler,
		},
		{
			MethodName: "matchShiLian",
			Handler:    _Lobby_MatchShiLian_Handler,
		},
		{
			MethodName: "goNextShiLian",
			Handler:    _Lobby_GoNextShiLian_Handler,
		},
		{
			MethodName: "updateClientValue",
			Handler:    _Lobby_UpdateClientValue_Handler,
		},
		{
			MethodName: "fetchClientValue",
			Handler:    _Lobby_FetchClientValue_Handler,
		},
		{
			MethodName: "clientMessage",
			Handler:    _Lobby_ClientMessage_Handler,
		},
		{
			MethodName: "fetchCurrentMatchInfo",
			Handler:    _Lobby_FetchCurrentMatchInfo_Handler,
		},
		{
			MethodName: "userComplain",
			Handler:    _Lobby_UserComplain_Handler,
		},
		{
			MethodName: "fetchReviveCoinInfo",
			Handler:    _Lobby_FetchReviveCoinInfo_Handler,
		},
		{
			MethodName: "gainReviveCoin",
			Handler:    _Lobby_GainReviveCoin_Handler,
		},
		{
			MethodName: "fetchDailyTask",
			Handler:    _Lobby_FetchDailyTask_Handler,
		},
		{
			MethodName: "refreshDailyTask",
			Handler:    _Lobby_RefreshDailyTask_Handler,
		},
		{
			MethodName: "useGiftCode",
			Handler:    _Lobby_UseGiftCode_Handler,
		},
		{
			MethodName: "useSpecialGiftCode",
			Handler:    _Lobby_UseSpecialGiftCode_Handler,
		},
		{
			MethodName: "fetchTitleList",
			Handler:    _Lobby_FetchTitleList_Handler,
		},
		{
			MethodName: "useTitle",
			Handler:    _Lobby_UseTitle_Handler,
		},
		{
			MethodName: "sendClientMessage",
			Handler:    _Lobby_SendClientMessage_Handler,
		},
		{
			MethodName: "fetchGameLiveInfo",
			Handler:    _Lobby_FetchGameLiveInfo_Handler,
		},
		{
			MethodName: "fetchGameLiveLeftSegment",
			Handler:    _Lobby_FetchGameLiveLeftSegment_Handler,
		},
		{
			MethodName: "fetchGameLiveList",
			Handler:    _Lobby_FetchGameLiveList_Handler,
		},
		{
			MethodName: "fetchCommentSetting",
			Handler:    _Lobby_FetchCommentSetting_Handler,
		},
		{
			MethodName: "updateCommentSetting",
			Handler:    _Lobby_UpdateCommentSetting_Handler,
		},
		{
			MethodName: "fetchCommentList",
			Handler:    _Lobby_FetchCommentList_Handler,
		},
		{
			MethodName: "fetchCommentContent",
			Handler:    _Lobby_FetchCommentContent_Handler,
		},
		{
			MethodName: "leaveComment",
			Handler:    _Lobby_LeaveComment_Handler,
		},
		{
			MethodName: "deleteComment",
			Handler:    _Lobby_DeleteComment_Handler,
		},
		{
			MethodName: "updateReadComment",
			Handler:    _Lobby_UpdateReadComment_Handler,
		},
		{
			MethodName: "fetchRollingNotice",
			Handler:    _Lobby_FetchRollingNotice_Handler,
		},
		{
			MethodName: "fetchMaintainNotice",
			Handler:    _Lobby_FetchMaintainNotice_Handler,
		},
		{
			MethodName: "fetchServerTime",
			Handler:    _Lobby_FetchServerTime_Handler,
		},
		{
			MethodName: "fetchPlatformProducts",
			Handler:    _Lobby_FetchPlatformProducts_Handler,
		},
		{
			MethodName: "fetchRandomCharacter",
			Handler:    _Lobby_FetchRandomCharacter_Handler,
		},
		{
			MethodName: "setRandomCharacter",
			Handler:    _Lobby_SetRandomCharacter_Handler,
		},
		{
			MethodName: "cancelGooglePlayOrder",
			Handler:    _Lobby_CancelGooglePlayOrder_Handler,
		},
		{
			MethodName: "openChest",
			Handler:    _Lobby_OpenChest_Handler,
		},
		{
			MethodName: "buyFromChestShop",
			Handler:    _Lobby_BuyFromChestShop_Handler,
		},
		{
			MethodName: "fetchDailySignInInfo",
			Handler:    _Lobby_FetchDailySignInInfo_Handler,
		},
		{
			MethodName: "doDailySignIn",
			Handler:    _Lobby_DoDailySignIn_Handler,
		},
		{
			MethodName: "doActivitySignIn",
			Handler:    _Lobby_DoActivitySignIn_Handler,
		},
		{
			MethodName: "fetchCharacterInfo",
			Handler:    _Lobby_FetchCharacterInfo_Handler,
		},
		{
			MethodName: "updateCharacterSort",
			Handler:    _Lobby_UpdateCharacterSort_Handler,
		},
		{
			MethodName: "changeMainCharacter",
			Handler:    _Lobby_ChangeMainCharacter_Handler,
		},
		{
			MethodName: "changeCharacterSkin",
			Handler:    _Lobby_ChangeCharacterSkin_Handler,
		},
		{
			MethodName: "changeCharacterView",
			Handler:    _Lobby_ChangeCharacterView_Handler,
		},
		{
			MethodName: "setHiddenCharacter",
			Handler:    _Lobby_SetHiddenCharacter_Handler,
		},
		{
			MethodName: "sendGiftToCharacter",
			Handler:    _Lobby_SendGiftToCharacter_Handler,
		},
		{
			MethodName: "sellItem",
			Handler:    _Lobby_SellItem_Handler,
		},
		{
			MethodName: "fetchCommonView",
			Handler:    _Lobby_FetchCommonView_Handler,
		},
		{
			MethodName: "changeCommonView",
			Handler:    _Lobby_ChangeCommonView_Handler,
		},
		{
			MethodName: "saveCommonViews",
			Handler:    _Lobby_SaveCommonViews_Handler,
		},
		{
			MethodName: "fetchCommonViews",
			Handler:    _Lobby_FetchCommonViews_Handler,
		},
		{
			MethodName: "fetchAllCommonViews",
			Handler:    _Lobby_FetchAllCommonViews_Handler,
		},
		{
			MethodName: "useCommonView",
			Handler:    _Lobby_UseCommonView_Handler,
		},
		{
			MethodName: "upgradeCharacter",
			Handler:    _Lobby_UpgradeCharacter_Handler,
		},
		{
			MethodName: "addFinishedEnding",
			Handler:    _Lobby_AddFinishedEnding_Handler,
		},
		{
			MethodName: "receiveEndingReward",
			Handler:    _Lobby_ReceiveEndingReward_Handler,
		},
		{
			MethodName: "gameMasterCommand",
			Handler:    _Lobby_GameMasterCommand_Handler,
		},
		{
			MethodName: "fetchShopInfo",
			Handler:    _Lobby_FetchShopInfo_Handler,
		},
		{
			MethodName: "buyFromShop",
			Handler:    _Lobby_BuyFromShop_Handler,
		},
		{
			MethodName: "buyFromZHP",
			Handler:    _Lobby_BuyFromZHP_Handler,
		},
		{
			MethodName: "refreshZHPShop",
			Handler:    _Lobby_RefreshZHPShop_Handler,
		},
		{
			MethodName: "fetchMonthTicketInfo",
			Handler:    _Lobby_FetchMonthTicketInfo_Handler,
		},
		{
			MethodName: "payMonthTicket",
			Handler:    _Lobby_PayMonthTicket_Handler,
		},
		{
			MethodName: "exchangeCurrency",
			Handler:    _Lobby_ExchangeCurrency_Handler,
		},
		{
			MethodName: "exchangeChestStone",
			Handler:    _Lobby_ExchangeChestStone_Handler,
		},
		{
			MethodName: "exchangeDiamond",
			Handler:    _Lobby_ExchangeDiamond_Handler,
		},
		{
			MethodName: "fetchServerSettings",
			Handler:    _Lobby_FetchServerSettings_Handler,
		},
		{
			MethodName: "fetchAccountSettings",
			Handler:    _Lobby_FetchAccountSettings_Handler,
		},
		{
			MethodName: "updateAccountSettings",
			Handler:    _Lobby_UpdateAccountSettings_Handler,
		},
		{
			MethodName: "fetchModNicknameTime",
			Handler:    _Lobby_FetchModNicknameTime_Handler,
		},
		{
			MethodName: "createWechatNativeOrder",
			Handler:    _Lobby_CreateWechatNativeOrder_Handler,
		},
		{
			MethodName: "createWechatAppOrder",
			Handler:    _Lobby_CreateWechatAppOrder_Handler,
		},
		{
			MethodName: "createAlipayOrder",
			Handler:    _Lobby_CreateAlipayOrder_Handler,
		},
		{
			MethodName: "createAlipayScanOrder",
			Handler:    _Lobby_CreateAlipayScanOrder_Handler,
		},
		{
			MethodName: "createAlipayAppOrder",
			Handler:    _Lobby_CreateAlipayAppOrder_Handler,
		},
		{
			MethodName: "createJPCreditCardOrder",
			Handler:    _Lobby_CreateJPCreditCardOrder_Handler,
		},
		{
			MethodName: "createJPPaypalOrder",
			Handler:    _Lobby_CreateJPPaypalOrder_Handler,
		},
		{
			MethodName: "createJPAuOrder",
			Handler:    _Lobby_CreateJPAuOrder_Handler,
		},
		{
			MethodName: "createJPDocomoOrder",
			Handler:    _Lobby_CreateJPDocomoOrder_Handler,
		},
		{
			MethodName: "createJPWebMoneyOrder",
			Handler:    _Lobby_CreateJPWebMoneyOrder_Handler,
		},
		{
			MethodName: "createJPSoftbankOrder",
			Handler:    _Lobby_CreateJPSoftbankOrder_Handler,
		},
		{
			MethodName: "createJPPayPayOrder",
			Handler:    _Lobby_CreateJPPayPayOrder_Handler,
		},
		{
			MethodName: "fetchJPCommonCreditCardOrder",
			Handler:    _Lobby_FetchJPCommonCreditCardOrder_Handler,
		},
		{
			MethodName: "createJPGMOOrder",
			Handler:    _Lobby_CreateJPGMOOrder_Handler,
		},
		{
			MethodName: "createENPaypalOrder",
			Handler:    _Lobby_CreateENPaypalOrder_Handler,
		},
		{
			MethodName: "createENMasterCardOrder",
			Handler:    _Lobby_CreateENMasterCardOrder_Handler,
		},
		{
			MethodName: "createENVisaOrder",
			Handler:    _Lobby_CreateENVisaOrder_Handler,
		},
		{
			MethodName: "createENJCBOrder",
			Handler:    _Lobby_CreateENJCBOrder_Handler,
		},
		{
			MethodName: "createENAlipayOrder",
			Handler:    _Lobby_CreateENAlipayOrder_Handler,
		},
		{
			MethodName: "createKRPaypalOrder",
			Handler:    _Lobby_CreateKRPaypalOrder_Handler,
		},
		{
			MethodName: "createKRMasterCardOrder",
			Handler:    _Lobby_CreateKRMasterCardOrder_Handler,
		},
		{
			MethodName: "createKRVisaOrder",
			Handler:    _Lobby_CreateKRVisaOrder_Handler,
		},
		{
			MethodName: "createKRJCBOrder",
			Handler:    _Lobby_CreateKRJCBOrder_Handler,
		},
		{
			MethodName: "createKRAlipayOrder",
			Handler:    _Lobby_CreateKRAlipayOrder_Handler,
		},
		{
			MethodName: "createDMMOrder",
			Handler:    _Lobby_CreateDMMOrder_Handler,
		},
		{
			MethodName: "createIAPOrder",
			Handler:    _Lobby_CreateIAPOrder_Handler,
		},
		{
			MethodName: "createSteamOrder",
			Handler:    _Lobby_CreateSteamOrder_Handler,
		},
		{
			MethodName: "verifySteamOrder",
			Handler:    _Lobby_VerifySteamOrder_Handler,
		},
		{
			MethodName: "createMyCardAndroidOrder",
			Handler:    _Lobby_CreateMyCardAndroidOrder_Handler,
		},
		{
			MethodName: "createMyCardWebOrder",
			Handler:    _Lobby_CreateMyCardWebOrder_Handler,
		},
		{
			MethodName: "createPaypalOrder",
			Handler:    _Lobby_CreatePaypalOrder_Handler,
		},
		{
			MethodName: "createXsollaOrder",
			Handler:    _Lobby_CreateXsollaOrder_Handler,
		},
		{
			MethodName: "verifyMyCardOrder",
			Handler:    _Lobby_VerifyMyCardOrder_Handler,
		},
		{
			MethodName: "verificationIAPOrder",
			Handler:    _Lobby_VerificationIAPOrder_Handler,
		},
		{
			MethodName: "createYostarSDKOrder",
			Handler:    _Lobby_CreateYostarSDKOrder_Handler,
		},
		{
			MethodName: "createBillingOrder",
			Handler:    _Lobby_CreateBillingOrder_Handler,
		},
		{
			MethodName: "solveGooglePlayOrder",
			Handler:    _Lobby_SolveGooglePlayOrder_Handler,
		},
		{
			MethodName: "solveGooglePayOrderV3",
			Handler:    _Lobby_SolveGooglePayOrderV3_Handler,
		},
		{
			MethodName: "deliverAA32Order",
			Handler:    _Lobby_DeliverAA32Order_Handler,
		},
		{
			MethodName: "fetchMisc",
			Handler:    _Lobby_FetchMisc_Handler,
		},
		{
			MethodName: "modifySignature",
			Handler:    _Lobby_ModifySignature_Handler,
		},
		{
			MethodName: "fetchIDCardInfo",
			Handler:    _Lobby_FetchIDCardInfo_Handler,
		},
		{
			MethodName: "updateIDCardInfo",
			Handler:    _Lobby_UpdateIDCardInfo_Handler,
		},
		{
			MethodName: "fetchVipReward",
			Handler:    _Lobby_FetchVipReward_Handler,
		},
		{
			MethodName: "gainVipReward",
			Handler:    _Lobby_GainVipReward_Handler,
		},
		{
			MethodName: "fetchRefundOrder",
			Handler:    _Lobby_FetchRefundOrder_Handler,
		},
		{
			MethodName: "fetchCustomizedContestList",
			Handler:    _Lobby_FetchCustomizedContestList_Handler,
		},
		{
			MethodName: "fetchCustomizedContestAuthInfo",
			Handler:    _Lobby_FetchCustomizedContestAuthInfo_Handler,
		},
		{
			MethodName: "enterCustomizedContest",
			Handler:    _Lobby_EnterCustomizedContest_Handler,
		},
		{
			MethodName: "leaveCustomizedContest",
			Handler:    _Lobby_LeaveCustomizedContest_Handler,
		},
		{
			MethodName: "fetchCustomizedContestOnlineInfo",
			Handler:    _Lobby_FetchCustomizedContestOnlineInfo_Handler,
		},
		{
			MethodName: "fetchCustomizedContestByContestId",
			Handler:    _Lobby_FetchCustomizedContestByContestId_Handler,
		},
		{
			MethodName: "signupCustomizedContest",
			Handler:    _Lobby_SignupCustomizedContest_Handler,
		},
		{
			MethodName: "startCustomizedContest",
			Handler:    _Lobby_StartCustomizedContest_Handler,
		},
		{
			MethodName: "stopCustomizedContest",
			Handler:    _Lobby_StopCustomizedContest_Handler,
		},
		{
			MethodName: "joinCustomizedContestChatRoom",
			Handler:    _Lobby_JoinCustomizedContestChatRoom_Handler,
		},
		{
			MethodName: "leaveCustomizedContestChatRoom",
			Handler:    _Lobby_LeaveCustomizedContestChatRoom_Handler,
		},
		{
			MethodName: "sayChatMessage",
			Handler:    _Lobby_SayChatMessage_Handler,
		},
		{
			MethodName: "fetchCustomizedContestGameRecords",
			Handler:    _Lobby_FetchCustomizedContestGameRecords_Handler,
		},
		{
			MethodName: "fetchCustomizedContestGameLiveList",
			Handler:    _Lobby_FetchCustomizedContestGameLiveList_Handler,
		},
		{
			MethodName: "followCustomizedContest",
			Handler:    _Lobby_FollowCustomizedContest_Handler,
		},
		{
			MethodName: "unfollowCustomizedContest",
			Handler:    _Lobby_UnfollowCustomizedContest_Handler,
		},
		{
			MethodName: "fetchActivityList",
			Handler:    _Lobby_FetchActivityList_Handler,
		},
		{
			MethodName: "fetchAccountActivityData",
			Handler:    _Lobby_FetchAccountActivityData_Handler,
		},
		{
			MethodName: "exchangeActivityItem",
			Handler:    _Lobby_ExchangeActivityItem_Handler,
		},
		{
			MethodName: "completeActivityTask",
			Handler:    _Lobby_CompleteActivityTask_Handler,
		},
		{
			MethodName: "completeActivityTaskBatch",
			Handler:    _Lobby_CompleteActivityTaskBatch_Handler,
		},
		{
			MethodName: "completeActivityFlipTask",
			Handler:    _Lobby_CompleteActivityFlipTask_Handler,
		},
		{
			MethodName: "completePeriodActivityTask",
			Handler:    _Lobby_CompletePeriodActivityTask_Handler,
		},
		{
			MethodName: "completePeriodActivityTaskBatch",
			Handler:    _Lobby_CompletePeriodActivityTaskBatch_Handler,
		},
		{
			MethodName: "completeRandomActivityTask",
			Handler:    _Lobby_CompleteRandomActivityTask_Handler,
		},
		{
			MethodName: "receiveActivityFlipTask",
			Handler:    _Lobby_ReceiveActivityFlipTask_Handler,
		},
		{
			MethodName: "completeSegmentTaskReward",
			Handler:    _Lobby_CompleteSegmentTaskReward_Handler,
		},
		{
			MethodName: "fetchActivityFlipInfo",
			Handler:    _Lobby_FetchActivityFlipInfo_Handler,
		},
		{
			MethodName: "gainAccumulatedPointActivityReward",
			Handler:    _Lobby_GainAccumulatedPointActivityReward_Handler,
		},
		{
			MethodName: "gainMultiPointActivityReward",
			Handler:    _Lobby_GainMultiPointActivityReward_Handler,
		},
		{
			MethodName: "fetchRankPointLeaderboard",
			Handler:    _Lobby_FetchRankPointLeaderboard_Handler,
		},
		{
			MethodName: "gainRankPointReward",
			Handler:    _Lobby_GainRankPointReward_Handler,
		},
		{
			MethodName: "richmanActivityNextMove",
			Handler:    _Lobby_RichmanActivityNextMove_Handler,
		},
		{
			MethodName: "richmanAcitivitySpecialMove",
			Handler:    _Lobby_RichmanAcitivitySpecialMove_Handler,
		},
		{
			MethodName: "richmanActivityChestInfo",
			Handler:    _Lobby_RichmanActivityChestInfo_Handler,
		},
		{
			MethodName: "createGameObserveAuth",
			Handler:    _Lobby_CreateGameObserveAuth_Handler,
		},
		{
			MethodName: "refreshGameObserveAuth",
			Handler:    _Lobby_RefreshGameObserveAuth_Handler,
		},
		{
			MethodName: "fetchActivityBuff",
			Handler:    _Lobby_FetchActivityBuff_Handler,
		},
		{
			MethodName: "upgradeActivityBuff",
			Handler:    _Lobby_UpgradeActivityBuff_Handler,
		},
		{
			MethodName: "upgradeActivityLevel",
			Handler:    _Lobby_UpgradeActivityLevel_Handler,
		},
		{
			MethodName: "receiveUpgradeActivityReward",
			Handler:    _Lobby_ReceiveUpgradeActivityReward_Handler,
		},
		{
			MethodName: "upgradeChallenge",
			Handler:    _Lobby_UpgradeChallenge_Handler,
		},
		{
			MethodName: "refreshChallenge",
			Handler:    _Lobby_RefreshChallenge_Handler,
		},
		{
			MethodName: "fetchChallengeInfo",
			Handler:    _Lobby_FetchChallengeInfo_Handler,
		},
		{
			MethodName: "forceCompleteChallengeTask",
			Handler:    _Lobby_ForceCompleteChallengeTask_Handler,
		},
		{
			MethodName: "fetchChallengeSeason",
			Handler:    _Lobby_FetchChallengeSeason_Handler,
		},
		{
			MethodName: "receiveChallengeRankReward",
			Handler:    _Lobby_ReceiveChallengeRankReward_Handler,
		},
		{
			MethodName: "fetchABMatchInfo",
			Handler:    _Lobby_FetchABMatchInfo_Handler,
		},
		{
			MethodName: "buyInABMatch",
			Handler:    _Lobby_BuyInABMatch_Handler,
		},
		{
			MethodName: "receiveABMatchReward",
			Handler:    _Lobby_ReceiveABMatchReward_Handler,
		},
		{
			MethodName: "quitABMatch",
			Handler:    _Lobby_QuitABMatch_Handler,
		},
		{
			MethodName: "startUnifiedMatch",
			Handler:    _Lobby_StartUnifiedMatch_Handler,
		},
		{
			MethodName: "cancelUnifiedMatch",
			Handler:    _Lobby_CancelUnifiedMatch_Handler,
		},
		{
			MethodName: "fetchGamePointRank",
			Handler:    _Lobby_FetchGamePointRank_Handler,
		},
		{
			MethodName: "fetchSelfGamePointRank",
			Handler:    _Lobby_FetchSelfGamePointRank_Handler,
		},
		{
			MethodName: "readSNS",
			Handler:    _Lobby_ReadSNS_Handler,
		},
		{
			MethodName: "replySNS",
			Handler:    _Lobby_ReplySNS_Handler,
		},
		{
			MethodName: "likeSNS",
			Handler:    _Lobby_LikeSNS_Handler,
		},
		{
			MethodName: "digMine",
			Handler:    _Lobby_DigMine_Handler,
		},
		{
			MethodName: "fetchLastPrivacy",
			Handler:    _Lobby_FetchLastPrivacy_Handler,
		},
		{
			MethodName: "checkPrivacy",
			Handler:    _Lobby_CheckPrivacy_Handler,
		},
		{
			MethodName: "responseCaptcha",
			Handler:    _Lobby_ResponseCaptcha_Handler,
		},
		{
			MethodName: "fetchRPGBattleHistory",
			Handler:    _Lobby_FetchRPGBattleHistory_Handler,
		},
		{
			MethodName: "fetchRPGBattleHistoryV2",
			Handler:    _Lobby_FetchRPGBattleHistoryV2_Handler,
		},
		{
			MethodName: "receiveRPGRewards",
			Handler:    _Lobby_ReceiveRPGRewards_Handler,
		},
		{
			MethodName: "receiveRPGReward",
			Handler:    _Lobby_ReceiveRPGReward_Handler,
		},
		{
			MethodName: "buyArenaTicket",
			Handler:    _Lobby_BuyArenaTicket_Handler,
		},
		{
			MethodName: "enterArena",
			Handler:    _Lobby_EnterArena_Handler,
		},
		{
			MethodName: "receiveArenaReward",
			Handler:    _Lobby_ReceiveArenaReward_Handler,
		},
		{
			MethodName: "fetchOBToken",
			Handler:    _Lobby_FetchOBToken_Handler,
		},
		{
			MethodName: "receiveCharacterRewards",
			Handler:    _Lobby_ReceiveCharacterRewards_Handler,
		},
		{
			MethodName: "feedActivityFeed",
			Handler:    _Lobby_FeedActivityFeed_Handler,
		},
		{
			MethodName: "sendActivityGiftToFriend",
			Handler:    _Lobby_SendActivityGiftToFriend_Handler,
		},
		{
			MethodName: "receiveActivityGift",
			Handler:    _Lobby_ReceiveActivityGift_Handler,
		},
		{
			MethodName: "receiveAllActivityGift",
			Handler:    _Lobby_ReceiveAllActivityGift_Handler,
		},
		{
			MethodName: "fetchFriendGiftActivityData",
			Handler:    _Lobby_FetchFriendGiftActivityData_Handler,
		},
		{
			MethodName: "openPreChestItem",
			Handler:    _Lobby_OpenPreChestItem_Handler,
		},
		{
			MethodName: "fetchVoteActivity",
			Handler:    _Lobby_FetchVoteActivity_Handler,
		},
		{
			MethodName: "voteActivity",
			Handler:    _Lobby_VoteActivity_Handler,
		},
		{
			MethodName: "unlockActivitySpot",
			Handler:    _Lobby_UnlockActivitySpot_Handler,
		},
		{
			MethodName: "unlockActivitySpotEnding",
			Handler:    _Lobby_UnlockActivitySpotEnding_Handler,
		},
		{
			MethodName: "receiveActivitySpotReward",
			Handler:    _Lobby_ReceiveActivitySpotReward_Handler,
		},
		{
			MethodName: "deleteAccount",
			Handler:    _Lobby_DeleteAccount_Handler,
		},
		{
			MethodName: "cancelDeleteAccount",
			Handler:    _Lobby_CancelDeleteAccount_Handler,
		},
		{
			MethodName: "logReport",
			Handler:    _Lobby_LogReport_Handler,
		},
		{
			MethodName: "bindOauth2",
			Handler:    _Lobby_BindOauth2_Handler,
		},
		{
			MethodName: "fetchOauth2Info",
			Handler:    _Lobby_FetchOauth2Info_Handler,
		},
		{
			MethodName: "setLoadingImage",
			Handler:    _Lobby_SetLoadingImage_Handler,
		},
		{
			MethodName: "fetchShopInterval",
			Handler:    _Lobby_FetchShopInterval_Handler,
		},
		{
			MethodName: "fetchActivityInterval",
			Handler:    _Lobby_FetchActivityInterval_Handler,
		},
		{
			MethodName: "fetchRecentFriend",
			Handler:    _Lobby_FetchRecentFriend_Handler,
		},
		{
			MethodName: "openGacha",
			Handler:    _Lobby_OpenGacha_Handler,
		},
		{
			MethodName: "taskRequest",
			Handler:    _Lobby_TaskRequest_Handler,
		},
		{
			MethodName: "simulationActivityTrain",
			Handler:    _Lobby_SimulationActivityTrain_Handler,
		},
		{
			MethodName: "fetchSimulationGameRecord",
			Handler:    _Lobby_FetchSimulationGameRecord_Handler,
		},
		{
			MethodName: "startSimulationActivityGame",
			Handler:    _Lobby_StartSimulationActivityGame_Handler,
		},
		{
			MethodName: "fetchSimulationGameRank",
			Handler:    _Lobby_FetchSimulationGameRank_Handler,
		},
		{
			MethodName: "generateCombiningCraft",
			Handler:    _Lobby_GenerateCombiningCraft_Handler,
		},
		{
			MethodName: "moveCombiningCraft",
			Handler:    _Lobby_MoveCombiningCraft_Handler,
		},
		{
			MethodName: "combiningRecycleCraft",
			Handler:    _Lobby_CombiningRecycleCraft_Handler,
		},
		{
			MethodName: "recoverCombiningRecycle",
			Handler:    _Lobby_RecoverCombiningRecycle_Handler,
		},
		{
			MethodName: "finishCombiningOrder",
			Handler:    _Lobby_FinishCombiningOrder_Handler,
		},
		{
			MethodName: "upgradeVillageBuilding",
			Handler:    _Lobby_UpgradeVillageBuilding_Handler,
		},
		{
			MethodName: "receiveVillageBuildingReward",
			Handler:    _Lobby_ReceiveVillageBuildingReward_Handler,
		},
		{
			MethodName: "startVillageTrip",
			Handler:    _Lobby_StartVillageTrip_Handler,
		},
		{
			MethodName: "receiveVillageTripReward",
			Handler:    _Lobby_ReceiveVillageTripReward_Handler,
		},
		{
			MethodName: "completeVillageTask",
			Handler:    _Lobby_CompleteVillageTask_Handler,
		},
		{
			MethodName: "getFriendVillageData",
			Handler:    _Lobby_GetFriendVillageData_Handler,
		},
		{
			MethodName: "setVillageWorker",
			Handler:    _Lobby_SetVillageWorker_Handler,
		},
		{
			MethodName: "nextRoundVillage",
			Handler:    _Lobby_NextRoundVillage_Handler,
		},
		{
			MethodName: "resolveFestivalActivityProposal",
			Handler:    _Lobby_ResolveFestivalActivityProposal_Handler,
		},
		{
			MethodName: "resolveFestivalActivityEvent",
			Handler:    _Lobby_ResolveFestivalActivityEvent_Handler,
		},
		{
			MethodName: "buyFestivalProposal",
			Handler:    _Lobby_BuyFestivalProposal_Handler,
		},
		{
			MethodName: "islandActivityMove",
			Handler:    _Lobby_IslandActivityMove_Handler,
		},
		{
			MethodName: "islandActivityBuy",
			Handler:    _Lobby_IslandActivityBuy_Handler,
		},
		{
			MethodName: "islandActivitySell",
			Handler:    _Lobby_IslandActivitySell_Handler,
		},
		{
			MethodName: "islandActivityTidyBag",
			Handler:    _Lobby_IslandActivityTidyBag_Handler,
		},
		{
			MethodName: "islandActivityUnlockBagGrid",
			Handler:    _Lobby_IslandActivityUnlockBagGrid_Handler,
		},
		{
			MethodName: "createCustomizedContest",
			Handler:    _Lobby_CreateCustomizedContest_Handler,
		},
		{
			MethodName: "fetchManagerCustomizedContestList",
			Handler:    _Lobby_FetchManagerCustomizedContestList_Handler,
		},
		{
			MethodName: "fetchManagerCustomizedContest",
			Handler:    _Lobby_FetchManagerCustomizedContest_Handler,
		},
		{
			MethodName: "updateManagerCustomizedContest",
			Handler:    _Lobby_UpdateManagerCustomizedContest_Handler,
		},
		{
			MethodName: "fetchContestPlayerRank",
			Handler:    _Lobby_FetchContestPlayerRank_Handler,
		},
		{
			MethodName: "fetchReadyPlayerList",
			Handler:    _Lobby_FetchReadyPlayerList_Handler,
		},
		{
			MethodName: "createGamePlan",
			Handler:    _Lobby_CreateGamePlan_Handler,
		},
		{
			MethodName: "generateContestManagerLoginCode",
			Handler:    _Lobby_GenerateContestManagerLoginCode_Handler,
		},
		{
			MethodName: "amuletActivityStartGame",
			Handler:    _Lobby_AmuletActivityStartGame_Handler,
		},
		{
			MethodName: "amuletActivityOperate",
			Handler:    _Lobby_AmuletActivityOperate_Handler,
		},
		{
			MethodName: "amuletActivityChangeHands",
			Handler:    _Lobby_AmuletActivityChangeHands_Handler,
		},
		{
			MethodName: "amuletActivityUpgrade",
			Handler:    _Lobby_AmuletActivityUpgrade_Handler,
		},
		{
			MethodName: "amuletActivityBuy",
			Handler:    _Lobby_AmuletActivityBuy_Handler,
		},
		{
			MethodName: "amuletActivitySelectPack",
			Handler:    _Lobby_AmuletActivitySelectPack_Handler,
		},
		{
			MethodName: "amuletActivitySellEffect",
			Handler:    _Lobby_AmuletActivitySellEffect_Handler,
		},
		{
			MethodName: "amuletActivityEffectSort",
			Handler:    _Lobby_AmuletActivityEffectSort_Handler,
		},
		{
			MethodName: "amuletActivityGiveup",
			Handler:    _Lobby_AmuletActivityGiveup_Handler,
		},
		{
			MethodName: "amuletActivityRefreshShop",
			Handler:    _Lobby_AmuletActivityRefreshShop_Handler,
		},
		{
			MethodName: "amuletActivitySelectFreeEffect",
			Handler:    _Lobby_AmuletActivitySelectFreeEffect_Handler,
		},
		{
			MethodName: "amuletActivityUpgradeShopBuff",
			Handler:    _Lobby_AmuletActivityUpgradeShopBuff_Handler,
		},
		{
			MethodName: "amuletActivityEndShopping",
			Handler:    _Lobby_AmuletActivityEndShopping_Handler,
		},
		{
			MethodName: "amuletActivitySetSkillLevel",
			Handler:    _Lobby_AmuletActivitySetSkillLevel_Handler,
		},
		{
			MethodName: "amuletActivityMaintainInfo",
			Handler:    _Lobby_AmuletActivityMaintainInfo_Handler,
		},
		{
			MethodName: "storyActivityUnlock",
			Handler:    _Lobby_StoryActivityUnlock_Handler,
		},
		{
			MethodName: "storyActivityUnlockEnding",
			Handler:    _Lobby_StoryActivityUnlockEnding_Handler,
		},
		{
			MethodName: "storyActivityReceiveEndingReward",
			Handler:    _Lobby_StoryActivityReceiveEndingReward_Handler,
		},
		{
			MethodName: "storyActivityReceiveFinishReward",
			Handler:    _Lobby_StoryActivityReceiveFinishReward_Handler,
		},
		{
			MethodName: "storyActivityReceiveAllFinishReward",
			Handler:    _Lobby_StoryActivityReceiveAllFinishReward_Handler,
		},
		{
			MethodName: "storyActivityUnlockEndingAndReceive",
			Handler:    _Lobby_StoryActivityUnlockEndingAndReceive_Handler,
		},
		{
			MethodName: "fetchActivityRank",
			Handler:    _Lobby_FetchActivityRank_Handler,
		},
		{
			MethodName: "setVerifiedHidden",
			Handler:    _Lobby_SetVerifiedHidden_Handler,
		},
		{
			MethodName: "fetchQuestionnaireList",
			Handler:    _Lobby_FetchQuestionnaireList_Handler,
		},
		{
			MethodName: "fetchQuestionnaireDetail",
			Handler:    _Lobby_FetchQuestionnaireDetail_Handler,
		},
		{
			MethodName: "submitQuestionnaire",
			Handler:    _Lobby_SubmitQuestionnaire_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "liqi.proto",
}

const (
	FastTest_AuthGame_FullMethodName             = "/lq.FastTest/authGame"
	FastTest_EnterGame_FullMethodName            = "/lq.FastTest/enterGame"
	FastTest_SyncGame_FullMethodName             = "/lq.FastTest/syncGame"
	FastTest_FinishSyncGame_FullMethodName       = "/lq.FastTest/finishSyncGame"
	FastTest_TerminateGame_FullMethodName        = "/lq.FastTest/terminateGame"
	FastTest_InputOperation_FullMethodName       = "/lq.FastTest/inputOperation"
	FastTest_InputChiPengGang_FullMethodName     = "/lq.FastTest/inputChiPengGang"
	FastTest_ConfirmNewRound_FullMethodName      = "/lq.FastTest/confirmNewRound"
	FastTest_BroadcastInGame_FullMethodName      = "/lq.FastTest/broadcastInGame"
	FastTest_InputGameGMCommand_FullMethodName   = "/lq.FastTest/inputGameGMCommand"
	FastTest_FetchGamePlayerState_FullMethodName = "/lq.FastTest/fetchGamePlayerState"
	FastTest_CheckNetworkDelay_FullMethodName    = "/lq.FastTest/checkNetworkDelay"
	FastTest_ClearLeaving_FullMethodName         = "/lq.FastTest/clearLeaving"
	FastTest_VoteGameEnd_FullMethodName          = "/lq.FastTest/voteGameEnd"
	FastTest_AuthObserve_FullMethodName          = "/lq.FastTest/authObserve"
	FastTest_StartObserve_FullMethodName         = "/lq.FastTest/startObserve"
	FastTest_StopObserve_FullMethodName          = "/lq.FastTest/stopObserve"
)

// FastTestClient is the client API for FastTest service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FastTestClient interface {
	AuthGame(ctx context.Context, in *ReqAuthGame, opts ...grpc.CallOption) (*ResAuthGame, error)
	EnterGame(ctx context.Context, in *ReqCommon, opts ...grpc.CallOption) (*ResEnterGame, error)
	SyncGame(ctx context.Context, in *ReqSyncGame, opts ...grpc.CallOption) (*ResSyncGame, error)
	FinishSyncGame(ctx context.Context, in *ReqCommon, opts ...grpc.CallOption) (*ResCommon, error)
	TerminateGame(ctx context.Context, in *ReqCommon, opts ...grpc.CallOption) (*ResCommon, error)
	InputOperation(ctx context.Context, in *ReqSelfOperation, opts ...grpc.CallOption) (*ResCommon, error)
	InputChiPengGang(ctx context.Context, in *ReqChiPengGang, opts ...grpc.CallOption) (*ResCommon, error)
	ConfirmNewRound(ctx context.Context, in *ReqCommon, opts ...grpc.CallOption) (*ResCommon, error)
	BroadcastInGame(ctx context.Context, in *ReqBroadcastInGame, opts ...grpc.CallOption) (*ResCommon, error)
	InputGameGMCommand(ctx context.Context, in *ReqGMCommandInGaming, opts ...grpc.CallOption) (*ResCommon, error)
	FetchGamePlayerState(ctx context.Context, in *ReqCommon, opts ...grpc.CallOption) (*ResGamePlayerState, error)
	CheckNetworkDelay(ctx context.Context, in *ReqCommon, opts ...grpc.CallOption) (*ResCommon, error)
	ClearLeaving(ctx context.Context, in *ReqCommon, opts ...grpc.CallOption) (*ResCommon, error)
	VoteGameEnd(ctx context.Context, in *ReqVoteGameEnd, opts ...grpc.CallOption) (*ResGameEndVote, error)
	AuthObserve(ctx context.Context, in *ReqAuthObserve, opts ...grpc.CallOption) (*ResCommon, error)
	StartObserve(ctx context.Context, in *ReqCommon, opts ...grpc.CallOption) (*ResStartObserve, error)
	StopObserve(ctx context.Context, in *ReqCommon, opts ...grpc.CallOption) (*ResCommon, error)
}

type fastTestClient struct {
	cc grpc.ClientConnInterface
}

func NewFastTestClient(cc grpc.ClientConnInterface) FastTestClient {
	return &fastTestClient{cc}
}

func (c *fastTestClient) AuthGame(ctx context.Context, in *ReqAuthGame, opts ...grpc.CallOption) (*ResAuthGame, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResAuthGame)
	err := c.cc.Invoke(ctx, FastTest_AuthGame_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fastTestClient) EnterGame(ctx context.Context, in *ReqCommon, opts ...grpc.CallOption) (*ResEnterGame, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResEnterGame)
	err := c.cc.Invoke(ctx, FastTest_EnterGame_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fastTestClient) SyncGame(ctx context.Context, in *ReqSyncGame, opts ...grpc.CallOption) (*ResSyncGame, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResSyncGame)
	err := c.cc.Invoke(ctx, FastTest_SyncGame_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fastTestClient) FinishSyncGame(ctx context.Context, in *ReqCommon, opts ...grpc.CallOption) (*ResCommon, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResCommon)
	err := c.cc.Invoke(ctx, FastTest_FinishSyncGame_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fastTestClient) TerminateGame(ctx context.Context, in *ReqCommon, opts ...grpc.CallOption) (*ResCommon, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResCommon)
	err := c.cc.Invoke(ctx, FastTest_TerminateGame_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fastTestClient) InputOperation(ctx context.Context, in *ReqSelfOperation, opts ...grpc.CallOption) (*ResCommon, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResCommon)
	err := c.cc.Invoke(ctx, FastTest_InputOperation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fastTestClient) InputChiPengGang(ctx context.Context, in *ReqChiPengGang, opts ...grpc.CallOption) (*ResCommon, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResCommon)
	err := c.cc.Invoke(ctx, FastTest_InputChiPengGang_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fastTestClient) ConfirmNewRound(ctx context.Context, in *ReqCommon, opts ...grpc.CallOption) (*ResCommon, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResCommon)
	err := c.cc.Invoke(ctx, FastTest_ConfirmNewRound_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fastTestClient) BroadcastInGame(ctx context.Context, in *ReqBroadcastInGame, opts ...grpc.CallOption) (*ResCommon, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResCommon)
	err := c.cc.Invoke(ctx, FastTest_BroadcastInGame_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fastTestClient) InputGameGMCommand(ctx context.Context, in *ReqGMCommandInGaming, opts ...grpc.CallOption) (*ResCommon, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResCommon)
	err := c.cc.Invoke(ctx, FastTest_InputGameGMCommand_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fastTestClient) FetchGamePlayerState(ctx context.Context, in *ReqCommon, opts ...grpc.CallOption) (*ResGamePlayerState, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResGamePlayerState)
	err := c.cc.Invoke(ctx, FastTest_FetchGamePlayerState_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fastTestClient) CheckNetworkDelay(ctx context.Context, in *ReqCommon, opts ...grpc.CallOption) (*ResCommon, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResCommon)
	err := c.cc.Invoke(ctx, FastTest_CheckNetworkDelay_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fastTestClient) ClearLeaving(ctx context.Context, in *ReqCommon, opts ...grpc.CallOption) (*ResCommon, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResCommon)
	err := c.cc.Invoke(ctx, FastTest_ClearLeaving_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fastTestClient) VoteGameEnd(ctx context.Context, in *ReqVoteGameEnd, opts ...grpc.CallOption) (*ResGameEndVote, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResGameEndVote)
	err := c.cc.Invoke(ctx, FastTest_VoteGameEnd_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fastTestClient) AuthObserve(ctx context.Context, in *ReqAuthObserve, opts ...grpc.CallOption) (*ResCommon, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResCommon)
	err := c.cc.Invoke(ctx, FastTest_AuthObserve_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fastTestClient) StartObserve(ctx context.Context, in *ReqCommon, opts ...grpc.CallOption) (*ResStartObserve, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResStartObserve)
	err := c.cc.Invoke(ctx, FastTest_StartObserve_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fastTestClient) StopObserve(ctx context.Context, in *ReqCommon, opts ...grpc.CallOption) (*ResCommon, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResCommon)
	err := c.cc.Invoke(ctx, FastTest_StopObserve_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FastTestServer is the server API for FastTest service.
// All implementations must embed UnimplementedFastTestServer
// for forward compatibility.
type FastTestServer interface {
	AuthGame(context.Context, *ReqAuthGame) (*ResAuthGame, error)
	EnterGame(context.Context, *ReqCommon) (*ResEnterGame, error)
	SyncGame(context.Context, *ReqSyncGame) (*ResSyncGame, error)
	FinishSyncGame(context.Context, *ReqCommon) (*ResCommon, error)
	TerminateGame(context.Context, *ReqCommon) (*ResCommon, error)
	InputOperation(context.Context, *ReqSelfOperation) (*ResCommon, error)
	InputChiPengGang(context.Context, *ReqChiPengGang) (*ResCommon, error)
	ConfirmNewRound(context.Context, *ReqCommon) (*ResCommon, error)
	BroadcastInGame(context.Context, *ReqBroadcastInGame) (*ResCommon, error)
	InputGameGMCommand(context.Context, *ReqGMCommandInGaming) (*ResCommon, error)
	FetchGamePlayerState(context.Context, *ReqCommon) (*ResGamePlayerState, error)
	CheckNetworkDelay(context.Context, *ReqCommon) (*ResCommon, error)
	ClearLeaving(context.Context, *ReqCommon) (*ResCommon, error)
	VoteGameEnd(context.Context, *ReqVoteGameEnd) (*ResGameEndVote, error)
	AuthObserve(context.Context, *ReqAuthObserve) (*ResCommon, error)
	StartObserve(context.Context, *ReqCommon) (*ResStartObserve, error)
	StopObserve(context.Context, *ReqCommon) (*ResCommon, error)
	mustEmbedUnimplementedFastTestServer()
}

// UnimplementedFastTestServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedFastTestServer struct{}

func (UnimplementedFastTestServer) AuthGame(context.Context, *ReqAuthGame) (*ResAuthGame, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthGame not implemented")
}
func (UnimplementedFastTestServer) EnterGame(context.Context, *ReqCommon) (*ResEnterGame, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnterGame not implemented")
}
func (UnimplementedFastTestServer) SyncGame(context.Context, *ReqSyncGame) (*ResSyncGame, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SyncGame not implemented")
}
func (UnimplementedFastTestServer) FinishSyncGame(context.Context, *ReqCommon) (*ResCommon, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FinishSyncGame not implemented")
}
func (UnimplementedFastTestServer) TerminateGame(context.Context, *ReqCommon) (*ResCommon, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TerminateGame not implemented")
}
func (UnimplementedFastTestServer) InputOperation(context.Context, *ReqSelfOperation) (*ResCommon, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InputOperation not implemented")
}
func (UnimplementedFastTestServer) InputChiPengGang(context.Context, *ReqChiPengGang) (*ResCommon, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InputChiPengGang not implemented")
}
func (UnimplementedFastTestServer) ConfirmNewRound(context.Context, *ReqCommon) (*ResCommon, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfirmNewRound not implemented")
}
func (UnimplementedFastTestServer) BroadcastInGame(context.Context, *ReqBroadcastInGame) (*ResCommon, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BroadcastInGame not implemented")
}
func (UnimplementedFastTestServer) InputGameGMCommand(context.Context, *ReqGMCommandInGaming) (*ResCommon, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InputGameGMCommand not implemented")
}
func (UnimplementedFastTestServer) FetchGamePlayerState(context.Context, *ReqCommon) (*ResGamePlayerState, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchGamePlayerState not implemented")
}
func (UnimplementedFastTestServer) CheckNetworkDelay(context.Context, *ReqCommon) (*ResCommon, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckNetworkDelay not implemented")
}
func (UnimplementedFastTestServer) ClearLeaving(context.Context, *ReqCommon) (*ResCommon, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClearLeaving not implemented")
}
func (UnimplementedFastTestServer) VoteGameEnd(context.Context, *ReqVoteGameEnd) (*ResGameEndVote, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoteGameEnd not implemented")
}
func (UnimplementedFastTestServer) AuthObserve(context.Context, *ReqAuthObserve) (*ResCommon, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthObserve not implemented")
}
func (UnimplementedFastTestServer) StartObserve(context.Context, *ReqCommon) (*ResStartObserve, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartObserve not implemented")
}
func (UnimplementedFastTestServer) StopObserve(context.Context, *ReqCommon) (*ResCommon, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopObserve not implemented")
}
func (UnimplementedFastTestServer) mustEmbedUnimplementedFastTestServer() {}
func (UnimplementedFastTestServer) testEmbeddedByValue()                  {}

// UnsafeFastTestServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FastTestServer will
// result in compilation errors.
type UnsafeFastTestServer interface {
	mustEmbedUnimplementedFastTestServer()
}

func RegisterFastTestServer(s grpc.ServiceRegistrar, srv FastTestServer) {
	// If the following call pancis, it indicates UnimplementedFastTestServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&FastTest_ServiceDesc, srv)
}

func _FastTest_AuthGame_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqAuthGame)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FastTestServer).AuthGame(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FastTest_AuthGame_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FastTestServer).AuthGame(ctx, req.(*ReqAuthGame))
	}
	return interceptor(ctx, in, info, handler)
}

func _FastTest_EnterGame_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqCommon)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FastTestServer).EnterGame(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FastTest_EnterGame_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FastTestServer).EnterGame(ctx, req.(*ReqCommon))
	}
	return interceptor(ctx, in, info, handler)
}

func _FastTest_SyncGame_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqSyncGame)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FastTestServer).SyncGame(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FastTest_SyncGame_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FastTestServer).SyncGame(ctx, req.(*ReqSyncGame))
	}
	return interceptor(ctx, in, info, handler)
}

func _FastTest_FinishSyncGame_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqCommon)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FastTestServer).FinishSyncGame(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FastTest_FinishSyncGame_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FastTestServer).FinishSyncGame(ctx, req.(*ReqCommon))
	}
	return interceptor(ctx, in, info, handler)
}

func _FastTest_TerminateGame_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqCommon)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FastTestServer).TerminateGame(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FastTest_TerminateGame_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FastTestServer).TerminateGame(ctx, req.(*ReqCommon))
	}
	return interceptor(ctx, in, info, handler)
}

func _FastTest_InputOperation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqSelfOperation)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FastTestServer).InputOperation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FastTest_InputOperation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FastTestServer).InputOperation(ctx, req.(*ReqSelfOperation))
	}
	return interceptor(ctx, in, info, handler)
}

func _FastTest_InputChiPengGang_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqChiPengGang)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FastTestServer).InputChiPengGang(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FastTest_InputChiPengGang_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FastTestServer).InputChiPengGang(ctx, req.(*ReqChiPengGang))
	}
	return interceptor(ctx, in, info, handler)
}

func _FastTest_ConfirmNewRound_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqCommon)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FastTestServer).ConfirmNewRound(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FastTest_ConfirmNewRound_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FastTestServer).ConfirmNewRound(ctx, req.(*ReqCommon))
	}
	return interceptor(ctx, in, info, handler)
}

func _FastTest_BroadcastInGame_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqBroadcastInGame)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FastTestServer).BroadcastInGame(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FastTest_BroadcastInGame_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FastTestServer).BroadcastInGame(ctx, req.(*ReqBroadcastInGame))
	}
	return interceptor(ctx, in, info, handler)
}

func _FastTest_InputGameGMCommand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqGMCommandInGaming)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FastTestServer).InputGameGMCommand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FastTest_InputGameGMCommand_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FastTestServer).InputGameGMCommand(ctx, req.(*ReqGMCommandInGaming))
	}
	return interceptor(ctx, in, info, handler)
}

func _FastTest_FetchGamePlayerState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqCommon)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FastTestServer).FetchGamePlayerState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FastTest_FetchGamePlayerState_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FastTestServer).FetchGamePlayerState(ctx, req.(*ReqCommon))
	}
	return interceptor(ctx, in, info, handler)
}

func _FastTest_CheckNetworkDelay_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqCommon)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FastTestServer).CheckNetworkDelay(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FastTest_CheckNetworkDelay_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FastTestServer).CheckNetworkDelay(ctx, req.(*ReqCommon))
	}
	return interceptor(ctx, in, info, handler)
}

func _FastTest_ClearLeaving_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqCommon)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FastTestServer).ClearLeaving(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FastTest_ClearLeaving_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FastTestServer).ClearLeaving(ctx, req.(*ReqCommon))
	}
	return interceptor(ctx, in, info, handler)
}

func _FastTest_VoteGameEnd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqVoteGameEnd)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FastTestServer).VoteGameEnd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FastTest_VoteGameEnd_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FastTestServer).VoteGameEnd(ctx, req.(*ReqVoteGameEnd))
	}
	return interceptor(ctx, in, info, handler)
}

func _FastTest_AuthObserve_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqAuthObserve)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FastTestServer).AuthObserve(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FastTest_AuthObserve_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FastTestServer).AuthObserve(ctx, req.(*ReqAuthObserve))
	}
	return interceptor(ctx, in, info, handler)
}

func _FastTest_StartObserve_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqCommon)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FastTestServer).StartObserve(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FastTest_StartObserve_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FastTestServer).StartObserve(ctx, req.(*ReqCommon))
	}
	return interceptor(ctx, in, info, handler)
}

func _FastTest_StopObserve_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqCommon)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FastTestServer).StopObserve(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FastTest_StopObserve_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FastTestServer).StopObserve(ctx, req.(*ReqCommon))
	}
	return interceptor(ctx, in, info, handler)
}

// FastTest_ServiceDesc is the grpc.ServiceDesc for FastTest service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FastTest_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "lq.FastTest",
	HandlerType: (*FastTestServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "authGame",
			Handler:    _FastTest_AuthGame_Handler,
		},
		{
			MethodName: "enterGame",
			Handler:    _FastTest_EnterGame_Handler,
		},
		{
			MethodName: "syncGame",
			Handler:    _FastTest_SyncGame_Handler,
		},
		{
			MethodName: "finishSyncGame",
			Handler:    _FastTest_FinishSyncGame_Handler,
		},
		{
			MethodName: "terminateGame",
			Handler:    _FastTest_TerminateGame_Handler,
		},
		{
			MethodName: "inputOperation",
			Handler:    _FastTest_InputOperation_Handler,
		},
		{
			MethodName: "inputChiPengGang",
			Handler:    _FastTest_InputChiPengGang_Handler,
		},
		{
			MethodName: "confirmNewRound",
			Handler:    _FastTest_ConfirmNewRound_Handler,
		},
		{
			MethodName: "broadcastInGame",
			Handler:    _FastTest_BroadcastInGame_Handler,
		},
		{
			MethodName: "inputGameGMCommand",
			Handler:    _FastTest_InputGameGMCommand_Handler,
		},
		{
			MethodName: "fetchGamePlayerState",
			Handler:    _FastTest_FetchGamePlayerState_Handler,
		},
		{
			MethodName: "checkNetworkDelay",
			Handler:    _FastTest_CheckNetworkDelay_Handler,
		},
		{
			MethodName: "clearLeaving",
			Handler:    _FastTest_ClearLeaving_Handler,
		},
		{
			MethodName: "voteGameEnd",
			Handler:    _FastTest_VoteGameEnd_Handler,
		},
		{
			MethodName: "authObserve",
			Handler:    _FastTest_AuthObserve_Handler,
		},
		{
			MethodName: "startObserve",
			Handler:    _FastTest_StartObserve_Handler,
		},
		{
			MethodName: "stopObserve",
			Handler:    _FastTest_StopObserve_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "liqi.proto",
}
